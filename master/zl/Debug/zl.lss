
zl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023e  00800060  000063fe  00006492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080029e  0080029e  000066d0  2**0
                  ALLOC
  3 .stab         00004d28  00000000  00000000  000066d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd8  00000000  00000000  0000b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e704  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f805  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010788  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00010bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f3 e6       	ldi	r31, 0x63	; 99
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 10 	call	0x215c	; 0x215c <main>
      8a:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 31 	jmp	0x638c	; 0x638c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 31 	jmp	0x638c	; 0x638c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 31 	jmp	0x63c4	; 0x63c4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 31 	jmp	0x639c	; 0x639c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 31 	jmp	0x63d4	; 0x63d4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 31 	jmp	0x63a4	; 0x63a4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 31 	jmp	0x63dc	; 0x63dc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 31 	jmp	0x63ac	; 0x63ac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 31 	jmp	0x63e4	; 0x63e4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vsetPINDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vsetPINDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	82 34       	cpi	r24, 0x42	; 66
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vsetPINDir+0x2a>
     cc6:	44 c0       	rjmp	.+136    	; 0xd50 <DIO_vsetPINDir+0xb2>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	23 34       	cpi	r18, 0x43	; 67
     cce:	31 05       	cpc	r19, r1
     cd0:	34 f4       	brge	.+12     	; 0xcde <DIO_vsetPINDir+0x40>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	81 34       	cpi	r24, 0x41	; 65
     cd8:	91 05       	cpc	r25, r1
     cda:	71 f0       	breq	.+28     	; 0xcf8 <DIO_vsetPINDir+0x5a>
     cdc:	bc c0       	rjmp	.+376    	; 0xe56 <DIO_vsetPINDir+0x1b8>
     cde:	2c 81       	ldd	r18, Y+4	; 0x04
     ce0:	3d 81       	ldd	r19, Y+5	; 0x05
     ce2:	23 34       	cpi	r18, 0x43	; 67
     ce4:	31 05       	cpc	r19, r1
     ce6:	09 f4       	brne	.+2      	; 0xcea <DIO_vsetPINDir+0x4c>
     ce8:	5f c0       	rjmp	.+190    	; 0xda8 <DIO_vsetPINDir+0x10a>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	84 34       	cpi	r24, 0x44	; 68
     cf0:	91 05       	cpc	r25, r1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <DIO_vsetPINDir+0x58>
     cf4:	85 c0       	rjmp	.+266    	; 0xe00 <DIO_vsetPINDir+0x162>
     cf6:	af c0       	rjmp	.+350    	; 0xe56 <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     cfe:	aa e3       	ldi	r26, 0x3A	; 58
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ea e3       	ldi	r30, 0x3A	; 58
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_vsetPINDir+0x7e>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_vsetPINDir+0x7a>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	98 c0       	rjmp	.+304    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_vsetPINDir+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_vsetPINDir+0xa2>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vsetPINDir+0xd6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vsetPINDir+0xd2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6c c0       	rjmp	.+216    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_vsetPINDir+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_vsetPINDir+0xfa>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	57 c0       	rjmp	.+174    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     dae:	a4 e3       	ldi	r26, 0x34	; 52
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e4 e3       	ldi	r30, 0x34	; 52
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_vsetPINDir+0x12e>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_vsetPINDir+0x12a>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_vsetPINDir+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_vsetPINDir+0x152>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2b c0       	rjmp	.+86     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vsetPINDir+0x186>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vsetPINDir+0x182>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	14 c0       	rjmp	.+40     	; 0xe56 <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_vsetPINDir+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_vsetPINDir+0x1aa>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
		}
		break;
		default: break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_write>:


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_write+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_write+0x8>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	6a 83       	std	Y+2, r22	; 0x02
     e78:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3d 83       	std	Y+5, r19	; 0x05
     e82:	2c 83       	std	Y+4, r18	; 0x04
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	82 34       	cpi	r24, 0x42	; 66
     e8a:	91 05       	cpc	r25, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_write+0x2a>
     e8e:	44 c0       	rjmp	.+136    	; 0xf18 <DIO_write+0xb2>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	23 34       	cpi	r18, 0x43	; 67
     e96:	31 05       	cpc	r19, r1
     e98:	34 f4       	brge	.+12     	; 0xea6 <DIO_write+0x40>
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	9d 81       	ldd	r25, Y+5	; 0x05
     e9e:	81 34       	cpi	r24, 0x41	; 65
     ea0:	91 05       	cpc	r25, r1
     ea2:	71 f0       	breq	.+28     	; 0xec0 <DIO_write+0x5a>
     ea4:	bc c0       	rjmp	.+376    	; 0x101e <DIO_write+0x1b8>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	23 34       	cpi	r18, 0x43	; 67
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <DIO_write+0x4c>
     eb0:	5f c0       	rjmp	.+190    	; 0xf70 <DIO_write+0x10a>
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	9d 81       	ldd	r25, Y+5	; 0x05
     eb6:	84 34       	cpi	r24, 0x44	; 68
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_write+0x58>
     ebc:	85 c0       	rjmp	.+266    	; 0xfc8 <DIO_write+0x162>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	a1 f4       	brne	.+40     	; 0xeee <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     ec6:	ab e3       	ldi	r26, 0x3B	; 59
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	eb e3       	ldi	r30, 0x3B	; 59
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_write+0x7e>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_write+0x7a>
     ee8:	84 2b       	or	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	98 c0       	rjmp	.+304    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     eee:	ab e3       	ldi	r26, 0x3B	; 59
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_write+0xa6>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_write+0xa2>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	83 c0       	rjmp	.+262    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     f1e:	a8 e3       	ldi	r26, 0x38	; 56
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e8 e3       	ldi	r30, 0x38	; 56
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_write+0xd6>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_write+0xd2>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	6c c0       	rjmp	.+216    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     f46:	a8 e3       	ldi	r26, 0x38	; 56
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e8 e3       	ldi	r30, 0x38	; 56
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write+0xfe>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write+0xfa>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	57 c0       	rjmp	.+174    	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_write+0x12e>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_write+0x12a>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     f9e:	a5 e3       	ldi	r26, 0x35	; 53
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 e3       	ldi	r30, 0x35	; 53
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_write+0x156>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_write+0x152>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     fce:	a2 e3       	ldi	r26, 0x32	; 50
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e2 e3       	ldi	r30, 0x32	; 50
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_write+0x186>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_write+0x182>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     ff6:	a2 e3       	ldi	r26, 0x32	; 50
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e2 e3       	ldi	r30, 0x32	; 50
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_write+0x1ae>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_write+0x1aa>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_u8read+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <DIO_u8read+0x8>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	8a 83       	std	Y+2, r24	; 0x02
    103e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 return_value=0;
    1040:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3d 83       	std	Y+5, r19	; 0x05
    104a:	2c 83       	std	Y+4, r18	; 0x04
    104c:	4c 81       	ldd	r20, Y+4	; 0x04
    104e:	5d 81       	ldd	r21, Y+5	; 0x05
    1050:	42 34       	cpi	r20, 0x42	; 66
    1052:	51 05       	cpc	r21, r1
    1054:	b1 f1       	breq	.+108    	; 0x10c2 <DIO_u8read+0x94>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	83 34       	cpi	r24, 0x43	; 67
    105c:	91 05       	cpc	r25, r1
    105e:	34 f4       	brge	.+12     	; 0x106c <DIO_u8read+0x3e>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	21 34       	cpi	r18, 0x41	; 65
    1066:	31 05       	cpc	r19, r1
    1068:	71 f0       	breq	.+28     	; 0x1086 <DIO_u8read+0x58>
    106a:	84 c0       	rjmp	.+264    	; 0x1174 <DIO_u8read+0x146>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	43 34       	cpi	r20, 0x43	; 67
    1072:	51 05       	cpc	r21, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_u8read+0x4a>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <DIO_u8read+0xd0>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	84 34       	cpi	r24, 0x44	; 68
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <DIO_u8read+0x56>
    1082:	5b c0       	rjmp	.+182    	; 0x113a <DIO_u8read+0x10c>
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
    1086:	e9 e3       	ldi	r30, 0x39	; 57
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8read+0x72>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	2a 95       	dec	r18
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8read+0x6e>
    10a4:	9a 01       	movw	r18, r20
    10a6:	28 23       	and	r18, r24
    10a8:	39 23       	and	r19, r25
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8read+0x8a>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8read+0x86>
    10bc:	ca 01       	movw	r24, r20
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	59 c0       	rjmp	.+178    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
    10c2:	e6 e3       	ldi	r30, 0x36	; 54
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_u8read+0xae>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_u8read+0xaa>
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 23       	and	r18, r24
    10e4:	39 23       	and	r19, r25
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8read+0xc6>
    10f0:	55 95       	asr	r21
    10f2:	47 95       	ror	r20
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8read+0xc2>
    10f8:	ca 01       	movw	r24, r20
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	3b c0       	rjmp	.+118    	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8read+0xea>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	2a 95       	dec	r18
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8read+0xe6>
    111c:	9a 01       	movw	r18, r20
    111e:	28 23       	and	r18, r24
    1120:	39 23       	and	r19, r25
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_u8read+0x102>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_u8read+0xfe>
    1134:	ca 01       	movw	r24, r20
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	1d c0       	rjmp	.+58     	; 0x1174 <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
    113a:	e0 e3       	ldi	r30, 0x30	; 48
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8read+0x126>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	2a 95       	dec	r18
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8read+0x122>
    1158:	9a 01       	movw	r18, r20
    115a:	28 23       	and	r18, r24
    115c:	39 23       	and	r19, r25
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a9 01       	movw	r20, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_u8read+0x13e>
    1168:	55 95       	asr	r21
    116a:	47 95       	ror	r20
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_u8read+0x13a>
    1170:	ca 01       	movw	r24, r20
    1172:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: break;
	}
	return return_value ;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_toggle+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_toggle+0x8>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	82 34       	cpi	r24, 0x42	; 66
    11a6:	91 05       	cpc	r25, r1
    11a8:	51 f1       	breq	.+84     	; 0x11fe <DIO_toggle+0x78>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	23 34       	cpi	r18, 0x43	; 67
    11b0:	31 05       	cpc	r19, r1
    11b2:	34 f4       	brge	.+12     	; 0x11c0 <DIO_toggle+0x3a>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	81 34       	cpi	r24, 0x41	; 65
    11ba:	91 05       	cpc	r25, r1
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <DIO_toggle+0x50>
    11be:	5a c0       	rjmp	.+180    	; 0x1274 <DIO_toggle+0xee>
    11c0:	2b 81       	ldd	r18, Y+3	; 0x03
    11c2:	3c 81       	ldd	r19, Y+4	; 0x04
    11c4:	23 34       	cpi	r18, 0x43	; 67
    11c6:	31 05       	cpc	r19, r1
    11c8:	71 f1       	breq	.+92     	; 0x1226 <DIO_toggle+0xa0>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	84 34       	cpi	r24, 0x44	; 68
    11d0:	91 05       	cpc	r25, r1
    11d2:	e9 f1       	breq	.+122    	; 0x124e <DIO_toggle+0xc8>
    11d4:	4f c0       	rjmp	.+158    	; 0x1274 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_toggle+0x6e>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_toggle+0x6a>
    11f8:	84 27       	eor	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	3b c0       	rjmp	.+118    	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    11fe:	a8 e3       	ldi	r26, 0x38	; 56
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e8 e3       	ldi	r30, 0x38	; 56
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_toggle+0x96>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_toggle+0x92>
    1220:	84 27       	eor	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1226:	a5 e3       	ldi	r26, 0x35	; 53
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e5 e3       	ldi	r30, 0x35	; 53
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_toggle+0xbe>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_toggle+0xba>
    1248:	84 27       	eor	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    124e:	a2 e3       	ldi	r26, 0x32	; 50
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_toggle+0xe6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_toggle+0xe2>
    1270:	84 27       	eor	r24, r20
    1272:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <DIO_write_port>:
void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <DIO_write_port+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <DIO_write_port+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3c 83       	std	Y+4, r19	; 0x04
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	82 34       	cpi	r24, 0x42	; 66
    12a2:	91 05       	cpc	r25, r1
    12a4:	d9 f0       	breq	.+54     	; 0x12dc <DIO_write_port+0x5a>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	23 34       	cpi	r18, 0x43	; 67
    12ac:	31 05       	cpc	r19, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <DIO_write_port+0x3a>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 34       	cpi	r24, 0x41	; 65
    12b6:	91 05       	cpc	r25, r1
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <DIO_write_port+0x50>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <DIO_write_port+0x76>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	23 34       	cpi	r18, 0x43	; 67
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <DIO_write_port+0x64>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	84 34       	cpi	r24, 0x44	; 68
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <DIO_write_port+0x6e>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    12d2:	eb e3       	ldi	r30, 0x3B	; 59
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	80 83       	st	Z, r24
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    12f0:	e2 e3       	ldi	r30, 0x32	; 50
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	80 83       	st	Z, r24
		break ;
		default: break ;
	}
}
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <dio_write_highnibble>:
void dio_write_highnibble(uint8 portname,uint8 value)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <dio_write_highnibble+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <dio_write_highnibble+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	82 34       	cpi	r24, 0x42	; 66
    1326:	91 05       	cpc	r25, r1
    1328:	09 f1       	breq	.+66     	; 0x136c <dio_write_highnibble+0x66>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	23 34       	cpi	r18, 0x43	; 67
    1330:	31 05       	cpc	r19, r1
    1332:	34 f4       	brge	.+12     	; 0x1340 <dio_write_highnibble+0x3a>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	81 34       	cpi	r24, 0x41	; 65
    133a:	91 05       	cpc	r25, r1
    133c:	61 f0       	breq	.+24     	; 0x1356 <dio_write_highnibble+0x50>
    133e:	36 c0       	rjmp	.+108    	; 0x13ac <dio_write_highnibble+0xa6>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	23 34       	cpi	r18, 0x43	; 67
    1346:	31 05       	cpc	r19, r1
    1348:	e1 f0       	breq	.+56     	; 0x1382 <dio_write_highnibble+0x7c>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	84 34       	cpi	r24, 0x44	; 68
    1350:	91 05       	cpc	r25, r1
    1352:	11 f1       	breq	.+68     	; 0x1398 <dio_write_highnibble+0x92>
    1354:	2b c0       	rjmp	.+86     	; 0x13ac <dio_write_highnibble+0xa6>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    1356:	ab e3       	ldi	r26, 0x3B	; 59
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e3       	ldi	r30, 0x3B	; 59
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	98 2f       	mov	r25, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 7f       	andi	r24, 0xF0	; 240
    1366:	89 2b       	or	r24, r25
    1368:	8c 93       	st	X, r24
    136a:	20 c0       	rjmp	.+64     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    136c:	a8 e3       	ldi	r26, 0x38	; 56
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e8 e3       	ldi	r30, 0x38	; 56
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	98 2f       	mov	r25, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 7f       	andi	r24, 0xF0	; 240
    137c:	89 2b       	or	r24, r25
    137e:	8c 93       	st	X, r24
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	98 2f       	mov	r25, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 7f       	andi	r24, 0xF0	; 240
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <dio_write_highnibble+0xa6>
		break ;
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	98 2f       	mov	r25, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 7f       	andi	r24, 0xF0	; 240
    13a8:	89 2b       	or	r24, r25
    13aa:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <clear_high_nibble>:

void clear_high_nibble(uint8 portname)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <clear_high_nibble+0x6>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3b 83       	std	Y+3, r19	; 0x03
    13d0:	2a 83       	std	Y+2, r18	; 0x02
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	9b 81       	ldd	r25, Y+3	; 0x03
    13d6:	82 34       	cpi	r24, 0x42	; 66
    13d8:	91 05       	cpc	r25, r1
    13da:	f1 f0       	breq	.+60     	; 0x1418 <clear_high_nibble+0x5e>
    13dc:	2a 81       	ldd	r18, Y+2	; 0x02
    13de:	3b 81       	ldd	r19, Y+3	; 0x03
    13e0:	23 34       	cpi	r18, 0x43	; 67
    13e2:	31 05       	cpc	r19, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <clear_high_nibble+0x38>
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	81 34       	cpi	r24, 0x41	; 65
    13ec:	91 05       	cpc	r25, r1
    13ee:	61 f0       	breq	.+24     	; 0x1408 <clear_high_nibble+0x4e>
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <clear_high_nibble+0x8c>
    13f2:	2a 81       	ldd	r18, Y+2	; 0x02
    13f4:	3b 81       	ldd	r19, Y+3	; 0x03
    13f6:	23 34       	cpi	r18, 0x43	; 67
    13f8:	31 05       	cpc	r19, r1
    13fa:	b1 f0       	breq	.+44     	; 0x1428 <clear_high_nibble+0x6e>
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1400:	84 34       	cpi	r24, 0x44	; 68
    1402:	91 05       	cpc	r25, r1
    1404:	c9 f0       	breq	.+50     	; 0x1438 <clear_high_nibble+0x7e>
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <clear_high_nibble+0x8c>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    1408:	ab e3       	ldi	r26, 0x3B	; 59
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	eb e3       	ldi	r30, 0x3B	; 59
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	8c 93       	st	X, r24
    1416:	17 c0       	rjmp	.+46     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    1418:	a8 e3       	ldi	r26, 0x38	; 56
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 e3       	ldi	r30, 0x38	; 56
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 70       	andi	r24, 0x0F	; 15
    1424:	8c 93       	st	X, r24
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    1428:	a5 e3       	ldi	r26, 0x35	; 53
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	8c 93       	st	X, r24
    1436:	07 c0       	rjmp	.+14     	; 0x1446 <clear_high_nibble+0x8c>
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    1438:	a2 e3       	ldi	r26, 0x32	; 50
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e2 e3       	ldi	r30, 0x32	; 50
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 70       	andi	r24, 0x0F	; 15
    1444:	8c 93       	st	X, r24
		break ;
		default: break ;
		
	}
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <DIO_vconnectpullup>:

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_vconnectpullup+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_vconnectpullup+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	3d 83       	std	Y+5, r19	; 0x05
    146e:	2c 83       	std	Y+4, r18	; 0x04
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	9d 81       	ldd	r25, Y+5	; 0x05
    1474:	82 34       	cpi	r24, 0x42	; 66
    1476:	91 05       	cpc	r25, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <DIO_vconnectpullup+0x2a>
    147a:	5e c0       	rjmp	.+188    	; 0x1538 <DIO_vconnectpullup+0xe6>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	23 34       	cpi	r18, 0x43	; 67
    1482:	31 05       	cpc	r19, r1
    1484:	34 f4       	brge	.+12     	; 0x1492 <DIO_vconnectpullup+0x40>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	81 34       	cpi	r24, 0x41	; 65
    148c:	91 05       	cpc	r25, r1
    148e:	71 f0       	breq	.+28     	; 0x14ac <DIO_vconnectpullup+0x5a>
    1490:	24 c1       	rjmp	.+584    	; 0x16da <DIO_vconnectpullup+0x288>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	23 34       	cpi	r18, 0x43	; 67
    1498:	31 05       	cpc	r19, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_vconnectpullup+0x4c>
    149c:	93 c0       	rjmp	.+294    	; 0x15c4 <DIO_vconnectpullup+0x172>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	84 34       	cpi	r24, 0x44	; 68
    14a4:	91 05       	cpc	r25, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <DIO_vconnectpullup+0x58>
    14a8:	d3 c0       	rjmp	.+422    	; 0x1650 <DIO_vconnectpullup+0x1fe>
    14aa:	17 c1       	rjmp	.+558    	; 0x16da <DIO_vconnectpullup+0x288>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	71 f5       	brne	.+92     	; 0x150e <DIO_vconnectpullup+0xbc>
		{
			CLR_BIT(SFIOR,PUD);
    14b2:	a0 e5       	ldi	r26, 0x50	; 80
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e0 e5       	ldi	r30, 0x50	; 80
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 7f       	andi	r24, 0xFB	; 251
    14be:	8c 93       	st	X, r24
			CLR_BIT(DDRA,pinnumber);
    14c0:	aa e3       	ldi	r26, 0x3A	; 58
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	ea e3       	ldi	r30, 0x3A	; 58
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_vconnectpullup+0x8a>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	2a 95       	dec	r18
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_vconnectpullup+0x86>
    14e0:	80 95       	com	r24
    14e2:	84 23       	and	r24, r20
    14e4:	8c 93       	st	X, r24
			SET_BIT(PORTA,pinnumber);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_vconnectpullup+0xb2>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_vconnectpullup+0xae>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	e6 c0       	rjmp	.+460    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    150e:	ab e3       	ldi	r26, 0x3B	; 59
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	eb e3       	ldi	r30, 0x3B	; 59
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_vconnectpullup+0xda>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_vconnectpullup+0xd6>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	d1 c0       	rjmp	.+418    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	71 f5       	brne	.+92     	; 0x159a <DIO_vconnectpullup+0x148>
		{
			CLR_BIT(SFIOR,PUD);
    153e:	a0 e5       	ldi	r26, 0x50	; 80
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e0 e5       	ldi	r30, 0x50	; 80
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	8c 93       	st	X, r24
			CLR_BIT(DDRB,pinnumber);
    154c:	a7 e3       	ldi	r26, 0x37	; 55
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e7 e3       	ldi	r30, 0x37	; 55
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	48 2f       	mov	r20, r24
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_vconnectpullup+0x116>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	2a 95       	dec	r18
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_vconnectpullup+0x112>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
			SET_BIT(PORTB,pinnumber);
    1572:	a8 e3       	ldi	r26, 0x38	; 56
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e8 e3       	ldi	r30, 0x38	; 56
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_vconnectpullup+0x13e>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_vconnectpullup+0x13a>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	a0 c0       	rjmp	.+320    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    159a:	a8 e3       	ldi	r26, 0x38	; 56
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_vconnectpullup+0x166>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_vconnectpullup+0x162>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	8b c0       	rjmp	.+278    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	71 f5       	brne	.+92     	; 0x1626 <DIO_vconnectpullup+0x1d4>
		{
			CLR_BIT(SFIOR,PUD);
    15ca:	a0 e5       	ldi	r26, 0x50	; 80
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e0 e5       	ldi	r30, 0x50	; 80
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
    15d6:	8c 93       	st	X, r24
			CLR_BIT(DDRC,pinnumber);
    15d8:	a4 e3       	ldi	r26, 0x34	; 52
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e4 e3       	ldi	r30, 0x34	; 52
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	48 2f       	mov	r20, r24
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_vconnectpullup+0x1a2>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	2a 95       	dec	r18
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_vconnectpullup+0x19e>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
			SET_BIT(PORTC,pinnumber);
    15fe:	a5 e3       	ldi	r26, 0x35	; 53
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e3       	ldi	r30, 0x35	; 53
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_vconnectpullup+0x1ca>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_vconnectpullup+0x1c6>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	5a c0       	rjmp	.+180    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1626:	a5 e3       	ldi	r26, 0x35	; 53
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e5 e3       	ldi	r30, 0x35	; 53
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_vconnectpullup+0x1f2>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_vconnectpullup+0x1ee>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	45 c0       	rjmp	.+138    	; 0x16da <DIO_vconnectpullup+0x288>
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	71 f5       	brne	.+92     	; 0x16b2 <DIO_vconnectpullup+0x260>
		{
			CLR_BIT(SFIOR,PUD);
    1656:	a0 e5       	ldi	r26, 0x50	; 80
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e5       	ldi	r30, 0x50	; 80
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	8c 93       	st	X, r24
			CLR_BIT(DDRD,pinnumber);
    1664:	a1 e3       	ldi	r26, 0x31	; 49
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e1 e3       	ldi	r30, 0x31	; 49
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_vconnectpullup+0x22e>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	2a 95       	dec	r18
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_vconnectpullup+0x22a>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
			SET_BIT(PORTD,pinnumber);
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_vconnectpullup+0x256>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_vconnectpullup+0x252>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <DIO_vconnectpullup+0x288>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    16b2:	a2 e3       	ldi	r26, 0x32	; 50
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_vconnectpullup+0x27e>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_vconnectpullup+0x27a>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
		}
		break;
		
	}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <EEPROM_ui8ReadByteFromAddress>:
#include "EEPROM.h"
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <EEPROM_ui8ReadByteFromAddress+0x6>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    16f8:	ec e3       	ldi	r30, 0x3C	; 60
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	82 70       	andi	r24, 0x02	; 2
    1704:	90 70       	andi	r25, 0x00	; 0
    1706:	95 95       	asr	r25
    1708:	87 95       	ror	r24
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	91 05       	cpc	r25, r1
    170e:	a1 f3       	breq	.-24     	; 0x16f8 <EEPROM_ui8ReadByteFromAddress+0xe>
	;
	/* Set up address register */
	EEAR = u16Address;
    1710:	ee e3       	ldi	r30, 0x3E	; 62
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    171c:	ac e3       	ldi	r26, 0x3C	; 60
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	ec e3       	ldi	r30, 0x3C	; 60
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
    172a:	ed e3       	ldi	r30, 0x3D	; 61
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	28 97       	sbiw	r28, 0x08	; 8
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
    1752:	7e 83       	std	Y+6, r23	; 0x06
    1754:	6d 83       	std	Y+5, r22	; 0x05
    1756:	58 87       	std	Y+8, r21	; 0x08
    1758:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    175a:	ec e3       	ldi	r30, 0x3C	; 60
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	82 70       	andi	r24, 0x02	; 2
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	95 95       	asr	r25
    176a:	87 95       	ror	r24
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	a1 f3       	breq	.-24     	; 0x175a <EEPROM_vReadBlockFromAddress+0x20>
	;

	uint16 counter = 0;//the counter of bytes that are read
    1772:	1a 82       	std	Y+2, r1	; 0x02
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	21 c0       	rjmp	.+66     	; 0x17ba <EEPROM_vReadBlockFromAddress+0x80>

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    1778:	ee e3       	ldi	r30, 0x3E	; 62
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	2b 81       	ldd	r18, Y+3	; 0x03
    177e:	3c 81       	ldd	r19, Y+4	; 0x04
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    178c:	ac e3       	ldi	r26, 0x3C	; 60
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ec e3       	ldi	r30, 0x3C	; 60
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    179a:	2d 81       	ldd	r18, Y+5	; 0x05
    179c:	3e 81       	ldd	r19, Y+6	; 0x06
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	d9 01       	movw	r26, r18
    17a4:	a8 0f       	add	r26, r24
    17a6:	b9 1f       	adc	r27, r25
    17a8:	ed e3       	ldi	r30, 0x3D	; 61
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    17ba:	29 81       	ldd	r18, Y+1	; 0x01
    17bc:	3a 81       	ldd	r19, Y+2	; 0x02
    17be:	8f 81       	ldd	r24, Y+7	; 0x07
    17c0:	98 85       	ldd	r25, Y+8	; 0x08
    17c2:	28 17       	cp	r18, r24
    17c4:	39 07       	cpc	r19, r25
    17c6:	c0 f2       	brcs	.-80     	; 0x1778 <EEPROM_vReadBlockFromAddress+0x3e>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
    17c8:	28 96       	adiw	r28, 0x08	; 8
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <EEPROM_vWriteByteToAddress+0x6>
    17e0:	0f 92       	push	r0
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	9a 83       	std	Y+2, r25	; 0x02
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	6b 83       	std	Y+3, r22	; 0x03

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    17ec:	ec e3       	ldi	r30, 0x3C	; 60
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	88 2f       	mov	r24, r24
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	82 70       	andi	r24, 0x02	; 2
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	95 95       	asr	r25
    17fc:	87 95       	ror	r24
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	a1 f3       	breq	.-24     	; 0x17ec <EEPROM_vWriteByteToAddress+0x12>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1804:	ee e3       	ldi	r30, 0x3E	; 62
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1810:	ac e3       	ldi	r26, 0x3C	; 60
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ec e3       	ldi	r30, 0x3C	; 60
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	8c 93       	st	X, r24
	if (EEDR != uiData)//compare the value read to the value to be written
    181e:	ed e3       	ldi	r30, 0x3D	; 61
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	90 81       	ld	r25, Z
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	98 17       	cp	r25, r24
    1828:	91 f0       	breq	.+36     	; 0x184e <EEPROM_vWriteByteToAddress+0x74>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    182a:	ed e3       	ldi	r30, 0x3D	; 61
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    1832:	ac e3       	ldi	r26, 0x3C	; 60
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ec e3       	ldi	r30, 0x3C	; 60
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	84 60       	ori	r24, 0x04	; 4
    183e:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1840:	ac e3       	ldi	r26, 0x3C	; 60
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ec e3       	ldi	r30, 0x3C	; 60
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	82 60       	ori	r24, 0x02	; 2
    184c:	8c 93       	st	X, r24
	else
	{

	}

}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <EEPROM_vWriteBlockToAddress>:

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	28 97       	sbiw	r28, 0x08	; 8
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    1872:	7e 83       	std	Y+6, r23	; 0x06
    1874:	6d 83       	std	Y+5, r22	; 0x05
    1876:	58 87       	std	Y+8, r21	; 0x08
    1878:	4f 83       	std	Y+7, r20	; 0x07
	uint16 counter = 0;//Bytes write counter
    187a:	1a 82       	std	Y+2, r1	; 0x02
    187c:	19 82       	std	Y+1, r1	; 0x01
    187e:	48 c0       	rjmp	.+144    	; 0x1910 <EEPROM_vWriteBlockToAddress+0xb6>
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1880:	ec e3       	ldi	r30, 0x3C	; 60
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	82 70       	andi	r24, 0x02	; 2
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	95 95       	asr	r25
    1890:	87 95       	ror	r24
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	a1 f3       	breq	.-24     	; 0x1880 <EEPROM_vWriteBlockToAddress+0x26>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
    1898:	ee e3       	ldi	r30, 0x3E	; 62
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	2b 81       	ldd	r18, Y+3	; 0x03
    189e:	3c 81       	ldd	r19, Y+4	; 0x04
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    18ac:	ac e3       	ldi	r26, 0x3C	; 60
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	ec e3       	ldi	r30, 0x3C	; 60
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	81 60       	ori	r24, 0x01	; 1
    18b8:	8c 93       	st	X, r24
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    18ba:	ed e3       	ldi	r30, 0x3D	; 61
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	40 81       	ld	r20, Z
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	f9 01       	movw	r30, r18
    18ca:	e8 0f       	add	r30, r24
    18cc:	f9 1f       	adc	r31, r25
    18ce:	80 81       	ld	r24, Z
    18d0:	48 17       	cp	r20, r24
    18d2:	c9 f0       	breq	.+50     	; 0x1906 <EEPROM_vWriteBlockToAddress+0xac>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    18d4:	ad e3       	ldi	r26, 0x3D	; 61
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	2d 81       	ldd	r18, Y+5	; 0x05
    18da:	3e 81       	ldd	r19, Y+6	; 0x06
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	f9 01       	movw	r30, r18
    18e2:	e8 0f       	add	r30, r24
    18e4:	f9 1f       	adc	r31, r25
    18e6:	80 81       	ld	r24, Z
    18e8:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    18ea:	ac e3       	ldi	r26, 0x3C	; 60
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ec e3       	ldi	r30, 0x3C	; 60
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	84 60       	ori	r24, 0x04	; 4
    18f6:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    18f8:	ac e3       	ldi	r26, 0x3C	; 60
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ec e3       	ldi	r30, 0x3C	; 60
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	82 60       	ori	r24, 0x02	; 2
    1904:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
    1910:	29 81       	ldd	r18, Y+1	; 0x01
    1912:	3a 81       	ldd	r19, Y+2	; 0x02
    1914:	8f 81       	ldd	r24, Y+7	; 0x07
    1916:	98 85       	ldd	r25, Y+8	; 0x08
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	08 f4       	brcc	.+2      	; 0x1920 <EEPROM_vWriteBlockToAddress+0xc6>
    191e:	b0 cf       	rjmp	.-160    	; 0x1880 <EEPROM_vWriteBlockToAddress+0x26>
		{

		}
		counter++;//increase bytes counter
	}
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <LCD_vInit>:
static void send_falling_edge(void); //prototype of the private function

#include "LCD.h" 

void LCD_vInit(void)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	2e 97       	sbiw	r28, 0x0e	; 14
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
    1946:	81 e4       	ldi	r24, 0x41	; 65
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
    1950:	81 e4       	ldi	r24, 0x41	; 65
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
    195a:	81 e4       	ldi	r24, 0x41	; 65
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
    1964:	81 e4       	ldi	r24, 0x41	; 65
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
    196e:	81 e4       	ldi	r24, 0x41	; 65
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
    1978:	81 e4       	ldi	r24, 0x41	; 65
    197a:	65 e0       	ldi	r22, 0x05	; 5
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
    1982:	81 e4       	ldi	r24, 0x41	; 65
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
    198c:	81 e4       	ldi	r24, 0x41	; 65
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
    1996:	82 e4       	ldi	r24, 0x42	; 66
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
    19a0:	82 e4       	ldi	r24, 0x42	; 66
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
    19aa:	82 e4       	ldi	r24, 0x42	; 66
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD 
    19b4:	82 e4       	ldi	r24, 0x42	; 66
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode 
    19be:	88 e3       	ldi	r24, 0x38	; 56
    19c0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
    19ca:	8e e0       	ldi	r24, 0x0E	; 14
    19cc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	a0 e2       	ldi	r26, 0x20	; 32
    19d6:	b1 e4       	ldi	r27, 0x41	; 65
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a ef       	ldi	r20, 0xFA	; 250
    19ee:	54 e4       	ldi	r21, 0x44	; 68
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <LCD_vInit+0xf0>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <LCD_vInit+0x16e>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <LCD_vInit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <LCD_vInit+0x150>
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_vInit+0x13e>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <LCD_vInit+0x132>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <LCD_vInit+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <LCD_vInit+0x17a>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	LCD_vSend_cmd(FOUR_BIT_MODE_II); //enable 4 bit LCD Mode 
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
	_delay_ms(10); //small delay to ensure LCD finish the initialization
	#endif
} // end of LCD initialization
    1ab4:	2e 96       	adiw	r28, 0x0e	; 14
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <send_falling_edge>:


static void send_falling_edge(void)
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	6c 97       	sbiw	r28, 0x1c	; 28
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/ 
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
    1ada:	82 e4       	ldi	r24, 0x42	; 66
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e4       	ldi	r27, 0x40	; 64
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    1aee:	9a 8f       	std	Y+26, r25	; 0x1a
    1af0:	ab 8f       	std	Y+27, r26	; 0x1b
    1af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
    1b0e:	9e 8b       	std	Y+22, r25	; 0x16
    1b10:	af 8b       	std	Y+23, r26	; 0x17
    1b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <send_falling_edge+0x70>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <send_falling_edge+0xd0>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a 8b       	std	Y+18, r25	; 0x12
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	89 89       	ldd	r24, Y+17	; 0x11
    1b82:	9a 89       	ldd	r25, Y+18	; 0x12
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <send_falling_edge+0xbe>
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <send_falling_edge+0xb2>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <send_falling_edge+0xfa>
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin 
    1bc8:	82 e4       	ldi	r24, 0x42	; 66
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e4       	ldi	r27, 0x40	; 64
    1bda:	8b 87       	std	Y+11, r24	; 0x0b
    1bdc:	9c 87       	std	Y+12, r25	; 0x0c
    1bde:	ad 87       	std	Y+13, r26	; 0x0d
    1be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	4a ef       	ldi	r20, 0xFA	; 250
    1bf0:	54 e4       	ldi	r21, 0x44	; 68
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	98 87       	std	Y+8, r25	; 0x08
    1bfe:	a9 87       	std	Y+9, r26	; 0x09
    1c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c02:	6f 81       	ldd	r22, Y+7	; 0x07
    1c04:	78 85       	ldd	r23, Y+8	; 0x08
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <send_falling_edge+0x15e>
		__ticks = 1;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    1c24:	6f 81       	ldd	r22, Y+7	; 0x07
    1c26:	78 85       	ldd	r23, Y+8	; 0x08
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	57 e4       	ldi	r21, 0x47	; 71
    1c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	4c f5       	brge	.+82     	; 0x1c8e <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e2       	ldi	r20, 0x20	; 32
    1c4a:	51 e4       	ldi	r21, 0x41	; 65
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	0f c0       	rjmp	.+30     	; 0x1c84 <send_falling_edge+0x1be>
    1c66:	88 ec       	ldi	r24, 0xC8	; 200
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9c 83       	std	Y+4, r25	; 0x04
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <send_falling_edge+0x1ac>
    1c76:	9c 83       	std	Y+4, r25	; 0x04
    1c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <send_falling_edge+0x1a0>
    1c8c:	14 c0       	rjmp	.+40     	; 0x1cb6 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c90:	78 85       	ldd	r23, Y+8	; 0x08
    1c92:	89 85       	ldd	r24, Y+9	; 0x09
    1c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	8d 83       	std	Y+5, r24	; 0x05
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	9a 83       	std	Y+2, r25	; 0x02
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	9a 81       	ldd	r25, Y+2	; 0x02
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <send_falling_edge+0x1e8>
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); // period of low
}
    1cb6:	6c 96       	adiw	r28, 0x1c	; 28
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <LCD_vSend_cmd>:
void LCD_vSend_cmd(uint8 cmd)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
    1cd4:	81 e4       	ldi	r24, 0x41	; 65
    1cd6:	69 81       	ldd	r22, Y+1	; 0x01
    1cd8:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command 
    1cdc:	82 e4       	ldi	r24, 0x42	; 66
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge(); //send falling edge
    1ce6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <send_falling_edge>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command
	send_falling_edge(); //send falling edge
	/***************************************/
	#endif
	
}
    1cea:	0f 90       	pop	r0
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <LCD_vSend_char>:
void LCD_vSend_char(uint8 data)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	89 83       	std	Y+1, r24	; 0x01
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
    1cfe:	81 e4       	ldi	r24, 0x41	; 65
    1d00:	69 81       	ldd	r22, Y+1	; 0x01
    1d02:	0e 94 41 09 	call	0x1282	; 0x1282 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
    1d06:	82 e4       	ldi	r24, 0x42	; 66
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
	send_falling_edge(); //send falling edge
    1d10:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <send_falling_edge>
	dio_write_highnibble(LCD_PORT,data<<4);
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
	send_falling_edge(); //send falling edge
	/******************************************/
	#endif
}
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <LCD_vSend_string+0x6>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9a 83       	std	Y+2, r25	; 0x02
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	0a c0       	rjmp	.+20     	; 0x1d40 <LCD_vSend_string+0x24>
	while((*data)!=0) //keep in the loop until the end of the string 
	{
		LCD_vSend_char(*data); // print the characters of the string 
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
		data++; // make the pointer points to the next character
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string 
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	89 f7       	brne	.-30     	; 0x1d2c <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data); // print the characters of the string 
		data++; // make the pointer points to the next character
	}
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <LCD_movecursor>:
void LCD_movecursor(uint8 row,uint8 coloumn)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <LCD_movecursor+0x6>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    1d76:	6b 83       	std	Y+3, r22	; 0x03
	uint8 data ; // the command which will set the position of the cursor
	/* in case of wrong input set the cursor to the first position of the LCD*/
	if(row>2||row<1||coloumn>16||coloumn<1)
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	83 30       	cpi	r24, 0x03	; 3
    1d7c:	48 f4       	brcc	.+18     	; 0x1d90 <LCD_movecursor+0x28>
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 23       	and	r24, r24
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <LCD_movecursor+0x28>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	81 31       	cpi	r24, 0x11	; 17
    1d88:	18 f4       	brcc	.+6      	; 0x1d90 <LCD_movecursor+0x28>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 23       	and	r24, r24
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <LCD_movecursor+0x2c>
	{
		data=0x80;
    1d90:	80 e8       	ldi	r24, 0x80	; 128
    1d92:	89 83       	std	Y+1, r24	; 0x01
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	21 f4       	brne	.+8      	; 0x1da2 <LCD_movecursor+0x3a>
	{
		data=0x80+coloumn-1 ;
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	81 58       	subi	r24, 0x81	; 129
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	06 c0       	rjmp	.+12     	; 0x1dae <LCD_movecursor+0x46>
	}
	else if (row==2)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	19 f4       	brne	.+6      	; 0x1dae <LCD_movecursor+0x46>
	{
		data=0xc0+coloumn-1;
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 54       	subi	r24, 0x41	; 65
    1dac:	89 83       	std	Y+1, r24	; 0x01
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_vSend_cmd>
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LED_vInit>:
* Created: 2/9/2018 7:16:44 PM
*  Author: Mohamed Zaghlol
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LED_vInit+0x6>
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <LED_vTurnOn+0x6>
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	6a 81       	ldd	r22, Y+2	; 0x02
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <LED_vTurnOff+0x6>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	6a 81       	ldd	r22, Y+2	; 0x02
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <LED_vToggle+0x6>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	89 83       	std	Y+1, r24	; 0x01
    1e32:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	6a 81       	ldd	r22, Y+2	; 0x02
    1e38:	0e 94 c3 08 	call	0x1186	; 0x1186 <DIO_toggle>
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LED_u8ReadStatus+0x6>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	6a 81       	ldd	r22, Y+2	; 0x02
    1e58:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <SPI_vInitMaster>:
#include "SPI.h"
#include "STD_MESSAGES.h"
#include "std_macros.h"

void SPI_vInitMaster (void)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    1e6e:	a7 e3       	ldi	r26, 0x37	; 55
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e3       	ldi	r30, 0x37	; 55
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 6b       	ori	r24, 0xB0	; 176
    1e7a:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    1e7c:	ad e2       	ldi	r26, 0x2D	; 45
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	ed e2       	ldi	r30, 0x2D	; 45
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	81 65       	ori	r24, 0x51	; 81
    1e88:	8c 93       	st	X, r24
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    1e98:	a7 e3       	ldi	r26, 0x37	; 55
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e7 e3       	ldi	r30, 0x37	; 55
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    1ea6:	ad e2       	ldi	r26, 0x2D	; 45
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	ed e2       	ldi	r30, 0x2D	; 45
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 64       	ori	r24, 0x40	; 64
    1eb2:	8c 93       	st	X, r24
}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	0f 92       	push	r0
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    1ec6:	ef e2       	ldi	r30, 0x2F	; 47
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1ece:	ee e2       	ldi	r30, 0x2E	; 46
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	88 1f       	adc	r24, r24
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	a9 f3       	breq	.-22     	; 0x1ece <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1ee4:	ef e2       	ldi	r30, 0x2F	; 47
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <keypad_vInit>:
* Created: 2/24/2018 4:06:22 PM
*  Author: Mohamed Zaghlol
*/
#include "keypad_driver.h"
void keypad_vInit(void)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1efa:	84 e4       	ldi	r24, 0x44	; 68
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1f04:	84 e4       	ldi	r24, 0x44	; 68
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1f0e:	84 e4       	ldi	r24, 0x44	; 68
    1f10:	62 e0       	ldi	r22, 0x02	; 2
    1f12:	41 e0       	ldi	r20, 0x01	; 1
    1f14:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1f18:	84 e4       	ldi	r24, 0x44	; 68
    1f1a:	63 e0       	ldi	r22, 0x03	; 3
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
    1f22:	84 e4       	ldi	r24, 0x44	; 68
    1f24:	64 e0       	ldi	r22, 0x04	; 4
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
    1f2c:	84 e4       	ldi	r24, 0x44	; 68
    1f2e:	65 e0       	ldi	r22, 0x05	; 5
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
    1f36:	84 e4       	ldi	r24, 0x44	; 68
    1f38:	66 e0       	ldi	r22, 0x06	; 6
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
    1f40:	84 e4       	ldi	r24, 0x44	; 68
    1f42:	67 e0       	ldi	r22, 0x07	; 7
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
    1f4a:	84 e4       	ldi	r24, 0x44	; 68
    1f4c:	64 e0       	ldi	r22, 0x04	; 4
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
    1f54:	84 e4       	ldi	r24, 0x44	; 68
    1f56:	65 e0       	ldi	r22, 0x05	; 5
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
    1f5e:	84 e4       	ldi	r24, 0x44	; 68
    1f60:	66 e0       	ldi	r22, 0x06	; 6
    1f62:	41 e0       	ldi	r20, 0x01	; 1
    1f64:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
    1f68:	84 e4       	ldi	r24, 0x44	; 68
    1f6a:	67 e0       	ldi	r22, 0x07	; 7
    1f6c:	41 e0       	ldi	r20, 0x01	; 1
    1f6e:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_vconnectpullup>
	/****************************************************/
}
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <keypad_u8check_press>:
uint8 keypad_u8check_press(void)
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	a7 97       	sbiw	r28, 0x27	; 39
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	43 96       	adiw	r24, 0x13	; 19
    1f90:	9c a3       	std	Y+36, r25	; 0x24
    1f92:	8b a3       	std	Y+35, r24	; 0x23
    1f94:	ed e8       	ldi	r30, 0x8D	; 141
    1f96:	f2 e0       	ldi	r31, 0x02	; 2
    1f98:	fe a3       	std	Y+38, r31	; 0x26
    1f9a:	ed a3       	std	Y+37, r30	; 0x25
    1f9c:	f0 e1       	ldi	r31, 0x10	; 16
    1f9e:	ff a3       	std	Y+39, r31	; 0x27
    1fa0:	ed a1       	ldd	r30, Y+37	; 0x25
    1fa2:	fe a1       	ldd	r31, Y+38	; 0x26
    1fa4:	00 80       	ld	r0, Z
    1fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	9e a3       	std	Y+38, r25	; 0x26
    1fae:	8d a3       	std	Y+37, r24	; 0x25
    1fb0:	eb a1       	ldd	r30, Y+35	; 0x23
    1fb2:	fc a1       	ldd	r31, Y+36	; 0x24
    1fb4:	00 82       	st	Z, r0
    1fb6:	8b a1       	ldd	r24, Y+35	; 0x23
    1fb8:	9c a1       	ldd	r25, Y+36	; 0x24
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	9c a3       	std	Y+36, r25	; 0x24
    1fbe:	8b a3       	std	Y+35, r24	; 0x23
    1fc0:	9f a1       	ldd	r25, Y+39	; 0x27
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	9f a3       	std	Y+39, r25	; 0x27
    1fc6:	ef a1       	ldd	r30, Y+39	; 0x27
    1fc8:	ee 23       	and	r30, r30
    1fca:	51 f7       	brne	.-44     	; 0x1fa0 <keypad_u8check_press+0x28>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	for(row=0;row<4;row++)
    1fd0:	1a 8a       	std	Y+18, r1	; 0x12
    1fd2:	b6 c0       	rjmp	.+364    	; 0x2140 <keypad_u8check_press+0x1c8>
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
    1fd4:	84 e4       	ldi	r24, 0x44	; 68
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
    1fde:	84 e4       	ldi	r24, 0x44	; 68
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
    1fe8:	84 e4       	ldi	r24, 0x44	; 68
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
    1ff2:	84 e4       	ldi	r24, 0x44	; 68
    1ff4:	63 e0       	ldi	r22, 0x03	; 3
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 ea       	ldi	r26, 0xA0	; 160
    2002:	b1 e4       	ldi	r27, 0x41	; 65
    2004:	8b 87       	std	Y+11, r24	; 0x0b
    2006:	9c 87       	std	Y+12, r25	; 0x0c
    2008:	ad 87       	std	Y+13, r26	; 0x0d
    200a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200c:	6b 85       	ldd	r22, Y+11	; 0x0b
    200e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2010:	8d 85       	ldd	r24, Y+13	; 0x0d
    2012:	9e 85       	ldd	r25, Y+14	; 0x0e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a ef       	ldi	r20, 0xFA	; 250
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8f 83       	std	Y+7, r24	; 0x07
    2026:	98 87       	std	Y+8, r25	; 0x08
    2028:	a9 87       	std	Y+9, r26	; 0x09
    202a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202c:	6f 81       	ldd	r22, Y+7	; 0x07
    202e:	78 85       	ldd	r23, Y+8	; 0x08
    2030:	89 85       	ldd	r24, Y+9	; 0x09
    2032:	9a 85       	ldd	r25, Y+10	; 0x0a
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	2c f4       	brge	.+10     	; 0x204e <keypad_u8check_press+0xd6>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9e 83       	std	Y+6, r25	; 0x06
    204a:	8d 83       	std	Y+5, r24	; 0x05
    204c:	3f c0       	rjmp	.+126    	; 0x20cc <keypad_u8check_press+0x154>
	else if (__tmp > 65535)
    204e:	6f 81       	ldd	r22, Y+7	; 0x07
    2050:	78 85       	ldd	r23, Y+8	; 0x08
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	4c f5       	brge	.+82     	; 0x20b8 <keypad_u8check_press+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2066:	6b 85       	ldd	r22, Y+11	; 0x0b
    2068:	7c 85       	ldd	r23, Y+12	; 0x0c
    206a:	8d 85       	ldd	r24, Y+13	; 0x0d
    206c:	9e 85       	ldd	r25, Y+14	; 0x0e
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e2       	ldi	r20, 0x20	; 32
    2074:	51 e4       	ldi	r21, 0x41	; 65
    2076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	bc 01       	movw	r22, r24
    2080:	cd 01       	movw	r24, r26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <keypad_u8check_press+0x136>
    2090:	88 ec       	ldi	r24, 0xC8	; 200
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <keypad_u8check_press+0x124>
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	69 f7       	brne	.-38     	; 0x2090 <keypad_u8check_press+0x118>
    20b6:	14 c0       	rjmp	.+40     	; 0x20e0 <keypad_u8check_press+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e 83       	std	Y+6, r25	; 0x06
    20ca:	8d 83       	std	Y+5, r24	; 0x05
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <keypad_u8check_press+0x160>
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
    20e0:	84 e4       	ldi	r24, 0x44	; 68
    20e2:	6a 89       	ldd	r22, Y+18	; 0x12
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
    20ea:	19 8a       	std	Y+17, r1	; 0x11
    20ec:	23 c0       	rjmp	.+70     	; 0x2134 <keypad_u8check_press+0x1bc>
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
    20ee:	89 89       	ldd	r24, Y+17	; 0x11
    20f0:	98 2f       	mov	r25, r24
    20f2:	9c 5f       	subi	r25, 0xFC	; 252
    20f4:	84 e4       	ldi	r24, 0x44	; 68
    20f6:	69 2f       	mov	r22, r25
    20f8:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_u8read>
    20fc:	88 8b       	std	Y+16, r24	; 0x10
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
    20fe:	88 89       	ldd	r24, Y+16	; 0x10
    2100:	88 23       	and	r24, r24
    2102:	a9 f4       	brne	.+42     	; 0x212e <keypad_u8check_press+0x1b6>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
    2104:	8a 89       	ldd	r24, Y+18	; 0x12
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	89 89       	ldd	r24, Y+17	; 0x11
    210c:	48 2f       	mov	r20, r24
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	22 0f       	add	r18, r18
    2116:	33 1f       	adc	r19, r19
    2118:	ce 01       	movw	r24, r28
    211a:	01 96       	adiw	r24, 0x01	; 1
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	84 0f       	add	r24, r20
    2122:	95 1f       	adc	r25, r21
    2124:	fc 01       	movw	r30, r24
    2126:	72 96       	adiw	r30, 0x12	; 18
    2128:	80 81       	ld	r24, Z
    212a:	8f 87       	std	Y+15, r24	; 0x0f
    212c:	06 c0       	rjmp	.+12     	; 0x213a <keypad_u8check_press+0x1c2>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
    212e:	89 89       	ldd	r24, Y+17	; 0x11
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	89 8b       	std	Y+17, r24	; 0x11
    2134:	89 89       	ldd	r24, Y+17	; 0x11
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	d0 f2       	brcs	.-76     	; 0x20ee <keypad_u8check_press+0x176>
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
    213a:	8a 89       	ldd	r24, Y+18	; 0x12
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	8a 8b       	std	Y+18, r24	; 0x12
    2140:	8a 89       	ldd	r24, Y+18	; 0x12
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	08 f4       	brcc	.+2      	; 0x2148 <keypad_u8check_press+0x1d0>
    2146:	46 cf       	rjmp	.-372    	; 0x1fd4 <keypad_u8check_press+0x5c>
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	a7 96       	adiw	r28, 0x27	; 39
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <main>:
volatile uint16 session_counter = 0;//indicate session time
uint8 timeout_flag = FALSE;//stores if the session is still valid or outdated


int main(void)
{
    215c:	0f 93       	push	r16
    215e:	1f 93       	push	r17
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	c6 5f       	subi	r28, 0xF6	; 246
    216a:	d1 40       	sbci	r29, 0x01	; 1
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
	uint8 temperature = 0;//The average temperature of the room
    2176:	fe 01       	movw	r30, r28
    2178:	ea 51       	subi	r30, 0x1A	; 26
    217a:	fe 4f       	sbci	r31, 0xFE	; 254
    217c:	10 82       	st	Z, r1
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
    217e:	fe 01       	movw	r30, r28
    2180:	eb 51       	subi	r30, 0x1B	; 27
    2182:	fe 4f       	sbci	r31, 0xFE	; 254
    2184:	8f ef       	ldi	r24, 0xFF	; 255
    2186:	80 83       	st	Z, r24
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
    2188:	fe 01       	movw	r30, r28
    218a:	ec 51       	subi	r30, 0x1C	; 28
    218c:	fe 4f       	sbci	r31, 0xFE	; 254
    218e:	8f ef       	ldi	r24, 0xFF	; 255
    2190:	80 83       	st	Z, r24
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
    2192:	fe 01       	movw	r30, r28
    2194:	ed 51       	subi	r30, 0x1D	; 29
    2196:	fe 4f       	sbci	r31, 0xFE	; 254
    2198:	10 82       	st	Z, r1
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
    219a:	fe 01       	movw	r30, r28
    219c:	ee 51       	subi	r30, 0x1E	; 30
    219e:	fe 4f       	sbci	r31, 0xFE	; 254
    21a0:	10 82       	st	Z, r1
	uint8 key_pressed = NOT_PRESSED;//
    21a2:	fe 01       	movw	r30, r28
    21a4:	ef 51       	subi	r30, 0x1F	; 31
    21a6:	fe 4f       	sbci	r31, 0xFE	; 254
    21a8:	8f ef       	ldi	r24, 0xFF	; 255
    21aa:	80 83       	st	Z, r24
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
    21ac:	83 e4       	ldi	r24, 0x43	; 67
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
    21b4:	83 e4       	ldi	r24, 0x43	; 67
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
    21bc:	83 e4       	ldi	r24, 0x43	; 67
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LED_vInit>
	LCD_vInit();//initializes the LCD screen
    21c4:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vInit>
	keypad_vInit();//initializes the keypad
    21c8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
    21cc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <SPI_vInitMaster>
	/******************************************************/
	/* Printing Welcome screen */
	LCD_vSend_string("Welcome to smart");
    21d0:	80 e6       	ldi	r24, 0x60	; 96
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
	LCD_movecursor(2,1);
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	61 e0       	ldi	r22, 0x01	; 1
    21dc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
	LCD_vSend_string("home system");
    21e0:	81 e7       	ldi	r24, 0x71	; 113
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    21e8:	fe 01       	movw	r30, r28
    21ea:	e7 52       	subi	r30, 0x27	; 39
    21ec:	fe 4f       	sbci	r31, 0xFE	; 254
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	aa e7       	ldi	r26, 0x7A	; 122
    21f4:	b4 e4       	ldi	r27, 0x44	; 68
    21f6:	80 83       	st	Z, r24
    21f8:	91 83       	std	Z+1, r25	; 0x01
    21fa:	a2 83       	std	Z+2, r26	; 0x02
    21fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	8e 01       	movw	r16, r28
    2200:	0b 52       	subi	r16, 0x2B	; 43
    2202:	1e 4f       	sbci	r17, 0xFE	; 254
    2204:	fe 01       	movw	r30, r28
    2206:	e7 52       	subi	r30, 0x27	; 39
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	60 81       	ld	r22, Z
    220c:	71 81       	ldd	r23, Z+1	; 0x01
    220e:	82 81       	ldd	r24, Z+2	; 0x02
    2210:	93 81       	ldd	r25, Z+3	; 0x03
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4a ef       	ldi	r20, 0xFA	; 250
    2218:	54 e4       	ldi	r21, 0x44	; 68
    221a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	80 83       	st	Z, r24
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	a2 83       	std	Z+2, r26	; 0x02
    222a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222c:	fe 01       	movw	r30, r28
    222e:	eb 52       	subi	r30, 0x2B	; 43
    2230:	fe 4f       	sbci	r31, 0xFE	; 254
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	44 f4       	brge	.+16     	; 0x225a <main+0xfe>
		__ticks = 1;
    224a:	fe 01       	movw	r30, r28
    224c:	ed 52       	subi	r30, 0x2D	; 45
    224e:	fe 4f       	sbci	r31, 0xFE	; 254
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	64 c0       	rjmp	.+200    	; 0x2322 <main+0x1c6>
	else if (__tmp > 65535)
    225a:	fe 01       	movw	r30, r28
    225c:	eb 52       	subi	r30, 0x2B	; 43
    225e:	fe 4f       	sbci	r31, 0xFE	; 254
    2260:	60 81       	ld	r22, Z
    2262:	71 81       	ldd	r23, Z+1	; 0x01
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	0c f0       	brlt	.+2      	; 0x227a <main+0x11e>
    2278:	43 c0       	rjmp	.+134    	; 0x2300 <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	fe 01       	movw	r30, r28
    227c:	e7 52       	subi	r30, 0x27	; 39
    227e:	fe 4f       	sbci	r31, 0xFE	; 254
    2280:	60 81       	ld	r22, Z
    2282:	71 81       	ldd	r23, Z+1	; 0x01
    2284:	82 81       	ldd	r24, Z+2	; 0x02
    2286:	93 81       	ldd	r25, Z+3	; 0x03
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8e 01       	movw	r16, r28
    229a:	0d 52       	subi	r16, 0x2D	; 45
    229c:	1e 4f       	sbci	r17, 0xFE	; 254
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	91 83       	std	Z+1, r25	; 0x01
    22ae:	80 83       	st	Z, r24
    22b0:	1f c0       	rjmp	.+62     	; 0x22f0 <main+0x194>
    22b2:	fe 01       	movw	r30, r28
    22b4:	ef 52       	subi	r30, 0x2F	; 47
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	fe 01       	movw	r30, r28
    22c2:	ef 52       	subi	r30, 0x2F	; 47
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <main+0x16e>
    22ce:	fe 01       	movw	r30, r28
    22d0:	ef 52       	subi	r30, 0x2F	; 47
    22d2:	fe 4f       	sbci	r31, 0xFE	; 254
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	de 01       	movw	r26, r28
    22da:	ad 52       	subi	r26, 0x2D	; 45
    22dc:	be 4f       	sbci	r27, 0xFE	; 254
    22de:	fe 01       	movw	r30, r28
    22e0:	ed 52       	subi	r30, 0x2D	; 45
    22e2:	fe 4f       	sbci	r31, 0xFE	; 254
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	11 96       	adiw	r26, 0x01	; 1
    22ec:	9c 93       	st	X, r25
    22ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	fe 01       	movw	r30, r28
    22f2:	ed 52       	subi	r30, 0x2D	; 45
    22f4:	fe 4f       	sbci	r31, 0xFE	; 254
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	d1 f6       	brne	.-76     	; 0x22b2 <main+0x156>
    22fe:	27 c0       	rjmp	.+78     	; 0x234e <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	8e 01       	movw	r16, r28
    2302:	0d 52       	subi	r16, 0x2D	; 45
    2304:	1e 4f       	sbci	r17, 0xFE	; 254
    2306:	fe 01       	movw	r30, r28
    2308:	eb 52       	subi	r30, 0x2B	; 43
    230a:	fe 4f       	sbci	r31, 0xFE	; 254
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	f8 01       	movw	r30, r16
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	de 01       	movw	r26, r28
    2324:	a1 53       	subi	r26, 0x31	; 49
    2326:	be 4f       	sbci	r27, 0xFE	; 254
    2328:	fe 01       	movw	r30, r28
    232a:	ed 52       	subi	r30, 0x2D	; 45
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	80 81       	ld	r24, Z
    2330:	91 81       	ldd	r25, Z+1	; 0x01
    2332:	8d 93       	st	X+, r24
    2334:	9c 93       	st	X, r25
    2336:	fe 01       	movw	r30, r28
    2338:	e1 53       	subi	r30, 0x31	; 49
    233a:	fe 4f       	sbci	r31, 0xFE	; 254
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <main+0x1e4>
    2344:	fe 01       	movw	r30, r28
    2346:	e1 53       	subi	r30, 0x31	; 49
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
	_delay_ms(1000);//Halt the system for the given time in (ms)
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    234e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	0e 94 75 0b 	call	0x16ea	; 0x16ea <EEPROM_ui8ReadByteFromAddress>
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	39 f4       	brne	.+14     	; 0x236c <main+0x210>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	0e 94 75 0b 	call	0x16ea	; 0x16ea <EEPROM_ui8ReadByteFromAddress>
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	09 f4       	brne	.+2      	; 0x236c <main+0x210>
    236a:	e9 c5       	rjmp	.+3026   	; 0x2f3e <main+0xde2>
	{
		LCD_vSend_string("Login for");//printing login menu
    236c:	8d e7       	ldi	r24, 0x7D	; 125
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);//move the cursor to the second line
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("first time");
    237c:	87 e8       	ldi	r24, 0x87	; 135
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2384:	fe 01       	movw	r30, r28
    2386:	e5 53       	subi	r30, 0x35	; 53
    2388:	fe 4f       	sbci	r31, 0xFE	; 254
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	aa e7       	ldi	r26, 0x7A	; 122
    2390:	b4 e4       	ldi	r27, 0x44	; 68
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	8e 01       	movw	r16, r28
    239c:	09 53       	subi	r16, 0x39	; 57
    239e:	1e 4f       	sbci	r17, 0xFE	; 254
    23a0:	fe 01       	movw	r30, r28
    23a2:	e5 53       	subi	r30, 0x35	; 53
    23a4:	fe 4f       	sbci	r31, 0xFE	; 254
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c8:	fe 01       	movw	r30, r28
    23ca:	e9 53       	subi	r30, 0x39	; 57
    23cc:	fe 4f       	sbci	r31, 0xFE	; 254
    23ce:	60 81       	ld	r22, Z
    23d0:	71 81       	ldd	r23, Z+1	; 0x01
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	93 81       	ldd	r25, Z+3	; 0x03
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	44 f4       	brge	.+16     	; 0x23f6 <main+0x29a>
		__ticks = 1;
    23e6:	fe 01       	movw	r30, r28
    23e8:	eb 53       	subi	r30, 0x3B	; 59
    23ea:	fe 4f       	sbci	r31, 0xFE	; 254
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
    23f4:	64 c0       	rjmp	.+200    	; 0x24be <main+0x362>
	else if (__tmp > 65535)
    23f6:	fe 01       	movw	r30, r28
    23f8:	e9 53       	subi	r30, 0x39	; 57
    23fa:	fe 4f       	sbci	r31, 0xFE	; 254
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	3f ef       	ldi	r19, 0xFF	; 255
    2408:	4f e7       	ldi	r20, 0x7F	; 127
    240a:	57 e4       	ldi	r21, 0x47	; 71
    240c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2410:	18 16       	cp	r1, r24
    2412:	0c f0       	brlt	.+2      	; 0x2416 <main+0x2ba>
    2414:	43 c0       	rjmp	.+134    	; 0x249c <main+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2416:	fe 01       	movw	r30, r28
    2418:	e5 53       	subi	r30, 0x35	; 53
    241a:	fe 4f       	sbci	r31, 0xFE	; 254
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e2       	ldi	r20, 0x20	; 32
    242a:	51 e4       	ldi	r21, 0x41	; 65
    242c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	8e 01       	movw	r16, r28
    2436:	0b 53       	subi	r16, 0x3B	; 59
    2438:	1e 4f       	sbci	r17, 0xFE	; 254
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	f8 01       	movw	r30, r16
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	80 83       	st	Z, r24
    244c:	1f c0       	rjmp	.+62     	; 0x248c <main+0x330>
    244e:	fe 01       	movw	r30, r28
    2450:	ed 53       	subi	r30, 0x3D	; 61
    2452:	fe 4f       	sbci	r31, 0xFE	; 254
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	fe 01       	movw	r30, r28
    245e:	ed 53       	subi	r30, 0x3D	; 61
    2460:	fe 4f       	sbci	r31, 0xFE	; 254
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <main+0x30a>
    246a:	fe 01       	movw	r30, r28
    246c:	ed 53       	subi	r30, 0x3D	; 61
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2474:	de 01       	movw	r26, r28
    2476:	ab 53       	subi	r26, 0x3B	; 59
    2478:	be 4f       	sbci	r27, 0xFE	; 254
    247a:	fe 01       	movw	r30, r28
    247c:	eb 53       	subi	r30, 0x3B	; 59
    247e:	fe 4f       	sbci	r31, 0xFE	; 254
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	11 96       	adiw	r26, 0x01	; 1
    2488:	9c 93       	st	X, r25
    248a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	fe 01       	movw	r30, r28
    248e:	eb 53       	subi	r30, 0x3B	; 59
    2490:	fe 4f       	sbci	r31, 0xFE	; 254
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	d1 f6       	brne	.-76     	; 0x244e <main+0x2f2>
    249a:	27 c0       	rjmp	.+78     	; 0x24ea <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	8e 01       	movw	r16, r28
    249e:	0b 53       	subi	r16, 0x3B	; 59
    24a0:	1e 4f       	sbci	r17, 0xFE	; 254
    24a2:	fe 01       	movw	r30, r28
    24a4:	e9 53       	subi	r30, 0x39	; 57
    24a6:	fe 4f       	sbci	r31, 0xFE	; 254
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	de 01       	movw	r26, r28
    24c0:	af 53       	subi	r26, 0x3F	; 63
    24c2:	be 4f       	sbci	r27, 0xFE	; 254
    24c4:	fe 01       	movw	r30, r28
    24c6:	eb 53       	subi	r30, 0x3B	; 59
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	80 81       	ld	r24, Z
    24cc:	91 81       	ldd	r25, Z+1	; 0x01
    24ce:	8d 93       	st	X+, r24
    24d0:	9c 93       	st	X, r25
    24d2:	fe 01       	movw	r30, r28
    24d4:	ef 53       	subi	r30, 0x3F	; 63
    24d6:	fe 4f       	sbci	r31, 0xFE	; 254
    24d8:	80 81       	ld	r24, Z
    24da:	91 81       	ldd	r25, Z+1	; 0x01
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <main+0x380>
    24e0:	fe 01       	movw	r30, r28
    24e2:	ef 53       	subi	r30, 0x3F	; 63
    24e4:	fe 4f       	sbci	r31, 0xFE	; 254
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    24ea:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Set Admin pass");//printing the set admin password menu
    24ee:	82 e9       	ldi	r24, 0x92	; 146
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("Admin pass:");
    24fe:	81 ea       	ldi	r24, 0xA1	; 161
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
    2506:	fe 01       	movw	r30, r28
    2508:	e0 52       	subi	r30, 0x20	; 32
    250a:	fe 4f       	sbci	r31, 0xFE	; 254
    250c:	10 82       	st	Z, r1
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
    250e:	fe 01       	movw	r30, r28
    2510:	e9 51       	subi	r30, 0x19	; 25
    2512:	fe 4f       	sbci	r31, 0xFE	; 254
    2514:	8f ef       	ldi	r24, 0xFF	; 255
    2516:	80 83       	st	Z, r24
    2518:	fe 01       	movw	r30, r28
    251a:	e9 51       	subi	r30, 0x19	; 25
    251c:	fe 4f       	sbci	r31, 0xFE	; 254
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	81 83       	std	Z+1, r24	; 0x01
    2522:	fe 01       	movw	r30, r28
    2524:	e9 51       	subi	r30, 0x19	; 25
    2526:	fe 4f       	sbci	r31, 0xFE	; 254
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	82 83       	std	Z+2, r24	; 0x02
    252c:	fe 01       	movw	r30, r28
    252e:	e9 51       	subi	r30, 0x19	; 25
    2530:	fe 4f       	sbci	r31, 0xFE	; 254
    2532:	8f ef       	ldi	r24, 0xFF	; 255
    2534:	83 83       	std	Z+3, r24	; 0x03
    2536:	a5 c1       	rjmp	.+842    	; 0x2882 <main+0x726>
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2538:	fe 01       	movw	r30, r28
    253a:	ef 51       	subi	r30, 0x1F	; 31
    253c:	fe 4f       	sbci	r31, 0xFE	; 254
    253e:	8f ef       	ldi	r24, 0xFF	; 255
    2540:	80 83       	st	Z, r24
    2542:	06 c0       	rjmp	.+12     	; 0x2550 <main+0x3f4>
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    2544:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    2548:	fe 01       	movw	r30, r28
    254a:	ef 51       	subi	r30, 0x1F	; 31
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	80 83       	st	Z, r24
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    2550:	fe 01       	movw	r30, r28
    2552:	ef 51       	subi	r30, 0x1F	; 31
    2554:	fe 4f       	sbci	r31, 0xFE	; 254
    2556:	80 81       	ld	r24, Z
    2558:	8f 3f       	cpi	r24, 0xFF	; 255
    255a:	a1 f3       	breq	.-24     	; 0x2544 <main+0x3e8>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
    255c:	fe 01       	movw	r30, r28
    255e:	e0 52       	subi	r30, 0x20	; 32
    2560:	fe 4f       	sbci	r31, 0xFE	; 254
    2562:	80 81       	ld	r24, Z
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	ce 01       	movw	r24, r28
    256a:	89 51       	subi	r24, 0x19	; 25
    256c:	9e 4f       	sbci	r25, 0xFE	; 254
    256e:	dc 01       	movw	r26, r24
    2570:	a2 0f       	add	r26, r18
    2572:	b3 1f       	adc	r27, r19
    2574:	fe 01       	movw	r30, r28
    2576:	ef 51       	subi	r30, 0x1F	; 31
    2578:	fe 4f       	sbci	r31, 0xFE	; 254
    257a:	80 81       	ld	r24, Z
    257c:	8c 93       	st	X, r24
			LCD_vSend_char(key_pressed);//print the entered character
    257e:	fe 01       	movw	r30, r28
    2580:	ef 51       	subi	r30, 0x1F	; 31
    2582:	fe 4f       	sbci	r31, 0xFE	; 254
    2584:	80 81       	ld	r24, Z
    2586:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    258a:	fe 01       	movw	r30, r28
    258c:	e3 54       	subi	r30, 0x43	; 67
    258e:	fe 4f       	sbci	r31, 0xFE	; 254
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a6 e9       	ldi	r26, 0x96	; 150
    2596:	b3 e4       	ldi	r27, 0x43	; 67
    2598:	80 83       	st	Z, r24
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	a2 83       	std	Z+2, r26	; 0x02
    259e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	8e 01       	movw	r16, r28
    25a2:	07 54       	subi	r16, 0x47	; 71
    25a4:	1e 4f       	sbci	r17, 0xFE	; 254
    25a6:	fe 01       	movw	r30, r28
    25a8:	e3 54       	subi	r30, 0x43	; 67
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a ef       	ldi	r20, 0xFA	; 250
    25ba:	54 e4       	ldi	r21, 0x44	; 68
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	80 83       	st	Z, r24
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	a2 83       	std	Z+2, r26	; 0x02
    25cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e7 54       	subi	r30, 0x47	; 71
    25d2:	fe 4f       	sbci	r31, 0xFE	; 254
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	44 f4       	brge	.+16     	; 0x25fc <main+0x4a0>
		__ticks = 1;
    25ec:	fe 01       	movw	r30, r28
    25ee:	e9 54       	subi	r30, 0x49	; 73
    25f0:	fe 4f       	sbci	r31, 0xFE	; 254
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	64 c0       	rjmp	.+200    	; 0x26c4 <main+0x568>
	else if (__tmp > 65535)
    25fc:	fe 01       	movw	r30, r28
    25fe:	e7 54       	subi	r30, 0x47	; 71
    2600:	fe 4f       	sbci	r31, 0xFE	; 254
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	0c f0       	brlt	.+2      	; 0x261c <main+0x4c0>
    261a:	43 c0       	rjmp	.+134    	; 0x26a2 <main+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	fe 01       	movw	r30, r28
    261e:	e3 54       	subi	r30, 0x43	; 67
    2620:	fe 4f       	sbci	r31, 0xFE	; 254
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8e 01       	movw	r16, r28
    263c:	09 54       	subi	r16, 0x49	; 73
    263e:	1e 4f       	sbci	r17, 0xFE	; 254
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	f8 01       	movw	r30, r16
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	1f c0       	rjmp	.+62     	; 0x2692 <main+0x536>
    2654:	fe 01       	movw	r30, r28
    2656:	eb 54       	subi	r30, 0x4B	; 75
    2658:	fe 4f       	sbci	r31, 0xFE	; 254
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	fe 01       	movw	r30, r28
    2664:	eb 54       	subi	r30, 0x4B	; 75
    2666:	fe 4f       	sbci	r31, 0xFE	; 254
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <main+0x510>
    2670:	fe 01       	movw	r30, r28
    2672:	eb 54       	subi	r30, 0x4B	; 75
    2674:	fe 4f       	sbci	r31, 0xFE	; 254
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	de 01       	movw	r26, r28
    267c:	a9 54       	subi	r26, 0x49	; 73
    267e:	be 4f       	sbci	r27, 0xFE	; 254
    2680:	fe 01       	movw	r30, r28
    2682:	e9 54       	subi	r30, 0x49	; 73
    2684:	fe 4f       	sbci	r31, 0xFE	; 254
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	9c 93       	st	X, r25
    2690:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2692:	fe 01       	movw	r30, r28
    2694:	e9 54       	subi	r30, 0x49	; 73
    2696:	fe 4f       	sbci	r31, 0xFE	; 254
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	d1 f6       	brne	.-76     	; 0x2654 <main+0x4f8>
    26a0:	27 c0       	rjmp	.+78     	; 0x26f0 <main+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	8e 01       	movw	r16, r28
    26a4:	09 54       	subi	r16, 0x49	; 73
    26a6:	1e 4f       	sbci	r17, 0xFE	; 254
    26a8:	fe 01       	movw	r30, r28
    26aa:	e7 54       	subi	r30, 0x47	; 71
    26ac:	fe 4f       	sbci	r31, 0xFE	; 254
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	f8 01       	movw	r30, r16
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	de 01       	movw	r26, r28
    26c6:	ad 54       	subi	r26, 0x4D	; 77
    26c8:	be 4f       	sbci	r27, 0xFE	; 254
    26ca:	fe 01       	movw	r30, r28
    26cc:	e9 54       	subi	r30, 0x49	; 73
    26ce:	fe 4f       	sbci	r31, 0xFE	; 254
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	8d 93       	st	X+, r24
    26d6:	9c 93       	st	X, r25
    26d8:	fe 01       	movw	r30, r28
    26da:	ed 54       	subi	r30, 0x4D	; 77
    26dc:	fe 4f       	sbci	r31, 0xFE	; 254
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <main+0x586>
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 54       	subi	r30, 0x4D	; 77
    26ea:	fe 4f       	sbci	r31, 0xFE	; 254
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
    26f0:	fe 01       	movw	r30, r28
    26f2:	e0 52       	subi	r30, 0x20	; 32
    26f4:	fe 4f       	sbci	r31, 0xFE	; 254
    26f6:	80 81       	ld	r24, Z
    26f8:	98 2f       	mov	r25, r24
    26fa:	94 5f       	subi	r25, 0xF4	; 244
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	69 2f       	mov	r22, r25
    2700:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    2704:	8a e2       	ldi	r24, 0x2A	; 42
    2706:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    270a:	fe 01       	movw	r30, r28
    270c:	e1 55       	subi	r30, 0x51	; 81
    270e:	fe 4f       	sbci	r31, 0xFE	; 254
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a8 ec       	ldi	r26, 0xC8	; 200
    2716:	b2 e4       	ldi	r27, 0x42	; 66
    2718:	80 83       	st	Z, r24
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	a2 83       	std	Z+2, r26	; 0x02
    271e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	8e 01       	movw	r16, r28
    2722:	05 55       	subi	r16, 0x55	; 85
    2724:	1e 4f       	sbci	r17, 0xFE	; 254
    2726:	fe 01       	movw	r30, r28
    2728:	e1 55       	subi	r30, 0x51	; 81
    272a:	fe 4f       	sbci	r31, 0xFE	; 254
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4a ef       	ldi	r20, 0xFA	; 250
    273a:	54 e4       	ldi	r21, 0x44	; 68
    273c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	f8 01       	movw	r30, r16
    2746:	80 83       	st	Z, r24
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	a2 83       	std	Z+2, r26	; 0x02
    274c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274e:	fe 01       	movw	r30, r28
    2750:	e5 55       	subi	r30, 0x55	; 85
    2752:	fe 4f       	sbci	r31, 0xFE	; 254
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e8       	ldi	r20, 0x80	; 128
    2762:	5f e3       	ldi	r21, 0x3F	; 63
    2764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2768:	88 23       	and	r24, r24
    276a:	44 f4       	brge	.+16     	; 0x277c <main+0x620>
		__ticks = 1;
    276c:	fe 01       	movw	r30, r28
    276e:	e7 55       	subi	r30, 0x57	; 87
    2770:	fe 4f       	sbci	r31, 0xFE	; 254
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	64 c0       	rjmp	.+200    	; 0x2844 <main+0x6e8>
	else if (__tmp > 65535)
    277c:	fe 01       	movw	r30, r28
    277e:	e5 55       	subi	r30, 0x55	; 85
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2796:	18 16       	cp	r1, r24
    2798:	0c f0       	brlt	.+2      	; 0x279c <main+0x640>
    279a:	43 c0       	rjmp	.+134    	; 0x2822 <main+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	fe 01       	movw	r30, r28
    279e:	e1 55       	subi	r30, 0x51	; 81
    27a0:	fe 4f       	sbci	r31, 0xFE	; 254
    27a2:	60 81       	ld	r22, Z
    27a4:	71 81       	ldd	r23, Z+1	; 0x01
    27a6:	82 81       	ldd	r24, Z+2	; 0x02
    27a8:	93 81       	ldd	r25, Z+3	; 0x03
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e2       	ldi	r20, 0x20	; 32
    27b0:	51 e4       	ldi	r21, 0x41	; 65
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8e 01       	movw	r16, r28
    27bc:	07 55       	subi	r16, 0x57	; 87
    27be:	1e 4f       	sbci	r17, 0xFE	; 254
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	f8 01       	movw	r30, r16
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    27d2:	1f c0       	rjmp	.+62     	; 0x2812 <main+0x6b6>
    27d4:	fe 01       	movw	r30, r28
    27d6:	e9 55       	subi	r30, 0x59	; 89
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	fe 01       	movw	r30, r28
    27e4:	e9 55       	subi	r30, 0x59	; 89
    27e6:	fe 4f       	sbci	r31, 0xFE	; 254
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <main+0x690>
    27f0:	fe 01       	movw	r30, r28
    27f2:	e9 55       	subi	r30, 0x59	; 89
    27f4:	fe 4f       	sbci	r31, 0xFE	; 254
    27f6:	91 83       	std	Z+1, r25	; 0x01
    27f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fa:	de 01       	movw	r26, r28
    27fc:	a7 55       	subi	r26, 0x57	; 87
    27fe:	be 4f       	sbci	r27, 0xFE	; 254
    2800:	fe 01       	movw	r30, r28
    2802:	e7 55       	subi	r30, 0x57	; 87
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	80 81       	ld	r24, Z
    2808:	91 81       	ldd	r25, Z+1	; 0x01
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	11 96       	adiw	r26, 0x01	; 1
    280e:	9c 93       	st	X, r25
    2810:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	fe 01       	movw	r30, r28
    2814:	e7 55       	subi	r30, 0x57	; 87
    2816:	fe 4f       	sbci	r31, 0xFE	; 254
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	d1 f6       	brne	.-76     	; 0x27d4 <main+0x678>
    2820:	27 c0       	rjmp	.+78     	; 0x2870 <main+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2822:	8e 01       	movw	r16, r28
    2824:	07 55       	subi	r16, 0x57	; 87
    2826:	1e 4f       	sbci	r17, 0xFE	; 254
    2828:	fe 01       	movw	r30, r28
    282a:	e5 55       	subi	r30, 0x55	; 85
    282c:	fe 4f       	sbci	r31, 0xFE	; 254
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	f8 01       	movw	r30, r16
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	80 83       	st	Z, r24
    2844:	de 01       	movw	r26, r28
    2846:	ab 55       	subi	r26, 0x5B	; 91
    2848:	be 4f       	sbci	r27, 0xFE	; 254
    284a:	fe 01       	movw	r30, r28
    284c:	e7 55       	subi	r30, 0x57	; 87
    284e:	fe 4f       	sbci	r31, 0xFE	; 254
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	8d 93       	st	X+, r24
    2856:	9c 93       	st	X, r25
    2858:	fe 01       	movw	r30, r28
    285a:	eb 55       	subi	r30, 0x5B	; 91
    285c:	fe 4f       	sbci	r31, 0xFE	; 254
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <main+0x706>
    2866:	fe 01       	movw	r30, r28
    2868:	eb 55       	subi	r30, 0x5B	; 91
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
    2870:	de 01       	movw	r26, r28
    2872:	a0 52       	subi	r26, 0x20	; 32
    2874:	be 4f       	sbci	r27, 0xFE	; 254
    2876:	fe 01       	movw	r30, r28
    2878:	e0 52       	subi	r30, 0x20	; 32
    287a:	fe 4f       	sbci	r31, 0xFE	; 254
    287c:	80 81       	ld	r24, Z
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	8c 93       	st	X, r24
		LCD_vSend_string("Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    2882:	fe 01       	movw	r30, r28
    2884:	e0 52       	subi	r30, 0x20	; 32
    2886:	fe 4f       	sbci	r31, 0xFE	; 254
    2888:	80 81       	ld	r24, Z
    288a:	84 30       	cpi	r24, 0x04	; 4
    288c:	08 f4       	brcc	.+2      	; 0x2890 <main+0x734>
    288e:	54 ce       	rjmp	.-856    	; 0x2538 <main+0x3dc>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
    2890:	9e 01       	movw	r18, r28
    2892:	29 51       	subi	r18, 0x19	; 25
    2894:	3e 4f       	sbci	r19, 0xFE	; 254
    2896:	82 e0       	ldi	r24, 0x02	; 2
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	b9 01       	movw	r22, r18
    289c:	44 e0       	ldi	r20, 0x04	; 4
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	0e 94 2d 0c 	call	0x185a	; 0x185a <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    28ae:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");// show pass saved message
    28b2:	8d ea       	ldi	r24, 0xAD	; 173
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    28ba:	fe 01       	movw	r30, r28
    28bc:	ef 55       	subi	r30, 0x5F	; 95
    28be:	fe 4f       	sbci	r31, 0xFE	; 254
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	aa ef       	ldi	r26, 0xFA	; 250
    28c6:	b3 e4       	ldi	r27, 0x43	; 67
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	8e 01       	movw	r16, r28
    28d2:	03 56       	subi	r16, 0x63	; 99
    28d4:	1e 4f       	sbci	r17, 0xFE	; 254
    28d6:	fe 01       	movw	r30, r28
    28d8:	ef 55       	subi	r30, 0x5F	; 95
    28da:	fe 4f       	sbci	r31, 0xFE	; 254
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a ef       	ldi	r20, 0xFA	; 250
    28ea:	54 e4       	ldi	r21, 0x44	; 68
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fe:	fe 01       	movw	r30, r28
    2900:	e3 56       	subi	r30, 0x63	; 99
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	44 f4       	brge	.+16     	; 0x292c <main+0x7d0>
		__ticks = 1;
    291c:	fe 01       	movw	r30, r28
    291e:	e5 56       	subi	r30, 0x65	; 101
    2920:	fe 4f       	sbci	r31, 0xFE	; 254
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	64 c0       	rjmp	.+200    	; 0x29f4 <main+0x898>
	else if (__tmp > 65535)
    292c:	fe 01       	movw	r30, r28
    292e:	e3 56       	subi	r30, 0x63	; 99
    2930:	fe 4f       	sbci	r31, 0xFE	; 254
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <main+0x7f0>
    294a:	43 c0       	rjmp	.+134    	; 0x29d2 <main+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	fe 01       	movw	r30, r28
    294e:	ef 55       	subi	r30, 0x5F	; 95
    2950:	fe 4f       	sbci	r31, 0xFE	; 254
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8e 01       	movw	r16, r28
    296c:	05 56       	subi	r16, 0x65	; 101
    296e:	1e 4f       	sbci	r17, 0xFE	; 254
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	1f c0       	rjmp	.+62     	; 0x29c2 <main+0x866>
    2984:	fe 01       	movw	r30, r28
    2986:	e7 56       	subi	r30, 0x67	; 103
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	fe 01       	movw	r30, r28
    2994:	e7 56       	subi	r30, 0x67	; 103
    2996:	fe 4f       	sbci	r31, 0xFE	; 254
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0x840>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e7 56       	subi	r30, 0x67	; 103
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	de 01       	movw	r26, r28
    29ac:	a5 56       	subi	r26, 0x65	; 101
    29ae:	be 4f       	sbci	r27, 0xFE	; 254
    29b0:	fe 01       	movw	r30, r28
    29b2:	e5 56       	subi	r30, 0x65	; 101
    29b4:	fe 4f       	sbci	r31, 0xFE	; 254
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e5 56       	subi	r30, 0x65	; 101
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	d1 f6       	brne	.-76     	; 0x2984 <main+0x828>
    29d0:	27 c0       	rjmp	.+78     	; 0x2a20 <main+0x8c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	8e 01       	movw	r16, r28
    29d4:	05 56       	subi	r16, 0x65	; 101
    29d6:	1e 4f       	sbci	r17, 0xFE	; 254
    29d8:	fe 01       	movw	r30, r28
    29da:	e3 56       	subi	r30, 0x63	; 99
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	de 01       	movw	r26, r28
    29f6:	a9 56       	subi	r26, 0x69	; 105
    29f8:	be 4f       	sbci	r27, 0xFE	; 254
    29fa:	fe 01       	movw	r30, r28
    29fc:	e5 56       	subi	r30, 0x65	; 101
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	8d 93       	st	X+, r24
    2a06:	9c 93       	st	X, r25
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e9 56       	subi	r30, 0x69	; 105
    2a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <main+0x8b6>
    2a16:	fe 01       	movw	r30, r28
    2a18:	e9 56       	subi	r30, 0x69	; 105
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2a20:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
    2a24:	fe 01       	movw	r30, r28
    2a26:	e0 52       	subi	r30, 0x20	; 32
    2a28:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2a:	10 82       	st	Z, r1
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
    2a2c:	88 eb       	ldi	r24, 0xB8	; 184
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		LCD_movecursor(2,1);
    2a34:	82 e0       	ldi	r24, 0x02	; 2
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("Guest Pass:");
    2a3c:	87 ec       	ldi	r24, 0xC7	; 199
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2a44:	a5 c1       	rjmp	.+842    	; 0x2d90 <main+0xc34>
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2a46:	fe 01       	movw	r30, r28
    2a48:	ef 51       	subi	r30, 0x1F	; 31
    2a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	80 83       	st	Z, r24
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <main+0x902>
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    2a52:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    2a56:	fe 01       	movw	r30, r28
    2a58:	ef 51       	subi	r30, 0x1F	; 31
    2a5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a5c:	80 83       	st	Z, r24
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ef 51       	subi	r30, 0x1F	; 31
    2a62:	fe 4f       	sbci	r31, 0xFE	; 254
    2a64:	80 81       	ld	r24, Z
    2a66:	8f 3f       	cpi	r24, 0xFF	; 255
    2a68:	a1 f3       	breq	.-24     	; 0x2a52 <main+0x8f6>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e0 52       	subi	r30, 0x20	; 32
    2a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a70:	80 81       	ld	r24, Z
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	ce 01       	movw	r24, r28
    2a78:	89 51       	subi	r24, 0x19	; 25
    2a7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	a2 0f       	add	r26, r18
    2a80:	b3 1f       	adc	r27, r19
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 51       	subi	r30, 0x1F	; 31
    2a86:	fe 4f       	sbci	r31, 0xFE	; 254
    2a88:	80 81       	ld	r24, Z
    2a8a:	8c 93       	st	X, r24
			LCD_vSend_char(key_pressed);//print the entered character
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ef 51       	subi	r30, 0x1F	; 31
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	80 81       	ld	r24, Z
    2a94:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    2a98:	fe 01       	movw	r30, r28
    2a9a:	ed 56       	subi	r30, 0x6D	; 109
    2a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a6 e9       	ldi	r26, 0x96	; 150
    2aa4:	b3 e4       	ldi	r27, 0x43	; 67
    2aa6:	80 83       	st	Z, r24
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	a2 83       	std	Z+2, r26	; 0x02
    2aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	8e 01       	movw	r16, r28
    2ab0:	01 57       	subi	r16, 0x71	; 113
    2ab2:	1e 4f       	sbci	r17, 0xFE	; 254
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	ed 56       	subi	r30, 0x6D	; 109
    2ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a ef       	ldi	r20, 0xFA	; 250
    2ac8:	54 e4       	ldi	r21, 0x44	; 68
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	f8 01       	movw	r30, r16
    2ad4:	80 83       	st	Z, r24
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	a2 83       	std	Z+2, r26	; 0x02
    2ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2adc:	fe 01       	movw	r30, r28
    2ade:	e1 57       	subi	r30, 0x71	; 113
    2ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	44 f4       	brge	.+16     	; 0x2b0a <main+0x9ae>
		__ticks = 1;
    2afa:	fe 01       	movw	r30, r28
    2afc:	e3 57       	subi	r30, 0x73	; 115
    2afe:	fe 4f       	sbci	r31, 0xFE	; 254
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	64 c0       	rjmp	.+200    	; 0x2bd2 <main+0xa76>
	else if (__tmp > 65535)
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e1 57       	subi	r30, 0x71	; 113
    2b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	3f ef       	ldi	r19, 0xFF	; 255
    2b1c:	4f e7       	ldi	r20, 0x7F	; 127
    2b1e:	57 e4       	ldi	r21, 0x47	; 71
    2b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b24:	18 16       	cp	r1, r24
    2b26:	0c f0       	brlt	.+2      	; 0x2b2a <main+0x9ce>
    2b28:	43 c0       	rjmp	.+134    	; 0x2bb0 <main+0xa54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ed 56       	subi	r30, 0x6D	; 109
    2b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e2       	ldi	r20, 0x20	; 32
    2b3e:	51 e4       	ldi	r21, 0x41	; 65
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8e 01       	movw	r16, r28
    2b4a:	03 57       	subi	r16, 0x73	; 115
    2b4c:	1e 4f       	sbci	r17, 0xFE	; 254
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	80 83       	st	Z, r24
    2b60:	1f c0       	rjmp	.+62     	; 0x2ba0 <main+0xa44>
    2b62:	fe 01       	movw	r30, r28
    2b64:	e5 57       	subi	r30, 0x75	; 117
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	88 ec       	ldi	r24, 0xC8	; 200
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
    2b70:	fe 01       	movw	r30, r28
    2b72:	e5 57       	subi	r30, 0x75	; 117
    2b74:	fe 4f       	sbci	r31, 0xFE	; 254
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <main+0xa1e>
    2b7e:	fe 01       	movw	r30, r28
    2b80:	e5 57       	subi	r30, 0x75	; 117
    2b82:	fe 4f       	sbci	r31, 0xFE	; 254
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	de 01       	movw	r26, r28
    2b8a:	a3 57       	subi	r26, 0x73	; 115
    2b8c:	be 4f       	sbci	r27, 0xFE	; 254
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e3 57       	subi	r30, 0x73	; 115
    2b92:	fe 4f       	sbci	r31, 0xFE	; 254
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	9c 93       	st	X, r25
    2b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e3 57       	subi	r30, 0x73	; 115
    2ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba6:	80 81       	ld	r24, Z
    2ba8:	91 81       	ldd	r25, Z+1	; 0x01
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	d1 f6       	brne	.-76     	; 0x2b62 <main+0xa06>
    2bae:	27 c0       	rjmp	.+78     	; 0x2bfe <main+0xaa2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	03 57       	subi	r16, 0x73	; 115
    2bb4:	1e 4f       	sbci	r17, 0xFE	; 254
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	e1 57       	subi	r30, 0x71	; 113
    2bba:	fe 4f       	sbci	r31, 0xFE	; 254
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	f8 01       	movw	r30, r16
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    2bd2:	de 01       	movw	r26, r28
    2bd4:	a7 57       	subi	r26, 0x77	; 119
    2bd6:	be 4f       	sbci	r27, 0xFE	; 254
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 57       	subi	r30, 0x73	; 115
    2bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	8d 93       	st	X+, r24
    2be4:	9c 93       	st	X, r25
    2be6:	fe 01       	movw	r30, r28
    2be8:	e7 57       	subi	r30, 0x77	; 119
    2bea:	fe 4f       	sbci	r31, 0xFE	; 254
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <main+0xa94>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e7 57       	subi	r30, 0x77	; 119
    2bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e0 52       	subi	r30, 0x20	; 32
    2c02:	fe 4f       	sbci	r31, 0xFE	; 254
    2c04:	80 81       	ld	r24, Z
    2c06:	98 2f       	mov	r25, r24
    2c08:	94 5f       	subi	r25, 0xF4	; 244
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	69 2f       	mov	r22, r25
    2c0e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    2c12:	8a e2       	ldi	r24, 0x2A	; 42
    2c14:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 57       	subi	r30, 0x7B	; 123
    2c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a8 ec       	ldi	r26, 0xC8	; 200
    2c24:	b2 e4       	ldi	r27, 0x42	; 66
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	8e 01       	movw	r16, r28
    2c30:	0f 57       	subi	r16, 0x7F	; 127
    2c32:	1e 4f       	sbci	r17, 0xFE	; 254
    2c34:	fe 01       	movw	r30, r28
    2c36:	eb 57       	subi	r30, 0x7B	; 123
    2c38:	fe 4f       	sbci	r31, 0xFE	; 254
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a ef       	ldi	r20, 0xFA	; 250
    2c48:	54 e4       	ldi	r21, 0x44	; 68
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	f8 01       	movw	r30, r16
    2c54:	80 83       	st	Z, r24
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	a2 83       	std	Z+2, r26	; 0x02
    2c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ef 57       	subi	r30, 0x7F	; 127
    2c60:	fe 4f       	sbci	r31, 0xFE	; 254
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	44 f4       	brge	.+16     	; 0x2c8a <main+0xb2e>
		__ticks = 1;
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e1 58       	subi	r30, 0x81	; 129
    2c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	64 c0       	rjmp	.+200    	; 0x2d52 <main+0xbf6>
	else if (__tmp > 65535)
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ef 57       	subi	r30, 0x7F	; 127
    2c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <main+0xb4e>
    2ca8:	43 c0       	rjmp	.+134    	; 0x2d30 <main+0xbd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	fe 01       	movw	r30, r28
    2cac:	eb 57       	subi	r30, 0x7B	; 123
    2cae:	fe 4f       	sbci	r31, 0xFE	; 254
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e2       	ldi	r20, 0x20	; 32
    2cbe:	51 e4       	ldi	r21, 0x41	; 65
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	8e 01       	movw	r16, r28
    2cca:	01 58       	subi	r16, 0x81	; 129
    2ccc:	1e 4f       	sbci	r17, 0xFE	; 254
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <main+0xbc4>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e3 58       	subi	r30, 0x83	; 131
    2ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e3 58       	subi	r30, 0x83	; 131
    2cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <main+0xb9e>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e3 58       	subi	r30, 0x83	; 131
    2d02:	fe 4f       	sbci	r31, 0xFE	; 254
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	de 01       	movw	r26, r28
    2d0a:	a1 58       	subi	r26, 0x81	; 129
    2d0c:	be 4f       	sbci	r27, 0xFE	; 254
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e1 58       	subi	r30, 0x81	; 129
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	11 96       	adiw	r26, 0x01	; 1
    2d1c:	9c 93       	st	X, r25
    2d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	fe 01       	movw	r30, r28
    2d22:	e1 58       	subi	r30, 0x81	; 129
    2d24:	fe 4f       	sbci	r31, 0xFE	; 254
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	d1 f6       	brne	.-76     	; 0x2ce2 <main+0xb86>
    2d2e:	27 c0       	rjmp	.+78     	; 0x2d7e <main+0xc22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	8e 01       	movw	r16, r28
    2d32:	01 58       	subi	r16, 0x81	; 129
    2d34:	1e 4f       	sbci	r17, 0xFE	; 254
    2d36:	fe 01       	movw	r30, r28
    2d38:	ef 57       	subi	r30, 0x7F	; 127
    2d3a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	f8 01       	movw	r30, r16
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
    2d52:	de 01       	movw	r26, r28
    2d54:	a5 58       	subi	r26, 0x85	; 133
    2d56:	be 4f       	sbci	r27, 0xFE	; 254
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e1 58       	subi	r30, 0x81	; 129
    2d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	8d 93       	st	X+, r24
    2d64:	9c 93       	st	X, r25
    2d66:	fe 01       	movw	r30, r28
    2d68:	e5 58       	subi	r30, 0x85	; 133
    2d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <main+0xc14>
    2d74:	fe 01       	movw	r30, r28
    2d76:	e5 58       	subi	r30, 0x85	; 133
    2d78:	fe 4f       	sbci	r31, 0xFE	; 254
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
    2d7e:	de 01       	movw	r26, r28
    2d80:	a0 52       	subi	r26, 0x20	; 32
    2d82:	be 4f       	sbci	r27, 0xFE	; 254
    2d84:	fe 01       	movw	r30, r28
    2d86:	e0 52       	subi	r30, 0x20	; 32
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	8c 93       	st	X, r24
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
    2d90:	fe 01       	movw	r30, r28
    2d92:	e0 52       	subi	r30, 0x20	; 32
    2d94:	fe 4f       	sbci	r31, 0xFE	; 254
    2d96:	80 81       	ld	r24, Z
    2d98:	84 30       	cpi	r24, 0x04	; 4
    2d9a:	08 f4       	brcc	.+2      	; 0x2d9e <main+0xc42>
    2d9c:	54 ce       	rjmp	.-856    	; 0x2a46 <main+0x8ea>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
    2d9e:	9e 01       	movw	r18, r28
    2da0:	29 51       	subi	r18, 0x19	; 25
    2da2:	3e 4f       	sbci	r19, 0xFE	; 254
    2da4:	86 e0       	ldi	r24, 0x06	; 6
    2da6:	91 e0       	ldi	r25, 0x01	; 1
    2da8:	b9 01       	movw	r22, r18
    2daa:	44 e0       	ldi	r20, 0x04	; 4
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	0e 94 2d 0c 	call	0x185a	; 0x185a <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	91 e0       	ldi	r25, 0x01	; 1
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2dbc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");//move the lcd cursor to the previous location
    2dc0:	8d ea       	ldi	r24, 0xAD	; 173
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2dc8:	fe 01       	movw	r30, r28
    2dca:	e9 58       	subi	r30, 0x89	; 137
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	aa ef       	ldi	r26, 0xFA	; 250
    2dd4:	b3 e4       	ldi	r27, 0x43	; 67
    2dd6:	80 83       	st	Z, r24
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	a2 83       	std	Z+2, r26	; 0x02
    2ddc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dde:	8e 01       	movw	r16, r28
    2de0:	0d 58       	subi	r16, 0x8D	; 141
    2de2:	1e 4f       	sbci	r17, 0xFE	; 254
    2de4:	fe 01       	movw	r30, r28
    2de6:	e9 58       	subi	r30, 0x89	; 137
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	60 81       	ld	r22, Z
    2dec:	71 81       	ldd	r23, Z+1	; 0x01
    2dee:	82 81       	ldd	r24, Z+2	; 0x02
    2df0:	93 81       	ldd	r25, Z+3	; 0x03
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	4a ef       	ldi	r20, 0xFA	; 250
    2df8:	54 e4       	ldi	r21, 0x44	; 68
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	f8 01       	movw	r30, r16
    2e04:	80 83       	st	Z, r24
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	a2 83       	std	Z+2, r26	; 0x02
    2e0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ed 58       	subi	r30, 0x8D	; 141
    2e10:	fe 4f       	sbci	r31, 0xFE	; 254
    2e12:	60 81       	ld	r22, Z
    2e14:	71 81       	ldd	r23, Z+1	; 0x01
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	44 f4       	brge	.+16     	; 0x2e3a <main+0xcde>
		__ticks = 1;
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ef 58       	subi	r30, 0x8F	; 143
    2e2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
    2e38:	64 c0       	rjmp	.+200    	; 0x2f02 <main+0xda6>
	else if (__tmp > 65535)
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ed 58       	subi	r30, 0x8D	; 141
    2e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e40:	60 81       	ld	r22, Z
    2e42:	71 81       	ldd	r23, Z+1	; 0x01
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	3f ef       	ldi	r19, 0xFF	; 255
    2e4c:	4f e7       	ldi	r20, 0x7F	; 127
    2e4e:	57 e4       	ldi	r21, 0x47	; 71
    2e50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e54:	18 16       	cp	r1, r24
    2e56:	0c f0       	brlt	.+2      	; 0x2e5a <main+0xcfe>
    2e58:	43 c0       	rjmp	.+134    	; 0x2ee0 <main+0xd84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e9 58       	subi	r30, 0x89	; 137
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	8e 01       	movw	r16, r28
    2e7a:	0f 58       	subi	r16, 0x8F	; 143
    2e7c:	1e 4f       	sbci	r17, 0xFE	; 254
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	91 83       	std	Z+1, r25	; 0x01
    2e8e:	80 83       	st	Z, r24
    2e90:	1f c0       	rjmp	.+62     	; 0x2ed0 <main+0xd74>
    2e92:	fe 01       	movw	r30, r28
    2e94:	e1 59       	subi	r30, 0x91	; 145
    2e96:	fe 4f       	sbci	r31, 0xFE	; 254
    2e98:	88 ec       	ldi	r24, 0xC8	; 200
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	91 83       	std	Z+1, r25	; 0x01
    2e9e:	80 83       	st	Z, r24
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e1 59       	subi	r30, 0x91	; 145
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	f1 f7       	brne	.-4      	; 0x2eaa <main+0xd4e>
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e1 59       	subi	r30, 0x91	; 145
    2eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb4:	91 83       	std	Z+1, r25	; 0x01
    2eb6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb8:	de 01       	movw	r26, r28
    2eba:	af 58       	subi	r26, 0x8F	; 143
    2ebc:	be 4f       	sbci	r27, 0xFE	; 254
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ef 58       	subi	r30, 0x8F	; 143
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	11 96       	adiw	r26, 0x01	; 1
    2ecc:	9c 93       	st	X, r25
    2ece:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ef 58       	subi	r30, 0x8F	; 143
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	80 81       	ld	r24, Z
    2ed8:	91 81       	ldd	r25, Z+1	; 0x01
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	d1 f6       	brne	.-76     	; 0x2e92 <main+0xd36>
    2ede:	27 c0       	rjmp	.+78     	; 0x2f2e <main+0xdd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	8e 01       	movw	r16, r28
    2ee2:	0f 58       	subi	r16, 0x8F	; 143
    2ee4:	1e 4f       	sbci	r17, 0xFE	; 254
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 58       	subi	r30, 0x8D	; 141
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	f8 01       	movw	r30, r16
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    2f02:	de 01       	movw	r26, r28
    2f04:	a3 59       	subi	r26, 0x93	; 147
    2f06:	be 4f       	sbci	r27, 0xFE	; 254
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ef 58       	subi	r30, 0x8F	; 143
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	8d 93       	st	X+, r24
    2f14:	9c 93       	st	X, r25
    2f16:	fe 01       	movw	r30, r28
    2f18:	e3 59       	subi	r30, 0x93	; 147
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0xdc4>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e3 59       	subi	r30, 0x93	; 147
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2f2e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
    2f32:	8a e0       	ldi	r24, 0x0A	; 10
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
    2f3c:	08 c0       	rjmp	.+16     	; 0x2f4e <main+0xdf2>
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
    2f3e:	8a e0       	ldi	r24, 0x0A	; 10
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 75 0b 	call	0x16ea	; 0x16ea <EEPROM_ui8ReadByteFromAddress>
    2f46:	fe 01       	movw	r30, r28
    2f48:	ee 51       	subi	r30, 0x1E	; 30
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 83       	st	Z, r24
	}
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ef 51       	subi	r30, 0x1F	; 31
    2f52:	fe 4f       	sbci	r31, 0xFE	; 254
    2f54:	8f ef       	ldi	r24, 0xFF	; 255
    2f56:	80 83       	st	Z, r24
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
    2f58:	fe 01       	movw	r30, r28
    2f5a:	e1 52       	subi	r30, 0x21	; 33
    2f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5e:	10 82       	st	Z, r1
		
		if ( timeout_flag==TRUE )//check for timeout
    2f60:	80 91 a0 02 	lds	r24, 0x02A0
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	11 f0       	breq	.+4      	; 0x2f6c <main+0xe10>
    2f68:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
    2f6c:	0e 94 38 31 	call	0x6270	; 0x6270 <timer0_stop>
			session_counter = 0;//clear session counter
    2f70:	10 92 9f 02 	sts	0x029F, r1
    2f74:	10 92 9e 02 	sts	0x029E, r1
			timeout_flag=FALSE;//clear time out flag
    2f78:	10 92 a0 02 	sts	0x02A0, r1
			login_mode=NO_MODE;//log the user out
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ed 51       	subi	r30, 0x1D	; 29
    2f80:	fe 4f       	sbci	r31, 0xFE	; 254
    2f82:	10 82       	st	Z, r1
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
    2f84:	fe 01       	movw	r30, r28
    2f86:	ef 51       	subi	r30, 0x1F	; 31
    2f88:	fe 4f       	sbci	r31, 0xFE	; 254
    2f8a:	8f ef       	ldi	r24, 0xFF	; 255
    2f8c:	80 83       	st	Z, r24
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
    2f8e:	83 e4       	ldi	r24, 0x43	; 67
    2f90:	61 e0       	ldi	r22, 0x01	; 1
    2f92:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
    2f96:	83 e4       	ldi	r24, 0x43	; 67
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    2f9e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");//print session timeout message
    2fa2:	83 ed       	ldi	r24, 0xD3	; 211
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    2faa:	fe 01       	movw	r30, r28
    2fac:	e7 59       	subi	r30, 0x97	; 151
    2fae:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	aa e7       	ldi	r26, 0x7A	; 122
    2fb6:	b4 e4       	ldi	r27, 0x44	; 68
    2fb8:	80 83       	st	Z, r24
    2fba:	91 83       	std	Z+1, r25	; 0x01
    2fbc:	a2 83       	std	Z+2, r26	; 0x02
    2fbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	0b 59       	subi	r16, 0x9B	; 155
    2fc4:	1e 4f       	sbci	r17, 0xFE	; 254
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e7 59       	subi	r30, 0x97	; 151
    2fca:	fe 4f       	sbci	r31, 0xFE	; 254
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a ef       	ldi	r20, 0xFA	; 250
    2fda:	54 e4       	ldi	r21, 0x44	; 68
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	80 83       	st	Z, r24
    2fe8:	91 83       	std	Z+1, r25	; 0x01
    2fea:	a2 83       	std	Z+2, r26	; 0x02
    2fec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fee:	fe 01       	movw	r30, r28
    2ff0:	eb 59       	subi	r30, 0x9B	; 155
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	44 f4       	brge	.+16     	; 0x301c <main+0xec0>
		__ticks = 1;
    300c:	fe 01       	movw	r30, r28
    300e:	ed 59       	subi	r30, 0x9D	; 157
    3010:	fe 4f       	sbci	r31, 0xFE	; 254
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	65 c0       	rjmp	.+202    	; 0x30e6 <main+0xf8a>
	else if (__tmp > 65535)
    301c:	fe 01       	movw	r30, r28
    301e:	eb 59       	subi	r30, 0x9B	; 155
    3020:	fe 4f       	sbci	r31, 0xFE	; 254
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	0c f0       	brlt	.+2      	; 0x303c <main+0xee0>
    303a:	44 c0       	rjmp	.+136    	; 0x30c4 <main+0xf68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303c:	fe 01       	movw	r30, r28
    303e:	e7 59       	subi	r30, 0x97	; 151
    3040:	fe 4f       	sbci	r31, 0xFE	; 254
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	82 81       	ldd	r24, Z+2	; 0x02
    3048:	93 81       	ldd	r25, Z+3	; 0x03
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	8e 01       	movw	r16, r28
    305c:	0d 59       	subi	r16, 0x9D	; 157
    305e:	1e 4f       	sbci	r17, 0xFE	; 254
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	f8 01       	movw	r30, r16
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	1f c0       	rjmp	.+62     	; 0x30b2 <main+0xf56>
    3074:	fe 01       	movw	r30, r28
    3076:	ef 59       	subi	r30, 0x9F	; 159
    3078:	fe 4f       	sbci	r31, 0xFE	; 254
    307a:	88 ec       	ldi	r24, 0xC8	; 200
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	91 83       	std	Z+1, r25	; 0x01
    3080:	80 83       	st	Z, r24
    3082:	fe 01       	movw	r30, r28
    3084:	ef 59       	subi	r30, 0x9F	; 159
    3086:	fe 4f       	sbci	r31, 0xFE	; 254
    3088:	80 81       	ld	r24, Z
    308a:	91 81       	ldd	r25, Z+1	; 0x01
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <main+0xf30>
    3090:	fe 01       	movw	r30, r28
    3092:	ef 59       	subi	r30, 0x9F	; 159
    3094:	fe 4f       	sbci	r31, 0xFE	; 254
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309a:	de 01       	movw	r26, r28
    309c:	ad 59       	subi	r26, 0x9D	; 157
    309e:	be 4f       	sbci	r27, 0xFE	; 254
    30a0:	fe 01       	movw	r30, r28
    30a2:	ed 59       	subi	r30, 0x9D	; 157
    30a4:	fe 4f       	sbci	r31, 0xFE	; 254
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	11 96       	adiw	r26, 0x01	; 1
    30ae:	9c 93       	st	X, r25
    30b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	fe 01       	movw	r30, r28
    30b4:	ed 59       	subi	r30, 0x9D	; 157
    30b6:	fe 4f       	sbci	r31, 0xFE	; 254
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	00 97       	sbiw	r24, 0x00	; 0
    30be:	d1 f6       	brne	.-76     	; 0x3074 <main+0xf18>
    30c0:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	8e 01       	movw	r16, r28
    30c6:	0d 59       	subi	r16, 0x9D	; 157
    30c8:	1e 4f       	sbci	r17, 0xFE	; 254
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 59       	subi	r30, 0x9B	; 155
    30ce:	fe 4f       	sbci	r31, 0xFE	; 254
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	f8 01       	movw	r30, r16
    30e2:	91 83       	std	Z+1, r25	; 0x01
    30e4:	80 83       	st	Z, r24
    30e6:	de 01       	movw	r26, r28
    30e8:	a1 5a       	subi	r26, 0xA1	; 161
    30ea:	be 4f       	sbci	r27, 0xFE	; 254
    30ec:	fe 01       	movw	r30, r28
    30ee:	ed 59       	subi	r30, 0x9D	; 157
    30f0:	fe 4f       	sbci	r31, 0xFE	; 254
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	11 96       	adiw	r26, 0x01	; 1
    30f8:	9c 93       	st	X, r25
    30fa:	8e 93       	st	-X, r24
    30fc:	fe 01       	movw	r30, r28
    30fe:	e1 5a       	subi	r30, 0xA1	; 161
    3100:	fe 4f       	sbci	r31, 0xFE	; 254
    3102:	80 81       	ld	r24, Z
    3104:	91 81       	ldd	r25, Z+1	; 0x01
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <main+0xfaa>
    310a:	fe 01       	movw	r30, r28
    310c:	e1 5a       	subi	r30, 0xA1	; 161
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	91 83       	std	Z+1, r25	; 0x01
    3112:	80 83       	st	Z, r24
    3114:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
    3118:	fe 01       	movw	r30, r28
    311a:	ee 51       	subi	r30, 0x1E	; 30
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	80 81       	ld	r24, Z
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	09 f0       	breq	.+2      	; 0x3126 <main+0xfca>
    3124:	d6 c0       	rjmp	.+428    	; 0x32d2 <main+0x1176>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3126:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
				LCD_vSend_string("Login blocked");
    312a:	83 ee       	ldi	r24, 0xE3	; 227
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				LCD_movecursor(2,1);
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	61 e0       	ldi	r22, 0x01	; 1
    3136:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
				LCD_vSend_string("wait 20 seconds");
    313a:	81 ef       	ldi	r24, 0xF1	; 241
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
    3142:	83 e4       	ldi	r24, 0x43	; 67
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
    314a:	fe 01       	movw	r30, r28
    314c:	e5 5a       	subi	r30, 0xA5	; 165
    314e:	fe 4f       	sbci	r31, 0xFE	; 254
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	90 e4       	ldi	r25, 0x40	; 64
    3154:	ac e9       	ldi	r26, 0x9C	; 156
    3156:	b6 e4       	ldi	r27, 0x46	; 70
    3158:	80 83       	st	Z, r24
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	a2 83       	std	Z+2, r26	; 0x02
    315e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3160:	8e 01       	movw	r16, r28
    3162:	09 5a       	subi	r16, 0xA9	; 169
    3164:	1e 4f       	sbci	r17, 0xFE	; 254
    3166:	fe 01       	movw	r30, r28
    3168:	e5 5a       	subi	r30, 0xA5	; 165
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a ef       	ldi	r20, 0xFA	; 250
    317a:	54 e4       	ldi	r21, 0x44	; 68
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	f8 01       	movw	r30, r16
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    318e:	fe 01       	movw	r30, r28
    3190:	e9 5a       	subi	r30, 0xA9	; 169
    3192:	fe 4f       	sbci	r31, 0xFE	; 254
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e8       	ldi	r20, 0x80	; 128
    31a2:	5f e3       	ldi	r21, 0x3F	; 63
    31a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a8:	88 23       	and	r24, r24
    31aa:	44 f4       	brge	.+16     	; 0x31bc <main+0x1060>
		__ticks = 1;
    31ac:	fe 01       	movw	r30, r28
    31ae:	eb 5a       	subi	r30, 0xAB	; 171
    31b0:	fe 4f       	sbci	r31, 0xFE	; 254
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
    31ba:	64 c0       	rjmp	.+200    	; 0x3284 <main+0x1128>
	else if (__tmp > 65535)
    31bc:	fe 01       	movw	r30, r28
    31be:	e9 5a       	subi	r30, 0xA9	; 169
    31c0:	fe 4f       	sbci	r31, 0xFE	; 254
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	3f ef       	ldi	r19, 0xFF	; 255
    31ce:	4f e7       	ldi	r20, 0x7F	; 127
    31d0:	57 e4       	ldi	r21, 0x47	; 71
    31d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d6:	18 16       	cp	r1, r24
    31d8:	0c f0       	brlt	.+2      	; 0x31dc <main+0x1080>
    31da:	43 c0       	rjmp	.+134    	; 0x3262 <main+0x1106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	fe 01       	movw	r30, r28
    31de:	e5 5a       	subi	r30, 0xA5	; 165
    31e0:	fe 4f       	sbci	r31, 0xFE	; 254
    31e2:	60 81       	ld	r22, Z
    31e4:	71 81       	ldd	r23, Z+1	; 0x01
    31e6:	82 81       	ldd	r24, Z+2	; 0x02
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e2       	ldi	r20, 0x20	; 32
    31f0:	51 e4       	ldi	r21, 0x41	; 65
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8e 01       	movw	r16, r28
    31fc:	0b 5a       	subi	r16, 0xAB	; 171
    31fe:	1e 4f       	sbci	r17, 0xFE	; 254
    3200:	bc 01       	movw	r22, r24
    3202:	cd 01       	movw	r24, r26
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	f8 01       	movw	r30, r16
    320e:	91 83       	std	Z+1, r25	; 0x01
    3210:	80 83       	st	Z, r24
    3212:	1f c0       	rjmp	.+62     	; 0x3252 <main+0x10f6>
    3214:	fe 01       	movw	r30, r28
    3216:	ed 5a       	subi	r30, 0xAD	; 173
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	88 ec       	ldi	r24, 0xC8	; 200
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	fe 01       	movw	r30, r28
    3224:	ed 5a       	subi	r30, 0xAD	; 173
    3226:	fe 4f       	sbci	r31, 0xFE	; 254
    3228:	80 81       	ld	r24, Z
    322a:	91 81       	ldd	r25, Z+1	; 0x01
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <main+0x10d0>
    3230:	fe 01       	movw	r30, r28
    3232:	ed 5a       	subi	r30, 0xAD	; 173
    3234:	fe 4f       	sbci	r31, 0xFE	; 254
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	de 01       	movw	r26, r28
    323c:	ab 5a       	subi	r26, 0xAB	; 171
    323e:	be 4f       	sbci	r27, 0xFE	; 254
    3240:	fe 01       	movw	r30, r28
    3242:	eb 5a       	subi	r30, 0xAB	; 171
    3244:	fe 4f       	sbci	r31, 0xFE	; 254
    3246:	80 81       	ld	r24, Z
    3248:	91 81       	ldd	r25, Z+1	; 0x01
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	9c 93       	st	X, r25
    3250:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3252:	fe 01       	movw	r30, r28
    3254:	eb 5a       	subi	r30, 0xAB	; 171
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	d1 f6       	brne	.-76     	; 0x3214 <main+0x10b8>
    3260:	27 c0       	rjmp	.+78     	; 0x32b0 <main+0x1154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	8e 01       	movw	r16, r28
    3264:	0b 5a       	subi	r16, 0xAB	; 171
    3266:	1e 4f       	sbci	r17, 0xFE	; 254
    3268:	fe 01       	movw	r30, r28
    326a:	e9 5a       	subi	r30, 0xA9	; 169
    326c:	fe 4f       	sbci	r31, 0xFE	; 254
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	f8 01       	movw	r30, r16
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	de 01       	movw	r26, r28
    3286:	af 5a       	subi	r26, 0xAF	; 175
    3288:	be 4f       	sbci	r27, 0xFE	; 254
    328a:	fe 01       	movw	r30, r28
    328c:	eb 5a       	subi	r30, 0xAB	; 171
    328e:	fe 4f       	sbci	r31, 0xFE	; 254
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	8d 93       	st	X+, r24
    3296:	9c 93       	st	X, r25
    3298:	fe 01       	movw	r30, r28
    329a:	ef 5a       	subi	r30, 0xAF	; 175
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <main+0x1146>
    32a6:	fe 01       	movw	r30, r28
    32a8:	ef 5a       	subi	r30, 0xAF	; 175
    32aa:	fe 4f       	sbci	r31, 0xFE	; 254
    32ac:	91 83       	std	Z+1, r25	; 0x01
    32ae:	80 83       	st	Z, r24
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
    32b0:	fe 01       	movw	r30, r28
    32b2:	e1 52       	subi	r30, 0x21	; 33
    32b4:	fe 4f       	sbci	r31, 0xFE	; 254
    32b6:	10 82       	st	Z, r1
				block_mode_flag = FALSE;//Disable block of runtime
    32b8:	fe 01       	movw	r30, r28
    32ba:	ee 51       	subi	r30, 0x1E	; 30
    32bc:	fe 4f       	sbci	r31, 0xFE	; 254
    32be:	10 82       	st	Z, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
    32c0:	83 e4       	ldi	r24, 0x43	; 67
    32c2:	62 e0       	ldi	r22, 0x02	; 2
    32c4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LED_vTurnOff>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
    32c8:	8a e0       	ldi	r24, 0x0A	; 10
    32ca:	91 e0       	ldi	r25, 0x01	; 1
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    32d2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	91 e0       	ldi	r25, 0x01	; 1
    32da:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
			LCD_movecursor(2,1);
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
    32e6:	8f e0       	ldi	r24, 0x0F	; 15
    32e8:	91 e0       	ldi	r25, 0x01	; 1
    32ea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    32ee:	06 c0       	rjmp	.+12     	; 0x32fc <main+0x11a0>
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    32f0:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    32f4:	fe 01       	movw	r30, r28
    32f6:	ef 51       	subi	r30, 0x1F	; 31
    32f8:	fe 4f       	sbci	r31, 0xFE	; 254
    32fa:	80 83       	st	Z, r24
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
    32fc:	fe 01       	movw	r30, r28
    32fe:	ef 51       	subi	r30, 0x1F	; 31
    3300:	fe 4f       	sbci	r31, 0xFE	; 254
    3302:	80 81       	ld	r24, Z
    3304:	8f 3f       	cpi	r24, 0xFF	; 255
    3306:	a1 f3       	breq	.-24     	; 0x32f0 <main+0x1194>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
    3308:	fe 01       	movw	r30, r28
    330a:	ef 51       	subi	r30, 0x1F	; 31
    330c:	fe 4f       	sbci	r31, 0xFE	; 254
    330e:	80 81       	ld	r24, Z
    3310:	80 33       	cpi	r24, 0x30	; 48
    3312:	09 f4       	brne	.+2      	; 0x3316 <main+0x11ba>
    3314:	c9 c0       	rjmp	.+402    	; 0x34a8 <main+0x134c>
    3316:	fe 01       	movw	r30, r28
    3318:	ef 51       	subi	r30, 0x1F	; 31
    331a:	fe 4f       	sbci	r31, 0xFE	; 254
    331c:	80 81       	ld	r24, Z
    331e:	81 33       	cpi	r24, 0x31	; 49
    3320:	09 f4       	brne	.+2      	; 0x3324 <main+0x11c8>
    3322:	c2 c0       	rjmp	.+388    	; 0x34a8 <main+0x134c>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3324:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");//Prints error message on the LCD
    3328:	8f e1       	ldi	r24, 0x1F	; 31
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3330:	fe 01       	movw	r30, r28
    3332:	ef 51       	subi	r30, 0x1F	; 31
    3334:	fe 4f       	sbci	r31, 0xFE	; 254
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	80 83       	st	Z, r24
    333a:	fe 01       	movw	r30, r28
    333c:	e3 5b       	subi	r30, 0xB3	; 179
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	aa e7       	ldi	r26, 0x7A	; 122
    3346:	b4 e4       	ldi	r27, 0x44	; 68
    3348:	80 83       	st	Z, r24
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	a2 83       	std	Z+2, r26	; 0x02
    334e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3350:	8e 01       	movw	r16, r28
    3352:	07 5b       	subi	r16, 0xB7	; 183
    3354:	1e 4f       	sbci	r17, 0xFE	; 254
    3356:	fe 01       	movw	r30, r28
    3358:	e3 5b       	subi	r30, 0xB3	; 179
    335a:	fe 4f       	sbci	r31, 0xFE	; 254
    335c:	60 81       	ld	r22, Z
    335e:	71 81       	ldd	r23, Z+1	; 0x01
    3360:	82 81       	ldd	r24, Z+2	; 0x02
    3362:	93 81       	ldd	r25, Z+3	; 0x03
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4a ef       	ldi	r20, 0xFA	; 250
    336a:	54 e4       	ldi	r21, 0x44	; 68
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	f8 01       	movw	r30, r16
    3376:	80 83       	st	Z, r24
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	a2 83       	std	Z+2, r26	; 0x02
    337c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    337e:	fe 01       	movw	r30, r28
    3380:	e7 5b       	subi	r30, 0xB7	; 183
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	60 81       	ld	r22, Z
    3386:	71 81       	ldd	r23, Z+1	; 0x01
    3388:	82 81       	ldd	r24, Z+2	; 0x02
    338a:	93 81       	ldd	r25, Z+3	; 0x03
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	40 e8       	ldi	r20, 0x80	; 128
    3392:	5f e3       	ldi	r21, 0x3F	; 63
    3394:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3398:	88 23       	and	r24, r24
    339a:	44 f4       	brge	.+16     	; 0x33ac <main+0x1250>
		__ticks = 1;
    339c:	fe 01       	movw	r30, r28
    339e:	e9 5b       	subi	r30, 0xB9	; 185
    33a0:	fe 4f       	sbci	r31, 0xFE	; 254
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24
    33aa:	65 c0       	rjmp	.+202    	; 0x3476 <main+0x131a>
	else if (__tmp > 65535)
    33ac:	fe 01       	movw	r30, r28
    33ae:	e7 5b       	subi	r30, 0xB7	; 183
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	60 81       	ld	r22, Z
    33b4:	71 81       	ldd	r23, Z+1	; 0x01
    33b6:	82 81       	ldd	r24, Z+2	; 0x02
    33b8:	93 81       	ldd	r25, Z+3	; 0x03
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	3f ef       	ldi	r19, 0xFF	; 255
    33be:	4f e7       	ldi	r20, 0x7F	; 127
    33c0:	57 e4       	ldi	r21, 0x47	; 71
    33c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c6:	18 16       	cp	r1, r24
    33c8:	0c f0       	brlt	.+2      	; 0x33cc <main+0x1270>
    33ca:	44 c0       	rjmp	.+136    	; 0x3454 <main+0x12f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33cc:	fe 01       	movw	r30, r28
    33ce:	e3 5b       	subi	r30, 0xB3	; 179
    33d0:	fe 4f       	sbci	r31, 0xFE	; 254
    33d2:	60 81       	ld	r22, Z
    33d4:	71 81       	ldd	r23, Z+1	; 0x01
    33d6:	82 81       	ldd	r24, Z+2	; 0x02
    33d8:	93 81       	ldd	r25, Z+3	; 0x03
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8e 01       	movw	r16, r28
    33ec:	09 5b       	subi	r16, 0xB9	; 185
    33ee:	1e 4f       	sbci	r17, 0xFE	; 254
    33f0:	bc 01       	movw	r22, r24
    33f2:	cd 01       	movw	r24, r26
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	f8 01       	movw	r30, r16
    33fe:	91 83       	std	Z+1, r25	; 0x01
    3400:	80 83       	st	Z, r24
    3402:	1f c0       	rjmp	.+62     	; 0x3442 <main+0x12e6>
    3404:	fe 01       	movw	r30, r28
    3406:	eb 5b       	subi	r30, 0xBB	; 187
    3408:	fe 4f       	sbci	r31, 0xFE	; 254
    340a:	88 ec       	ldi	r24, 0xC8	; 200
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	fe 01       	movw	r30, r28
    3414:	eb 5b       	subi	r30, 0xBB	; 187
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	f1 f7       	brne	.-4      	; 0x341c <main+0x12c0>
    3420:	fe 01       	movw	r30, r28
    3422:	eb 5b       	subi	r30, 0xBB	; 187
    3424:	fe 4f       	sbci	r31, 0xFE	; 254
    3426:	91 83       	std	Z+1, r25	; 0x01
    3428:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342a:	de 01       	movw	r26, r28
    342c:	a9 5b       	subi	r26, 0xB9	; 185
    342e:	be 4f       	sbci	r27, 0xFE	; 254
    3430:	fe 01       	movw	r30, r28
    3432:	e9 5b       	subi	r30, 0xB9	; 185
    3434:	fe 4f       	sbci	r31, 0xFE	; 254
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	11 96       	adiw	r26, 0x01	; 1
    343e:	9c 93       	st	X, r25
    3440:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3442:	fe 01       	movw	r30, r28
    3444:	e9 5b       	subi	r30, 0xB9	; 185
    3446:	fe 4f       	sbci	r31, 0xFE	; 254
    3448:	80 81       	ld	r24, Z
    344a:	91 81       	ldd	r25, Z+1	; 0x01
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	d1 f6       	brne	.-76     	; 0x3404 <main+0x12a8>
    3450:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	8e 01       	movw	r16, r28
    3456:	09 5b       	subi	r16, 0xB9	; 185
    3458:	1e 4f       	sbci	r17, 0xFE	; 254
    345a:	fe 01       	movw	r30, r28
    345c:	e7 5b       	subi	r30, 0xB7	; 183
    345e:	fe 4f       	sbci	r31, 0xFE	; 254
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	f8 01       	movw	r30, r16
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	de 01       	movw	r26, r28
    3478:	ad 5b       	subi	r26, 0xBD	; 189
    347a:	be 4f       	sbci	r27, 0xFE	; 254
    347c:	fe 01       	movw	r30, r28
    347e:	e9 5b       	subi	r30, 0xB9	; 185
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	11 96       	adiw	r26, 0x01	; 1
    3488:	9c 93       	st	X, r25
    348a:	8e 93       	st	-X, r24
    348c:	fe 01       	movw	r30, r28
    348e:	ed 5b       	subi	r30, 0xBD	; 189
    3490:	fe 4f       	sbci	r31, 0xFE	; 254
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	01 97       	sbiw	r24, 0x01	; 1
    3498:	f1 f7       	brne	.-4      	; 0x3496 <main+0x133a>
    349a:	fe 01       	movw	r30, r28
    349c:	ed 5b       	subi	r30, 0xBD	; 189
    349e:	fe 4f       	sbci	r31, 0xFE	; 254
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
    34a4:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
    34a8:	fe 01       	movw	r30, r28
    34aa:	e3 52       	subi	r30, 0x23	; 35
    34ac:	fe 4f       	sbci	r31, 0xFE	; 254
    34ae:	10 82       	st	Z, r1
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
    34b0:	fe 01       	movw	r30, r28
    34b2:	e5 51       	subi	r30, 0x15	; 21
    34b4:	fe 4f       	sbci	r31, 0xFE	; 254
    34b6:	8f ef       	ldi	r24, 0xFF	; 255
    34b8:	80 83       	st	Z, r24
    34ba:	fe 01       	movw	r30, r28
    34bc:	e5 51       	subi	r30, 0x15	; 21
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	8f ef       	ldi	r24, 0xFF	; 255
    34c2:	81 83       	std	Z+1, r24	; 0x01
    34c4:	fe 01       	movw	r30, r28
    34c6:	e5 51       	subi	r30, 0x15	; 21
    34c8:	fe 4f       	sbci	r31, 0xFE	; 254
    34ca:	8f ef       	ldi	r24, 0xFF	; 255
    34cc:	82 83       	std	Z+2, r24	; 0x02
    34ce:	fe 01       	movw	r30, r28
    34d0:	e5 51       	subi	r30, 0x15	; 21
    34d2:	fe 4f       	sbci	r31, 0xFE	; 254
    34d4:	8f ef       	ldi	r24, 0xFF	; 255
    34d6:	83 83       	std	Z+3, r24	; 0x03
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
    34d8:	fe 01       	movw	r30, r28
    34da:	e1 51       	subi	r30, 0x11	; 17
    34dc:	fe 4f       	sbci	r31, 0xFE	; 254
    34de:	8f ef       	ldi	r24, 0xFF	; 255
    34e0:	80 83       	st	Z, r24
    34e2:	fe 01       	movw	r30, r28
    34e4:	e1 51       	subi	r30, 0x11	; 17
    34e6:	fe 4f       	sbci	r31, 0xFE	; 254
    34e8:	8f ef       	ldi	r24, 0xFF	; 255
    34ea:	81 83       	std	Z+1, r24	; 0x01
    34ec:	fe 01       	movw	r30, r28
    34ee:	e1 51       	subi	r30, 0x11	; 17
    34f0:	fe 4f       	sbci	r31, 0xFE	; 254
    34f2:	8f ef       	ldi	r24, 0xFF	; 255
    34f4:	82 83       	std	Z+2, r24	; 0x02
    34f6:	fe 01       	movw	r30, r28
    34f8:	e1 51       	subi	r30, 0x11	; 17
    34fa:	fe 4f       	sbci	r31, 0xFE	; 254
    34fc:	8f ef       	ldi	r24, 0xFF	; 255
    34fe:	83 83       	std	Z+3, r24	; 0x03
			
			switch(key_pressed)
    3500:	fe 01       	movw	r30, r28
    3502:	ef 51       	subi	r30, 0x1F	; 31
    3504:	fe 4f       	sbci	r31, 0xFE	; 254
    3506:	80 81       	ld	r24, Z
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	cb 50       	subi	r28, 0x0B	; 11
    350e:	de 4f       	sbci	r29, 0xFE	; 254
    3510:	39 83       	std	Y+1, r19	; 0x01
    3512:	28 83       	st	Y, r18
    3514:	c5 5f       	subi	r28, 0xF5	; 245
    3516:	d1 40       	sbci	r29, 0x01	; 1
    3518:	cb 50       	subi	r28, 0x0B	; 11
    351a:	de 4f       	sbci	r29, 0xFE	; 254
    351c:	88 81       	ld	r24, Y
    351e:	99 81       	ldd	r25, Y+1	; 0x01
    3520:	c5 5f       	subi	r28, 0xF5	; 245
    3522:	d1 40       	sbci	r29, 0x01	; 1
    3524:	80 33       	cpi	r24, 0x30	; 48
    3526:	91 05       	cpc	r25, r1
    3528:	09 f4       	brne	.+2      	; 0x352c <main+0x13d0>
    352a:	59 c4       	rjmp	.+2226   	; 0x3dde <main+0x1c82>
    352c:	cb 50       	subi	r28, 0x0B	; 11
    352e:	de 4f       	sbci	r29, 0xFE	; 254
    3530:	e8 81       	ld	r30, Y
    3532:	f9 81       	ldd	r31, Y+1	; 0x01
    3534:	c5 5f       	subi	r28, 0xF5	; 245
    3536:	d1 40       	sbci	r29, 0x01	; 1
    3538:	e1 33       	cpi	r30, 0x31	; 49
    353a:	f1 05       	cpc	r31, r1
    353c:	11 f4       	brne	.+4      	; 0x3542 <main+0x13e6>
    353e:	0c 94 43 23 	jmp	0x4686	; 0x4686 <main+0x252a>
    3542:	0c 94 4a 23 	jmp	0x4694	; 0x4694 <main+0x2538>
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3546:	fe 01       	movw	r30, r28
    3548:	ef 51       	subi	r30, 0x1F	; 31
    354a:	fe 4f       	sbci	r31, 0xFE	; 254
    354c:	8f ef       	ldi	r24, 0xFF	; 255
    354e:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3550:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Admin mode");
    3554:	8c e2       	ldi	r24, 0x2C	; 44
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	61 e0       	ldi	r22, 0x01	; 1
    3560:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("Enter Pass:");
    3564:	87 e3       	ldi	r24, 0x37	; 55
    3566:	91 e0       	ldi	r25, 0x01	; 1
    3568:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    356c:	fe 01       	movw	r30, r28
    356e:	e1 5c       	subi	r30, 0xC1	; 193
    3570:	fe 4f       	sbci	r31, 0xFE	; 254
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	a8 e4       	ldi	r26, 0x48	; 72
    3578:	b3 e4       	ldi	r27, 0x43	; 67
    357a:	80 83       	st	Z, r24
    357c:	91 83       	std	Z+1, r25	; 0x01
    357e:	a2 83       	std	Z+2, r26	; 0x02
    3580:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3582:	8e 01       	movw	r16, r28
    3584:	05 5c       	subi	r16, 0xC5	; 197
    3586:	1e 4f       	sbci	r17, 0xFE	; 254
    3588:	fe 01       	movw	r30, r28
    358a:	e1 5c       	subi	r30, 0xC1	; 193
    358c:	fe 4f       	sbci	r31, 0xFE	; 254
    358e:	60 81       	ld	r22, Z
    3590:	71 81       	ldd	r23, Z+1	; 0x01
    3592:	82 81       	ldd	r24, Z+2	; 0x02
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	4a ef       	ldi	r20, 0xFA	; 250
    359c:	54 e4       	ldi	r21, 0x44	; 68
    359e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	f8 01       	movw	r30, r16
    35a8:	80 83       	st	Z, r24
    35aa:	91 83       	std	Z+1, r25	; 0x01
    35ac:	a2 83       	std	Z+2, r26	; 0x02
    35ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35b0:	fe 01       	movw	r30, r28
    35b2:	e5 5c       	subi	r30, 0xC5	; 197
    35b4:	fe 4f       	sbci	r31, 0xFE	; 254
    35b6:	60 81       	ld	r22, Z
    35b8:	71 81       	ldd	r23, Z+1	; 0x01
    35ba:	82 81       	ldd	r24, Z+2	; 0x02
    35bc:	93 81       	ldd	r25, Z+3	; 0x03
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	44 f4       	brge	.+16     	; 0x35de <main+0x1482>
		__ticks = 1;
    35ce:	fe 01       	movw	r30, r28
    35d0:	e7 5c       	subi	r30, 0xC7	; 199
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
    35dc:	64 c0       	rjmp	.+200    	; 0x36a6 <main+0x154a>
	else if (__tmp > 65535)
    35de:	fe 01       	movw	r30, r28
    35e0:	e5 5c       	subi	r30, 0xC5	; 197
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	3f ef       	ldi	r19, 0xFF	; 255
    35f0:	4f e7       	ldi	r20, 0x7F	; 127
    35f2:	57 e4       	ldi	r21, 0x47	; 71
    35f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f8:	18 16       	cp	r1, r24
    35fa:	0c f0       	brlt	.+2      	; 0x35fe <main+0x14a2>
    35fc:	43 c0       	rjmp	.+134    	; 0x3684 <main+0x1528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fe:	fe 01       	movw	r30, r28
    3600:	e1 5c       	subi	r30, 0xC1	; 193
    3602:	fe 4f       	sbci	r31, 0xFE	; 254
    3604:	60 81       	ld	r22, Z
    3606:	71 81       	ldd	r23, Z+1	; 0x01
    3608:	82 81       	ldd	r24, Z+2	; 0x02
    360a:	93 81       	ldd	r25, Z+3	; 0x03
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	8e 01       	movw	r16, r28
    361e:	07 5c       	subi	r16, 0xC7	; 199
    3620:	1e 4f       	sbci	r17, 0xFE	; 254
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	f8 01       	movw	r30, r16
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	1f c0       	rjmp	.+62     	; 0x3674 <main+0x1518>
    3636:	fe 01       	movw	r30, r28
    3638:	e9 5c       	subi	r30, 0xC9	; 201
    363a:	fe 4f       	sbci	r31, 0xFE	; 254
    363c:	88 ec       	ldi	r24, 0xC8	; 200
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
    3644:	fe 01       	movw	r30, r28
    3646:	e9 5c       	subi	r30, 0xC9	; 201
    3648:	fe 4f       	sbci	r31, 0xFE	; 254
    364a:	80 81       	ld	r24, Z
    364c:	91 81       	ldd	r25, Z+1	; 0x01
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <main+0x14f2>
    3652:	fe 01       	movw	r30, r28
    3654:	e9 5c       	subi	r30, 0xC9	; 201
    3656:	fe 4f       	sbci	r31, 0xFE	; 254
    3658:	91 83       	std	Z+1, r25	; 0x01
    365a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365c:	de 01       	movw	r26, r28
    365e:	a7 5c       	subi	r26, 0xC7	; 199
    3660:	be 4f       	sbci	r27, 0xFE	; 254
    3662:	fe 01       	movw	r30, r28
    3664:	e7 5c       	subi	r30, 0xC7	; 199
    3666:	fe 4f       	sbci	r31, 0xFE	; 254
    3668:	80 81       	ld	r24, Z
    366a:	91 81       	ldd	r25, Z+1	; 0x01
    366c:	01 97       	sbiw	r24, 0x01	; 1
    366e:	11 96       	adiw	r26, 0x01	; 1
    3670:	9c 93       	st	X, r25
    3672:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	fe 01       	movw	r30, r28
    3676:	e7 5c       	subi	r30, 0xC7	; 199
    3678:	fe 4f       	sbci	r31, 0xFE	; 254
    367a:	80 81       	ld	r24, Z
    367c:	91 81       	ldd	r25, Z+1	; 0x01
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	d1 f6       	brne	.-76     	; 0x3636 <main+0x14da>
    3682:	28 c0       	rjmp	.+80     	; 0x36d4 <main+0x1578>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3684:	8e 01       	movw	r16, r28
    3686:	07 5c       	subi	r16, 0xC7	; 199
    3688:	1e 4f       	sbci	r17, 0xFE	; 254
    368a:	fe 01       	movw	r30, r28
    368c:	e5 5c       	subi	r30, 0xC5	; 197
    368e:	fe 4f       	sbci	r31, 0xFE	; 254
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	f8 01       	movw	r30, r16
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
    36a6:	de 01       	movw	r26, r28
    36a8:	ab 5c       	subi	r26, 0xCB	; 203
    36aa:	be 4f       	sbci	r27, 0xFE	; 254
    36ac:	fe 01       	movw	r30, r28
    36ae:	e7 5c       	subi	r30, 0xC7	; 199
    36b0:	fe 4f       	sbci	r31, 0xFE	; 254
    36b2:	80 81       	ld	r24, Z
    36b4:	91 81       	ldd	r25, Z+1	; 0x01
    36b6:	11 96       	adiw	r26, 0x01	; 1
    36b8:	9c 93       	st	X, r25
    36ba:	8e 93       	st	-X, r24
    36bc:	fe 01       	movw	r30, r28
    36be:	eb 5c       	subi	r30, 0xCB	; 203
    36c0:	fe 4f       	sbci	r31, 0xFE	; 254
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <main+0x156a>
    36ca:	fe 01       	movw	r30, r28
    36cc:	eb 5c       	subi	r30, 0xCB	; 203
    36ce:	fe 4f       	sbci	r31, 0xFE	; 254
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
    36d4:	fe 01       	movw	r30, r28
    36d6:	e3 52       	subi	r30, 0x23	; 35
    36d8:	fe 4f       	sbci	r31, 0xFE	; 254
    36da:	10 82       	st	Z, r1
    36dc:	a4 c1       	rjmp	.+840    	; 0x3a26 <main+0x18ca>
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    36de:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    36e2:	fe 01       	movw	r30, r28
    36e4:	ef 51       	subi	r30, 0x1F	; 31
    36e6:	fe 4f       	sbci	r31, 0xFE	; 254
    36e8:	80 83       	st	Z, r24
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    36ea:	fe 01       	movw	r30, r28
    36ec:	ef 51       	subi	r30, 0x1F	; 31
    36ee:	fe 4f       	sbci	r31, 0xFE	; 254
    36f0:	80 81       	ld	r24, Z
    36f2:	8f 3f       	cpi	r24, 0xFF	; 255
    36f4:	a1 f3       	breq	.-24     	; 0x36de <main+0x1582>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
    36f6:	fe 01       	movw	r30, r28
    36f8:	e3 52       	subi	r30, 0x23	; 35
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	80 81       	ld	r24, Z
    36fe:	28 2f       	mov	r18, r24
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	ce 01       	movw	r24, r28
    3704:	85 51       	subi	r24, 0x15	; 21
    3706:	9e 4f       	sbci	r25, 0xFE	; 254
    3708:	dc 01       	movw	r26, r24
    370a:	a2 0f       	add	r26, r18
    370c:	b3 1f       	adc	r27, r19
    370e:	fe 01       	movw	r30, r28
    3710:	ef 51       	subi	r30, 0x1F	; 31
    3712:	fe 4f       	sbci	r31, 0xFE	; 254
    3714:	80 81       	ld	r24, Z
    3716:	8c 93       	st	X, r24
						LCD_vSend_char(key_pressed);//print the entered character
    3718:	fe 01       	movw	r30, r28
    371a:	ef 51       	subi	r30, 0x1F	; 31
    371c:	fe 4f       	sbci	r31, 0xFE	; 254
    371e:	80 81       	ld	r24, Z
    3720:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    3724:	fe 01       	movw	r30, r28
    3726:	ef 5c       	subi	r30, 0xCF	; 207
    3728:	fe 4f       	sbci	r31, 0xFE	; 254
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a6 e9       	ldi	r26, 0x96	; 150
    3730:	b3 e4       	ldi	r27, 0x43	; 67
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373a:	8e 01       	movw	r16, r28
    373c:	03 5d       	subi	r16, 0xD3	; 211
    373e:	1e 4f       	sbci	r17, 0xFE	; 254
    3740:	fe 01       	movw	r30, r28
    3742:	ef 5c       	subi	r30, 0xCF	; 207
    3744:	fe 4f       	sbci	r31, 0xFE	; 254
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4a ef       	ldi	r20, 0xFA	; 250
    3754:	54 e4       	ldi	r21, 0x44	; 68
    3756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	f8 01       	movw	r30, r16
    3760:	80 83       	st	Z, r24
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	a2 83       	std	Z+2, r26	; 0x02
    3766:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3768:	fe 01       	movw	r30, r28
    376a:	e3 5d       	subi	r30, 0xD3	; 211
    376c:	fe 4f       	sbci	r31, 0xFE	; 254
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e8       	ldi	r20, 0x80	; 128
    377c:	5f e3       	ldi	r21, 0x3F	; 63
    377e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3782:	88 23       	and	r24, r24
    3784:	44 f4       	brge	.+16     	; 0x3796 <main+0x163a>
		__ticks = 1;
    3786:	fe 01       	movw	r30, r28
    3788:	e5 5d       	subi	r30, 0xD5	; 213
    378a:	fe 4f       	sbci	r31, 0xFE	; 254
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	91 83       	std	Z+1, r25	; 0x01
    3792:	80 83       	st	Z, r24
    3794:	64 c0       	rjmp	.+200    	; 0x385e <main+0x1702>
	else if (__tmp > 65535)
    3796:	fe 01       	movw	r30, r28
    3798:	e3 5d       	subi	r30, 0xD3	; 211
    379a:	fe 4f       	sbci	r31, 0xFE	; 254
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	3f ef       	ldi	r19, 0xFF	; 255
    37a8:	4f e7       	ldi	r20, 0x7F	; 127
    37aa:	57 e4       	ldi	r21, 0x47	; 71
    37ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b0:	18 16       	cp	r1, r24
    37b2:	0c f0       	brlt	.+2      	; 0x37b6 <main+0x165a>
    37b4:	43 c0       	rjmp	.+134    	; 0x383c <main+0x16e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b6:	fe 01       	movw	r30, r28
    37b8:	ef 5c       	subi	r30, 0xCF	; 207
    37ba:	fe 4f       	sbci	r31, 0xFE	; 254
    37bc:	60 81       	ld	r22, Z
    37be:	71 81       	ldd	r23, Z+1	; 0x01
    37c0:	82 81       	ldd	r24, Z+2	; 0x02
    37c2:	93 81       	ldd	r25, Z+3	; 0x03
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e2       	ldi	r20, 0x20	; 32
    37ca:	51 e4       	ldi	r21, 0x41	; 65
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	8e 01       	movw	r16, r28
    37d6:	05 5d       	subi	r16, 0xD5	; 213
    37d8:	1e 4f       	sbci	r17, 0xFE	; 254
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	f8 01       	movw	r30, r16
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
    37ec:	1f c0       	rjmp	.+62     	; 0x382c <main+0x16d0>
    37ee:	fe 01       	movw	r30, r28
    37f0:	e7 5d       	subi	r30, 0xD7	; 215
    37f2:	fe 4f       	sbci	r31, 0xFE	; 254
    37f4:	88 ec       	ldi	r24, 0xC8	; 200
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	91 83       	std	Z+1, r25	; 0x01
    37fa:	80 83       	st	Z, r24
    37fc:	fe 01       	movw	r30, r28
    37fe:	e7 5d       	subi	r30, 0xD7	; 215
    3800:	fe 4f       	sbci	r31, 0xFE	; 254
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	01 97       	sbiw	r24, 0x01	; 1
    3808:	f1 f7       	brne	.-4      	; 0x3806 <main+0x16aa>
    380a:	fe 01       	movw	r30, r28
    380c:	e7 5d       	subi	r30, 0xD7	; 215
    380e:	fe 4f       	sbci	r31, 0xFE	; 254
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	de 01       	movw	r26, r28
    3816:	a5 5d       	subi	r26, 0xD5	; 213
    3818:	be 4f       	sbci	r27, 0xFE	; 254
    381a:	fe 01       	movw	r30, r28
    381c:	e5 5d       	subi	r30, 0xD5	; 213
    381e:	fe 4f       	sbci	r31, 0xFE	; 254
    3820:	80 81       	ld	r24, Z
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	11 96       	adiw	r26, 0x01	; 1
    3828:	9c 93       	st	X, r25
    382a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382c:	fe 01       	movw	r30, r28
    382e:	e5 5d       	subi	r30, 0xD5	; 213
    3830:	fe 4f       	sbci	r31, 0xFE	; 254
    3832:	80 81       	ld	r24, Z
    3834:	91 81       	ldd	r25, Z+1	; 0x01
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	d1 f6       	brne	.-76     	; 0x37ee <main+0x1692>
    383a:	27 c0       	rjmp	.+78     	; 0x388a <main+0x172e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    383c:	8e 01       	movw	r16, r28
    383e:	05 5d       	subi	r16, 0xD5	; 213
    3840:	1e 4f       	sbci	r17, 0xFE	; 254
    3842:	fe 01       	movw	r30, r28
    3844:	e3 5d       	subi	r30, 0xD3	; 211
    3846:	fe 4f       	sbci	r31, 0xFE	; 254
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	f8 01       	movw	r30, r16
    385a:	91 83       	std	Z+1, r25	; 0x01
    385c:	80 83       	st	Z, r24
    385e:	de 01       	movw	r26, r28
    3860:	a9 5d       	subi	r26, 0xD9	; 217
    3862:	be 4f       	sbci	r27, 0xFE	; 254
    3864:	fe 01       	movw	r30, r28
    3866:	e5 5d       	subi	r30, 0xD5	; 213
    3868:	fe 4f       	sbci	r31, 0xFE	; 254
    386a:	80 81       	ld	r24, Z
    386c:	91 81       	ldd	r25, Z+1	; 0x01
    386e:	8d 93       	st	X+, r24
    3870:	9c 93       	st	X, r25
    3872:	fe 01       	movw	r30, r28
    3874:	e9 5d       	subi	r30, 0xD9	; 217
    3876:	fe 4f       	sbci	r31, 0xFE	; 254
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	01 97       	sbiw	r24, 0x01	; 1
    387e:	f1 f7       	brne	.-4      	; 0x387c <main+0x1720>
    3880:	fe 01       	movw	r30, r28
    3882:	e9 5d       	subi	r30, 0xD9	; 217
    3884:	fe 4f       	sbci	r31, 0xFE	; 254
    3886:	91 83       	std	Z+1, r25	; 0x01
    3888:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
    388a:	fe 01       	movw	r30, r28
    388c:	e3 52       	subi	r30, 0x23	; 35
    388e:	fe 4f       	sbci	r31, 0xFE	; 254
    3890:	80 81       	ld	r24, Z
    3892:	98 2f       	mov	r25, r24
    3894:	94 5f       	subi	r25, 0xF4	; 244
    3896:	82 e0       	ldi	r24, 0x02	; 2
    3898:	69 2f       	mov	r22, r25
    389a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
    389e:	8a e2       	ldi	r24, 0x2A	; 42
    38a0:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    38a4:	fe 01       	movw	r30, r28
    38a6:	ed 5d       	subi	r30, 0xDD	; 221
    38a8:	fe 4f       	sbci	r31, 0xFE	; 254
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	a8 ec       	ldi	r26, 0xC8	; 200
    38b0:	b2 e4       	ldi	r27, 0x42	; 66
    38b2:	80 83       	st	Z, r24
    38b4:	91 83       	std	Z+1, r25	; 0x01
    38b6:	a2 83       	std	Z+2, r26	; 0x02
    38b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ba:	8e 01       	movw	r16, r28
    38bc:	01 5e       	subi	r16, 0xE1	; 225
    38be:	1e 4f       	sbci	r17, 0xFE	; 254
    38c0:	fe 01       	movw	r30, r28
    38c2:	ed 5d       	subi	r30, 0xDD	; 221
    38c4:	fe 4f       	sbci	r31, 0xFE	; 254
    38c6:	60 81       	ld	r22, Z
    38c8:	71 81       	ldd	r23, Z+1	; 0x01
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	93 81       	ldd	r25, Z+3	; 0x03
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	4a ef       	ldi	r20, 0xFA	; 250
    38d4:	54 e4       	ldi	r21, 0x44	; 68
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	f8 01       	movw	r30, r16
    38e0:	80 83       	st	Z, r24
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	a2 83       	std	Z+2, r26	; 0x02
    38e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38e8:	fe 01       	movw	r30, r28
    38ea:	e1 5e       	subi	r30, 0xE1	; 225
    38ec:	fe 4f       	sbci	r31, 0xFE	; 254
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e8       	ldi	r20, 0x80	; 128
    38fc:	5f e3       	ldi	r21, 0x3F	; 63
    38fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3902:	88 23       	and	r24, r24
    3904:	44 f4       	brge	.+16     	; 0x3916 <main+0x17ba>
		__ticks = 1;
    3906:	fe 01       	movw	r30, r28
    3908:	e3 5e       	subi	r30, 0xE3	; 227
    390a:	fe 4f       	sbci	r31, 0xFE	; 254
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	80 83       	st	Z, r24
    3914:	64 c0       	rjmp	.+200    	; 0x39de <main+0x1882>
	else if (__tmp > 65535)
    3916:	fe 01       	movw	r30, r28
    3918:	e1 5e       	subi	r30, 0xE1	; 225
    391a:	fe 4f       	sbci	r31, 0xFE	; 254
    391c:	60 81       	ld	r22, Z
    391e:	71 81       	ldd	r23, Z+1	; 0x01
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3930:	18 16       	cp	r1, r24
    3932:	0c f0       	brlt	.+2      	; 0x3936 <main+0x17da>
    3934:	43 c0       	rjmp	.+134    	; 0x39bc <main+0x1860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3936:	fe 01       	movw	r30, r28
    3938:	ed 5d       	subi	r30, 0xDD	; 221
    393a:	fe 4f       	sbci	r31, 0xFE	; 254
    393c:	60 81       	ld	r22, Z
    393e:	71 81       	ldd	r23, Z+1	; 0x01
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	40 e2       	ldi	r20, 0x20	; 32
    394a:	51 e4       	ldi	r21, 0x41	; 65
    394c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8e 01       	movw	r16, r28
    3956:	03 5e       	subi	r16, 0xE3	; 227
    3958:	1e 4f       	sbci	r17, 0xFE	; 254
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	f8 01       	movw	r30, r16
    3968:	91 83       	std	Z+1, r25	; 0x01
    396a:	80 83       	st	Z, r24
    396c:	1f c0       	rjmp	.+62     	; 0x39ac <main+0x1850>
    396e:	fe 01       	movw	r30, r28
    3970:	e5 5e       	subi	r30, 0xE5	; 229
    3972:	fe 4f       	sbci	r31, 0xFE	; 254
    3974:	88 ec       	ldi	r24, 0xC8	; 200
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	91 83       	std	Z+1, r25	; 0x01
    397a:	80 83       	st	Z, r24
    397c:	fe 01       	movw	r30, r28
    397e:	e5 5e       	subi	r30, 0xE5	; 229
    3980:	fe 4f       	sbci	r31, 0xFE	; 254
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <main+0x182a>
    398a:	fe 01       	movw	r30, r28
    398c:	e5 5e       	subi	r30, 0xE5	; 229
    398e:	fe 4f       	sbci	r31, 0xFE	; 254
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3994:	de 01       	movw	r26, r28
    3996:	a3 5e       	subi	r26, 0xE3	; 227
    3998:	be 4f       	sbci	r27, 0xFE	; 254
    399a:	fe 01       	movw	r30, r28
    399c:	e3 5e       	subi	r30, 0xE3	; 227
    399e:	fe 4f       	sbci	r31, 0xFE	; 254
    39a0:	80 81       	ld	r24, Z
    39a2:	91 81       	ldd	r25, Z+1	; 0x01
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	11 96       	adiw	r26, 0x01	; 1
    39a8:	9c 93       	st	X, r25
    39aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ac:	fe 01       	movw	r30, r28
    39ae:	e3 5e       	subi	r30, 0xE3	; 227
    39b0:	fe 4f       	sbci	r31, 0xFE	; 254
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	d1 f6       	brne	.-76     	; 0x396e <main+0x1812>
    39ba:	27 c0       	rjmp	.+78     	; 0x3a0a <main+0x18ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	8e 01       	movw	r16, r28
    39be:	03 5e       	subi	r16, 0xE3	; 227
    39c0:	1e 4f       	sbci	r17, 0xFE	; 254
    39c2:	fe 01       	movw	r30, r28
    39c4:	e1 5e       	subi	r30, 0xE1	; 225
    39c6:	fe 4f       	sbci	r31, 0xFE	; 254
    39c8:	60 81       	ld	r22, Z
    39ca:	71 81       	ldd	r23, Z+1	; 0x01
    39cc:	82 81       	ldd	r24, Z+2	; 0x02
    39ce:	93 81       	ldd	r25, Z+3	; 0x03
    39d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	f8 01       	movw	r30, r16
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	80 83       	st	Z, r24
    39de:	de 01       	movw	r26, r28
    39e0:	a7 5e       	subi	r26, 0xE7	; 231
    39e2:	be 4f       	sbci	r27, 0xFE	; 254
    39e4:	fe 01       	movw	r30, r28
    39e6:	e3 5e       	subi	r30, 0xE3	; 227
    39e8:	fe 4f       	sbci	r31, 0xFE	; 254
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	8d 93       	st	X+, r24
    39f0:	9c 93       	st	X, r25
    39f2:	fe 01       	movw	r30, r28
    39f4:	e7 5e       	subi	r30, 0xE7	; 231
    39f6:	fe 4f       	sbci	r31, 0xFE	; 254
    39f8:	80 81       	ld	r24, Z
    39fa:	91 81       	ldd	r25, Z+1	; 0x01
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <main+0x18a0>
    3a00:	fe 01       	movw	r30, r28
    3a02:	e7 5e       	subi	r30, 0xE7	; 231
    3a04:	fe 4f       	sbci	r31, 0xFE	; 254
    3a06:	91 83       	std	Z+1, r25	; 0x01
    3a08:	80 83       	st	Z, r24
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
    3a0a:	de 01       	movw	r26, r28
    3a0c:	a3 52       	subi	r26, 0x23	; 35
    3a0e:	be 4f       	sbci	r27, 0xFE	; 254
    3a10:	fe 01       	movw	r30, r28
    3a12:	e3 52       	subi	r30, 0x23	; 35
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	80 81       	ld	r24, Z
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	ef 51       	subi	r30, 0x1F	; 31
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	8f ef       	ldi	r24, 0xFF	; 255
    3a24:	80 83       	st	Z, r24
					LCD_vSend_string("Admin mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
    3a26:	fe 01       	movw	r30, r28
    3a28:	e3 52       	subi	r30, 0x23	; 35
    3a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2c:	80 81       	ld	r24, Z
    3a2e:	84 30       	cpi	r24, 0x04	; 4
    3a30:	08 f4       	brcc	.+2      	; 0x3a34 <main+0x18d8>
    3a32:	5b ce       	rjmp	.-842    	; 0x36ea <main+0x158e>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
    3a34:	9e 01       	movw	r18, r28
    3a36:	21 51       	subi	r18, 0x11	; 17
    3a38:	3e 4f       	sbci	r19, 0xFE	; 254
    3a3a:	82 e0       	ldi	r24, 0x02	; 2
    3a3c:	91 e0       	ldi	r25, 0x01	; 1
    3a3e:	b9 01       	movw	r22, r18
    3a40:	44 e0       	ldi	r20, 0x04	; 4
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	0e 94 9d 0b 	call	0x173a	; 0x173a <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
    3a48:	ce 01       	movw	r24, r28
    3a4a:	85 51       	subi	r24, 0x15	; 21
    3a4c:	9e 4f       	sbci	r25, 0xFE	; 254
    3a4e:	9e 01       	movw	r18, r28
    3a50:	21 51       	subi	r18, 0x11	; 17
    3a52:	3e 4f       	sbci	r19, 0xFE	; 254
    3a54:	b9 01       	movw	r22, r18
    3a56:	44 e0       	ldi	r20, 0x04	; 4
    3a58:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <ui8ComparePass>
    3a5c:	81 30       	cpi	r24, 0x01	; 1
    3a5e:	09 f0       	breq	.+2      	; 0x3a62 <main+0x1906>
    3a60:	d3 c0       	rjmp	.+422    	; 0x3c08 <main+0x1aac>
					{
						login_mode = ADMIN;//set the login mode to admin mode
    3a62:	fe 01       	movw	r30, r28
    3a64:	ed 51       	subi	r30, 0x1D	; 29
    3a66:	fe 4f       	sbci	r31, 0xFE	; 254
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	80 83       	st	Z, r24
						pass_tries_count=0;//clear the counter of wrong tries
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	e1 52       	subi	r30, 0x21	; 33
    3a70:	fe 4f       	sbci	r31, 0xFE	; 254
    3a72:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3a74:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
    3a78:	83 e4       	ldi	r24, 0x43	; 67
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    3a80:	82 e0       	ldi	r24, 0x02	; 2
    3a82:	61 e0       	ldi	r22, 0x01	; 1
    3a84:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Admin mode");
    3a88:	8c e2       	ldi	r24, 0x2C	; 44
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    3a90:	fe 01       	movw	r30, r28
    3a92:	eb 5e       	subi	r30, 0xEB	; 235
    3a94:	fe 4f       	sbci	r31, 0xFE	; 254
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	aa ef       	ldi	r26, 0xFA	; 250
    3a9c:	b3 e4       	ldi	r27, 0x43	; 67
    3a9e:	80 83       	st	Z, r24
    3aa0:	91 83       	std	Z+1, r25	; 0x01
    3aa2:	a2 83       	std	Z+2, r26	; 0x02
    3aa4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa6:	8e 01       	movw	r16, r28
    3aa8:	0f 5e       	subi	r16, 0xEF	; 239
    3aaa:	1e 4f       	sbci	r17, 0xFE	; 254
    3aac:	fe 01       	movw	r30, r28
    3aae:	eb 5e       	subi	r30, 0xEB	; 235
    3ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab2:	60 81       	ld	r22, Z
    3ab4:	71 81       	ldd	r23, Z+1	; 0x01
    3ab6:	82 81       	ldd	r24, Z+2	; 0x02
    3ab8:	93 81       	ldd	r25, Z+3	; 0x03
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	4a ef       	ldi	r20, 0xFA	; 250
    3ac0:	54 e4       	ldi	r21, 0x44	; 68
    3ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	f8 01       	movw	r30, r16
    3acc:	80 83       	st	Z, r24
    3ace:	91 83       	std	Z+1, r25	; 0x01
    3ad0:	a2 83       	std	Z+2, r26	; 0x02
    3ad2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	ef 5e       	subi	r30, 0xEF	; 239
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	5f e3       	ldi	r21, 0x3F	; 63
    3aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aee:	88 23       	and	r24, r24
    3af0:	44 f4       	brge	.+16     	; 0x3b02 <main+0x19a6>
		__ticks = 1;
    3af2:	fe 01       	movw	r30, r28
    3af4:	e1 5f       	subi	r30, 0xF1	; 241
    3af6:	fe 4f       	sbci	r31, 0xFE	; 254
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	91 83       	std	Z+1, r25	; 0x01
    3afe:	80 83       	st	Z, r24
    3b00:	64 c0       	rjmp	.+200    	; 0x3bca <main+0x1a6e>
	else if (__tmp > 65535)
    3b02:	fe 01       	movw	r30, r28
    3b04:	ef 5e       	subi	r30, 0xEF	; 239
    3b06:	fe 4f       	sbci	r31, 0xFE	; 254
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	3f ef       	ldi	r19, 0xFF	; 255
    3b14:	4f e7       	ldi	r20, 0x7F	; 127
    3b16:	57 e4       	ldi	r21, 0x47	; 71
    3b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1c:	18 16       	cp	r1, r24
    3b1e:	0c f0       	brlt	.+2      	; 0x3b22 <main+0x19c6>
    3b20:	43 c0       	rjmp	.+134    	; 0x3ba8 <main+0x1a4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b22:	fe 01       	movw	r30, r28
    3b24:	eb 5e       	subi	r30, 0xEB	; 235
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	60 81       	ld	r22, Z
    3b2a:	71 81       	ldd	r23, Z+1	; 0x01
    3b2c:	82 81       	ldd	r24, Z+2	; 0x02
    3b2e:	93 81       	ldd	r25, Z+3	; 0x03
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e2       	ldi	r20, 0x20	; 32
    3b36:	51 e4       	ldi	r21, 0x41	; 65
    3b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	8e 01       	movw	r16, r28
    3b42:	01 5f       	subi	r16, 0xF1	; 241
    3b44:	1e 4f       	sbci	r17, 0xFE	; 254
    3b46:	bc 01       	movw	r22, r24
    3b48:	cd 01       	movw	r24, r26
    3b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	f8 01       	movw	r30, r16
    3b54:	91 83       	std	Z+1, r25	; 0x01
    3b56:	80 83       	st	Z, r24
    3b58:	1f c0       	rjmp	.+62     	; 0x3b98 <main+0x1a3c>
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	e3 5f       	subi	r30, 0xF3	; 243
    3b5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b60:	88 ec       	ldi	r24, 0xC8	; 200
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	91 83       	std	Z+1, r25	; 0x01
    3b66:	80 83       	st	Z, r24
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e3 5f       	subi	r30, 0xF3	; 243
    3b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6e:	80 81       	ld	r24, Z
    3b70:	91 81       	ldd	r25, Z+1	; 0x01
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <main+0x1a16>
    3b76:	fe 01       	movw	r30, r28
    3b78:	e3 5f       	subi	r30, 0xF3	; 243
    3b7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b80:	de 01       	movw	r26, r28
    3b82:	a1 5f       	subi	r26, 0xF1	; 241
    3b84:	be 4f       	sbci	r27, 0xFE	; 254
    3b86:	fe 01       	movw	r30, r28
    3b88:	e1 5f       	subi	r30, 0xF1	; 241
    3b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	11 96       	adiw	r26, 0x01	; 1
    3b94:	9c 93       	st	X, r25
    3b96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e1 5f       	subi	r30, 0xF1	; 241
    3b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9e:	80 81       	ld	r24, Z
    3ba0:	91 81       	ldd	r25, Z+1	; 0x01
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	d1 f6       	brne	.-76     	; 0x3b5a <main+0x19fe>
    3ba6:	27 c0       	rjmp	.+78     	; 0x3bf6 <main+0x1a9a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba8:	8e 01       	movw	r16, r28
    3baa:	01 5f       	subi	r16, 0xF1	; 241
    3bac:	1e 4f       	sbci	r17, 0xFE	; 254
    3bae:	fe 01       	movw	r30, r28
    3bb0:	ef 5e       	subi	r30, 0xEF	; 239
    3bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb4:	60 81       	ld	r22, Z
    3bb6:	71 81       	ldd	r23, Z+1	; 0x01
    3bb8:	82 81       	ldd	r24, Z+2	; 0x02
    3bba:	93 81       	ldd	r25, Z+3	; 0x03
    3bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	f8 01       	movw	r30, r16
    3bc6:	91 83       	std	Z+1, r25	; 0x01
    3bc8:	80 83       	st	Z, r24
    3bca:	de 01       	movw	r26, r28
    3bcc:	a5 5f       	subi	r26, 0xF5	; 245
    3bce:	be 4f       	sbci	r27, 0xFE	; 254
    3bd0:	fe 01       	movw	r30, r28
    3bd2:	e1 5f       	subi	r30, 0xF1	; 241
    3bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd6:	80 81       	ld	r24, Z
    3bd8:	91 81       	ldd	r25, Z+1	; 0x01
    3bda:	8d 93       	st	X+, r24
    3bdc:	9c 93       	st	X, r25
    3bde:	fe 01       	movw	r30, r28
    3be0:	e5 5f       	subi	r30, 0xF5	; 245
    3be2:	fe 4f       	sbci	r31, 0xFE	; 254
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	01 97       	sbiw	r24, 0x01	; 1
    3bea:	f1 f7       	brne	.-4      	; 0x3be8 <main+0x1a8c>
    3bec:	fe 01       	movw	r30, r28
    3bee:	e5 5f       	subi	r30, 0xF5	; 245
    3bf0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bf2:	91 83       	std	Z+1, r25	; 0x01
    3bf4:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
    3bf6:	83 e4       	ldi	r24, 0x43	; 67
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
						timer0_initializeCTC();//start the timer that counts the session time
    3bfe:	0e 94 02 31 	call	0x6204	; 0x6204 <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3c02:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
    3c06:	eb c0       	rjmp	.+470    	; 0x3dde <main+0x1c82>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
    3c08:	de 01       	movw	r26, r28
    3c0a:	a1 52       	subi	r26, 0x21	; 33
    3c0c:	be 4f       	sbci	r27, 0xFE	; 254
    3c0e:	fe 01       	movw	r30, r28
    3c10:	e1 52       	subi	r30, 0x21	; 33
    3c12:	fe 4f       	sbci	r31, 0xFE	; 254
    3c14:	80 81       	ld	r24, Z
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	8c 93       	st	X, r24
						login_mode = NO_MODE;//set the mode as not logged in
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	ed 51       	subi	r30, 0x1D	; 29
    3c1e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c20:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3c22:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong Pass");
    3c26:	8e e4       	ldi	r24, 0x4E	; 78
    3c28:	91 e0       	ldi	r25, 0x01	; 1
    3c2a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    3c2e:	82 e0       	ldi	r24, 0x02	; 2
    3c30:	61 e0       	ldi	r22, 0x01	; 1
    3c32:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
    3c36:	89 e5       	ldi	r24, 0x59	; 89
    3c38:	91 e0       	ldi	r25, 0x01	; 1
    3c3a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e1 52       	subi	r30, 0x21	; 33
    3c42:	fe 4f       	sbci	r31, 0xFE	; 254
    3c44:	93 e3       	ldi	r25, 0x33	; 51
    3c46:	80 81       	ld	r24, Z
    3c48:	f9 2f       	mov	r31, r25
    3c4a:	f8 1b       	sub	r31, r24
    3c4c:	8f 2f       	mov	r24, r31
    3c4e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    3c52:	fe 01       	movw	r30, r28
    3c54:	e9 5f       	subi	r30, 0xF9	; 249
    3c56:	fe 4f       	sbci	r31, 0xFE	; 254
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	aa e7       	ldi	r26, 0x7A	; 122
    3c5e:	b4 e4       	ldi	r27, 0x44	; 68
    3c60:	80 83       	st	Z, r24
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	a2 83       	std	Z+2, r26	; 0x02
    3c66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c68:	8e 01       	movw	r16, r28
    3c6a:	0d 5f       	subi	r16, 0xFD	; 253
    3c6c:	1e 4f       	sbci	r17, 0xFE	; 254
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e9 5f       	subi	r30, 0xF9	; 249
    3c72:	fe 4f       	sbci	r31, 0xFE	; 254
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	4a ef       	ldi	r20, 0xFA	; 250
    3c82:	54 e4       	ldi	r21, 0x44	; 68
    3c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	80 83       	st	Z, r24
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	a2 83       	std	Z+2, r26	; 0x02
    3c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c96:	fe 01       	movw	r30, r28
    3c98:	ed 5f       	subi	r30, 0xFD	; 253
    3c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	40 e8       	ldi	r20, 0x80	; 128
    3caa:	5f e3       	ldi	r21, 0x3F	; 63
    3cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cb0:	88 23       	and	r24, r24
    3cb2:	44 f4       	brge	.+16     	; 0x3cc4 <main+0x1b68>
		__ticks = 1;
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	ef 5f       	subi	r30, 0xFF	; 255
    3cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	80 83       	st	Z, r24
    3cc2:	64 c0       	rjmp	.+200    	; 0x3d8c <main+0x1c30>
	else if (__tmp > 65535)
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ed 5f       	subi	r30, 0xFD	; 253
    3cc8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cca:	60 81       	ld	r22, Z
    3ccc:	71 81       	ldd	r23, Z+1	; 0x01
    3cce:	82 81       	ldd	r24, Z+2	; 0x02
    3cd0:	93 81       	ldd	r25, Z+3	; 0x03
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	0c f0       	brlt	.+2      	; 0x3ce4 <main+0x1b88>
    3ce2:	43 c0       	rjmp	.+134    	; 0x3d6a <main+0x1c0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e9 5f       	subi	r30, 0xF9	; 249
    3ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e2       	ldi	r20, 0x20	; 32
    3cf8:	51 e4       	ldi	r21, 0x41	; 65
    3cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8e 01       	movw	r16, r28
    3d04:	0f 5f       	subi	r16, 0xFF	; 255
    3d06:	1e 4f       	sbci	r17, 0xFE	; 254
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	f8 01       	movw	r30, r16
    3d16:	91 83       	std	Z+1, r25	; 0x01
    3d18:	80 83       	st	Z, r24
    3d1a:	1f c0       	rjmp	.+62     	; 0x3d5a <main+0x1bfe>
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e1 50       	subi	r30, 0x01	; 1
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	88 ec       	ldi	r24, 0xC8	; 200
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	91 83       	std	Z+1, r25	; 0x01
    3d28:	80 83       	st	Z, r24
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e1 50       	subi	r30, 0x01	; 1
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	80 81       	ld	r24, Z
    3d32:	91 81       	ldd	r25, Z+1	; 0x01
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <main+0x1bd8>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e1 50       	subi	r30, 0x01	; 1
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d42:	de 01       	movw	r26, r28
    3d44:	af 5f       	subi	r26, 0xFF	; 255
    3d46:	be 4f       	sbci	r27, 0xFE	; 254
    3d48:	fe 01       	movw	r30, r28
    3d4a:	ef 5f       	subi	r30, 0xFF	; 255
    3d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d4e:	80 81       	ld	r24, Z
    3d50:	91 81       	ldd	r25, Z+1	; 0x01
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	11 96       	adiw	r26, 0x01	; 1
    3d56:	9c 93       	st	X, r25
    3d58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ef 5f       	subi	r30, 0xFF	; 255
    3d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	00 97       	sbiw	r24, 0x00	; 0
    3d66:	d1 f6       	brne	.-76     	; 0x3d1c <main+0x1bc0>
    3d68:	27 c0       	rjmp	.+78     	; 0x3db8 <main+0x1c5c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6a:	8e 01       	movw	r16, r28
    3d6c:	0f 5f       	subi	r16, 0xFF	; 255
    3d6e:	1e 4f       	sbci	r17, 0xFE	; 254
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 5f       	subi	r30, 0xFD	; 253
    3d74:	fe 4f       	sbci	r31, 0xFE	; 254
    3d76:	60 81       	ld	r22, Z
    3d78:	71 81       	ldd	r23, Z+1	; 0x01
    3d7a:	82 81       	ldd	r24, Z+2	; 0x02
    3d7c:	93 81       	ldd	r25, Z+3	; 0x03
    3d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	f8 01       	movw	r30, r16
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
    3d8c:	de 01       	movw	r26, r28
    3d8e:	a3 50       	subi	r26, 0x03	; 3
    3d90:	bf 4f       	sbci	r27, 0xFF	; 255
    3d92:	fe 01       	movw	r30, r28
    3d94:	ef 5f       	subi	r30, 0xFF	; 255
    3d96:	fe 4f       	sbci	r31, 0xFE	; 254
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	8d 93       	st	X+, r24
    3d9e:	9c 93       	st	X, r25
    3da0:	fe 01       	movw	r30, r28
    3da2:	e3 50       	subi	r30, 0x03	; 3
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	01 97       	sbiw	r24, 0x01	; 1
    3dac:	f1 f7       	brne	.-4      	; 0x3daa <main+0x1c4e>
    3dae:	fe 01       	movw	r30, r28
    3db0:	e3 50       	subi	r30, 0x03	; 3
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	91 83       	std	Z+1, r25	; 0x01
    3db6:	80 83       	st	Z, r24
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3db8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e1 52       	subi	r30, 0x21	; 33
    3dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    3dc2:	80 81       	ld	r24, Z
    3dc4:	83 30       	cpi	r24, 0x03	; 3
    3dc6:	58 f0       	brcs	.+22     	; 0x3dde <main+0x1c82>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
    3dc8:	8a e0       	ldi	r24, 0x0A	; 10
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ee 51       	subi	r30, 0x1E	; 30
    3dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	80 83       	st	Z, r24
    3ddc:	5b c4       	rjmp	.+2230   	; 0x4694 <main+0x2538>
			
			switch(key_pressed)
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
    3dde:	fe 01       	movw	r30, r28
    3de0:	ed 51       	subi	r30, 0x1D	; 29
    3de2:	fe 4f       	sbci	r31, 0xFE	; 254
    3de4:	80 81       	ld	r24, Z
    3de6:	81 30       	cpi	r24, 0x01	; 1
    3de8:	09 f0       	breq	.+2      	; 0x3dec <main+0x1c90>
    3dea:	ad cb       	rjmp	.-2214   	; 0x3546 <main+0x13ea>
    3dec:	53 c4       	rjmp	.+2214   	; 0x4694 <main+0x2538>
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    3dee:	fe 01       	movw	r30, r28
    3df0:	ef 51       	subi	r30, 0x1F	; 31
    3df2:	fe 4f       	sbci	r31, 0xFE	; 254
    3df4:	8f ef       	ldi	r24, 0xFF	; 255
    3df6:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    3df8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Guest mode");
    3dfc:	85 e6       	ldi	r24, 0x65	; 101
    3dfe:	91 e0       	ldi	r25, 0x01	; 1
    3e00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	61 e0       	ldi	r22, 0x01	; 1
    3e08:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("Enter pass:");
    3e0c:	80 e7       	ldi	r24, 0x70	; 112
    3e0e:	91 e0       	ldi	r25, 0x01	; 1
    3e10:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    3e14:	fe 01       	movw	r30, r28
    3e16:	e7 50       	subi	r30, 0x07	; 7
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	a8 e4       	ldi	r26, 0x48	; 72
    3e20:	b3 e4       	ldi	r27, 0x43	; 67
    3e22:	80 83       	st	Z, r24
    3e24:	91 83       	std	Z+1, r25	; 0x01
    3e26:	a2 83       	std	Z+2, r26	; 0x02
    3e28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e2a:	8e 01       	movw	r16, r28
    3e2c:	0b 50       	subi	r16, 0x0B	; 11
    3e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e30:	fe 01       	movw	r30, r28
    3e32:	e7 50       	subi	r30, 0x07	; 7
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	4a ef       	ldi	r20, 0xFA	; 250
    3e44:	54 e4       	ldi	r21, 0x44	; 68
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	f8 01       	movw	r30, r16
    3e50:	80 83       	st	Z, r24
    3e52:	91 83       	std	Z+1, r25	; 0x01
    3e54:	a2 83       	std	Z+2, r26	; 0x02
    3e56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e58:	fe 01       	movw	r30, r28
    3e5a:	eb 50       	subi	r30, 0x0B	; 11
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	60 81       	ld	r22, Z
    3e60:	71 81       	ldd	r23, Z+1	; 0x01
    3e62:	82 81       	ldd	r24, Z+2	; 0x02
    3e64:	93 81       	ldd	r25, Z+3	; 0x03
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e8       	ldi	r20, 0x80	; 128
    3e6c:	5f e3       	ldi	r21, 0x3F	; 63
    3e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e72:	88 23       	and	r24, r24
    3e74:	44 f4       	brge	.+16     	; 0x3e86 <main+0x1d2a>
		__ticks = 1;
    3e76:	fe 01       	movw	r30, r28
    3e78:	ed 50       	subi	r30, 0x0D	; 13
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	91 83       	std	Z+1, r25	; 0x01
    3e82:	80 83       	st	Z, r24
    3e84:	64 c0       	rjmp	.+200    	; 0x3f4e <main+0x1df2>
	else if (__tmp > 65535)
    3e86:	fe 01       	movw	r30, r28
    3e88:	eb 50       	subi	r30, 0x0B	; 11
    3e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8c:	60 81       	ld	r22, Z
    3e8e:	71 81       	ldd	r23, Z+1	; 0x01
    3e90:	82 81       	ldd	r24, Z+2	; 0x02
    3e92:	93 81       	ldd	r25, Z+3	; 0x03
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	3f ef       	ldi	r19, 0xFF	; 255
    3e98:	4f e7       	ldi	r20, 0x7F	; 127
    3e9a:	57 e4       	ldi	r21, 0x47	; 71
    3e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ea0:	18 16       	cp	r1, r24
    3ea2:	0c f0       	brlt	.+2      	; 0x3ea6 <main+0x1d4a>
    3ea4:	43 c0       	rjmp	.+134    	; 0x3f2c <main+0x1dd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e7 50       	subi	r30, 0x07	; 7
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e2       	ldi	r20, 0x20	; 32
    3eba:	51 e4       	ldi	r21, 0x41	; 65
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	8e 01       	movw	r16, r28
    3ec6:	0d 50       	subi	r16, 0x0D	; 13
    3ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	f8 01       	movw	r30, r16
    3ed8:	91 83       	std	Z+1, r25	; 0x01
    3eda:	80 83       	st	Z, r24
    3edc:	1f c0       	rjmp	.+62     	; 0x3f1c <main+0x1dc0>
    3ede:	fe 01       	movw	r30, r28
    3ee0:	ef 50       	subi	r30, 0x0F	; 15
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	88 ec       	ldi	r24, 0xC8	; 200
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
    3eec:	fe 01       	movw	r30, r28
    3eee:	ef 50       	subi	r30, 0x0F	; 15
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 81       	ld	r24, Z
    3ef4:	91 81       	ldd	r25, Z+1	; 0x01
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	f1 f7       	brne	.-4      	; 0x3ef6 <main+0x1d9a>
    3efa:	fe 01       	movw	r30, r28
    3efc:	ef 50       	subi	r30, 0x0F	; 15
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	91 83       	std	Z+1, r25	; 0x01
    3f02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f04:	de 01       	movw	r26, r28
    3f06:	ad 50       	subi	r26, 0x0D	; 13
    3f08:	bf 4f       	sbci	r27, 0xFF	; 255
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	ed 50       	subi	r30, 0x0D	; 13
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	80 81       	ld	r24, Z
    3f12:	91 81       	ldd	r25, Z+1	; 0x01
    3f14:	01 97       	sbiw	r24, 0x01	; 1
    3f16:	11 96       	adiw	r26, 0x01	; 1
    3f18:	9c 93       	st	X, r25
    3f1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	ed 50       	subi	r30, 0x0D	; 13
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	80 81       	ld	r24, Z
    3f24:	91 81       	ldd	r25, Z+1	; 0x01
    3f26:	00 97       	sbiw	r24, 0x00	; 0
    3f28:	d1 f6       	brne	.-76     	; 0x3ede <main+0x1d82>
    3f2a:	28 c0       	rjmp	.+80     	; 0x3f7c <main+0x1e20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f2c:	8e 01       	movw	r16, r28
    3f2e:	0d 50       	subi	r16, 0x0D	; 13
    3f30:	1f 4f       	sbci	r17, 0xFF	; 255
    3f32:	fe 01       	movw	r30, r28
    3f34:	eb 50       	subi	r30, 0x0B	; 11
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	60 81       	ld	r22, Z
    3f3a:	71 81       	ldd	r23, Z+1	; 0x01
    3f3c:	82 81       	ldd	r24, Z+2	; 0x02
    3f3e:	93 81       	ldd	r25, Z+3	; 0x03
    3f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	f8 01       	movw	r30, r16
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	80 83       	st	Z, r24
    3f4e:	de 01       	movw	r26, r28
    3f50:	a1 51       	subi	r26, 0x11	; 17
    3f52:	bf 4f       	sbci	r27, 0xFF	; 255
    3f54:	fe 01       	movw	r30, r28
    3f56:	ed 50       	subi	r30, 0x0D	; 13
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	80 81       	ld	r24, Z
    3f5c:	91 81       	ldd	r25, Z+1	; 0x01
    3f5e:	11 96       	adiw	r26, 0x01	; 1
    3f60:	9c 93       	st	X, r25
    3f62:	8e 93       	st	-X, r24
    3f64:	fe 01       	movw	r30, r28
    3f66:	e1 51       	subi	r30, 0x11	; 17
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	80 81       	ld	r24, Z
    3f6c:	91 81       	ldd	r25, Z+1	; 0x01
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <main+0x1e12>
    3f72:	fe 01       	movw	r30, r28
    3f74:	e1 51       	subi	r30, 0x11	; 17
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e3 52       	subi	r30, 0x23	; 35
    3f80:	fe 4f       	sbci	r31, 0xFE	; 254
    3f82:	10 82       	st	Z, r1
    3f84:	a4 c1       	rjmp	.+840    	; 0x42ce <main+0x2172>
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    3f86:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    3f8a:	fe 01       	movw	r30, r28
    3f8c:	ef 51       	subi	r30, 0x1F	; 31
    3f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f90:	80 83       	st	Z, r24
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    3f92:	fe 01       	movw	r30, r28
    3f94:	ef 51       	subi	r30, 0x1F	; 31
    3f96:	fe 4f       	sbci	r31, 0xFE	; 254
    3f98:	80 81       	ld	r24, Z
    3f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3f9c:	a1 f3       	breq	.-24     	; 0x3f86 <main+0x1e2a>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e3 52       	subi	r30, 0x23	; 35
    3fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa4:	80 81       	ld	r24, Z
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	ce 01       	movw	r24, r28
    3fac:	85 51       	subi	r24, 0x15	; 21
    3fae:	9e 4f       	sbci	r25, 0xFE	; 254
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	a2 0f       	add	r26, r18
    3fb4:	b3 1f       	adc	r27, r19
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	ef 51       	subi	r30, 0x1F	; 31
    3fba:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbc:	80 81       	ld	r24, Z
    3fbe:	8c 93       	st	X, r24
						LCD_vSend_char(key_pressed);//print the entered character
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	ef 51       	subi	r30, 0x1F	; 31
    3fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc6:	80 81       	ld	r24, Z
    3fc8:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e5 51       	subi	r30, 0x15	; 21
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	a6 e9       	ldi	r26, 0x96	; 150
    3fd8:	b3 e4       	ldi	r27, 0x43	; 67
    3fda:	80 83       	st	Z, r24
    3fdc:	91 83       	std	Z+1, r25	; 0x01
    3fde:	a2 83       	std	Z+2, r26	; 0x02
    3fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe2:	8e 01       	movw	r16, r28
    3fe4:	09 51       	subi	r16, 0x19	; 25
    3fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe8:	fe 01       	movw	r30, r28
    3fea:	e5 51       	subi	r30, 0x15	; 21
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	60 81       	ld	r22, Z
    3ff0:	71 81       	ldd	r23, Z+1	; 0x01
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	93 81       	ldd	r25, Z+3	; 0x03
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	4a ef       	ldi	r20, 0xFA	; 250
    3ffc:	54 e4       	ldi	r21, 0x44	; 68
    3ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	f8 01       	movw	r30, r16
    4008:	80 83       	st	Z, r24
    400a:	91 83       	std	Z+1, r25	; 0x01
    400c:	a2 83       	std	Z+2, r26	; 0x02
    400e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4010:	fe 01       	movw	r30, r28
    4012:	e9 51       	subi	r30, 0x19	; 25
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	93 81       	ldd	r25, Z+3	; 0x03
    401e:	20 e0       	ldi	r18, 0x00	; 0
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	40 e8       	ldi	r20, 0x80	; 128
    4024:	5f e3       	ldi	r21, 0x3F	; 63
    4026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    402a:	88 23       	and	r24, r24
    402c:	44 f4       	brge	.+16     	; 0x403e <main+0x1ee2>
		__ticks = 1;
    402e:	fe 01       	movw	r30, r28
    4030:	eb 51       	subi	r30, 0x1B	; 27
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	91 83       	std	Z+1, r25	; 0x01
    403a:	80 83       	st	Z, r24
    403c:	64 c0       	rjmp	.+200    	; 0x4106 <main+0x1faa>
	else if (__tmp > 65535)
    403e:	fe 01       	movw	r30, r28
    4040:	e9 51       	subi	r30, 0x19	; 25
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	60 81       	ld	r22, Z
    4046:	71 81       	ldd	r23, Z+1	; 0x01
    4048:	82 81       	ldd	r24, Z+2	; 0x02
    404a:	93 81       	ldd	r25, Z+3	; 0x03
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	3f ef       	ldi	r19, 0xFF	; 255
    4050:	4f e7       	ldi	r20, 0x7F	; 127
    4052:	57 e4       	ldi	r21, 0x47	; 71
    4054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4058:	18 16       	cp	r1, r24
    405a:	0c f0       	brlt	.+2      	; 0x405e <main+0x1f02>
    405c:	43 c0       	rjmp	.+134    	; 0x40e4 <main+0x1f88>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405e:	fe 01       	movw	r30, r28
    4060:	e5 51       	subi	r30, 0x15	; 21
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	93 81       	ldd	r25, Z+3	; 0x03
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e2       	ldi	r20, 0x20	; 32
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	8e 01       	movw	r16, r28
    407e:	0b 51       	subi	r16, 0x1B	; 27
    4080:	1f 4f       	sbci	r17, 0xFF	; 255
    4082:	bc 01       	movw	r22, r24
    4084:	cd 01       	movw	r24, r26
    4086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408a:	dc 01       	movw	r26, r24
    408c:	cb 01       	movw	r24, r22
    408e:	f8 01       	movw	r30, r16
    4090:	91 83       	std	Z+1, r25	; 0x01
    4092:	80 83       	st	Z, r24
    4094:	1f c0       	rjmp	.+62     	; 0x40d4 <main+0x1f78>
    4096:	fe 01       	movw	r30, r28
    4098:	ed 51       	subi	r30, 0x1D	; 29
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	88 ec       	ldi	r24, 0xC8	; 200
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	80 83       	st	Z, r24
    40a4:	fe 01       	movw	r30, r28
    40a6:	ed 51       	subi	r30, 0x1D	; 29
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	80 81       	ld	r24, Z
    40ac:	91 81       	ldd	r25, Z+1	; 0x01
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	f1 f7       	brne	.-4      	; 0x40ae <main+0x1f52>
    40b2:	fe 01       	movw	r30, r28
    40b4:	ed 51       	subi	r30, 0x1D	; 29
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	91 83       	std	Z+1, r25	; 0x01
    40ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40bc:	de 01       	movw	r26, r28
    40be:	ab 51       	subi	r26, 0x1B	; 27
    40c0:	bf 4f       	sbci	r27, 0xFF	; 255
    40c2:	fe 01       	movw	r30, r28
    40c4:	eb 51       	subi	r30, 0x1B	; 27
    40c6:	ff 4f       	sbci	r31, 0xFF	; 255
    40c8:	80 81       	ld	r24, Z
    40ca:	91 81       	ldd	r25, Z+1	; 0x01
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	11 96       	adiw	r26, 0x01	; 1
    40d0:	9c 93       	st	X, r25
    40d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d4:	fe 01       	movw	r30, r28
    40d6:	eb 51       	subi	r30, 0x1B	; 27
    40d8:	ff 4f       	sbci	r31, 0xFF	; 255
    40da:	80 81       	ld	r24, Z
    40dc:	91 81       	ldd	r25, Z+1	; 0x01
    40de:	00 97       	sbiw	r24, 0x00	; 0
    40e0:	d1 f6       	brne	.-76     	; 0x4096 <main+0x1f3a>
    40e2:	27 c0       	rjmp	.+78     	; 0x4132 <main+0x1fd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e4:	8e 01       	movw	r16, r28
    40e6:	0b 51       	subi	r16, 0x1B	; 27
    40e8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ea:	fe 01       	movw	r30, r28
    40ec:	e9 51       	subi	r30, 0x19	; 25
    40ee:	ff 4f       	sbci	r31, 0xFF	; 255
    40f0:	60 81       	ld	r22, Z
    40f2:	71 81       	ldd	r23, Z+1	; 0x01
    40f4:	82 81       	ldd	r24, Z+2	; 0x02
    40f6:	93 81       	ldd	r25, Z+3	; 0x03
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	f8 01       	movw	r30, r16
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	80 83       	st	Z, r24
    4106:	de 01       	movw	r26, r28
    4108:	af 51       	subi	r26, 0x1F	; 31
    410a:	bf 4f       	sbci	r27, 0xFF	; 255
    410c:	fe 01       	movw	r30, r28
    410e:	eb 51       	subi	r30, 0x1B	; 27
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	80 81       	ld	r24, Z
    4114:	91 81       	ldd	r25, Z+1	; 0x01
    4116:	8d 93       	st	X+, r24
    4118:	9c 93       	st	X, r25
    411a:	fe 01       	movw	r30, r28
    411c:	ef 51       	subi	r30, 0x1F	; 31
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	f1 f7       	brne	.-4      	; 0x4124 <main+0x1fc8>
    4128:	fe 01       	movw	r30, r28
    412a:	ef 51       	subi	r30, 0x1F	; 31
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	80 83       	st	Z, r24
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
    4132:	fe 01       	movw	r30, r28
    4134:	e3 52       	subi	r30, 0x23	; 35
    4136:	fe 4f       	sbci	r31, 0xFE	; 254
    4138:	80 81       	ld	r24, Z
    413a:	98 2f       	mov	r25, r24
    413c:	94 5f       	subi	r25, 0xF4	; 244
    413e:	82 e0       	ldi	r24, 0x02	; 2
    4140:	69 2f       	mov	r22, r25
    4142:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
    4146:	8a e2       	ldi	r24, 0x2A	; 42
    4148:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    414c:	fe 01       	movw	r30, r28
    414e:	e3 52       	subi	r30, 0x23	; 35
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	a8 ec       	ldi	r26, 0xC8	; 200
    4158:	b2 e4       	ldi	r27, 0x42	; 66
    415a:	80 83       	st	Z, r24
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	a2 83       	std	Z+2, r26	; 0x02
    4160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4162:	8e 01       	movw	r16, r28
    4164:	07 52       	subi	r16, 0x27	; 39
    4166:	1f 4f       	sbci	r17, 0xFF	; 255
    4168:	fe 01       	movw	r30, r28
    416a:	e3 52       	subi	r30, 0x23	; 35
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	60 81       	ld	r22, Z
    4170:	71 81       	ldd	r23, Z+1	; 0x01
    4172:	82 81       	ldd	r24, Z+2	; 0x02
    4174:	93 81       	ldd	r25, Z+3	; 0x03
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	4a ef       	ldi	r20, 0xFA	; 250
    417c:	54 e4       	ldi	r21, 0x44	; 68
    417e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	f8 01       	movw	r30, r16
    4188:	80 83       	st	Z, r24
    418a:	91 83       	std	Z+1, r25	; 0x01
    418c:	a2 83       	std	Z+2, r26	; 0x02
    418e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4190:	fe 01       	movw	r30, r28
    4192:	e7 52       	subi	r30, 0x27	; 39
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	60 81       	ld	r22, Z
    4198:	71 81       	ldd	r23, Z+1	; 0x01
    419a:	82 81       	ldd	r24, Z+2	; 0x02
    419c:	93 81       	ldd	r25, Z+3	; 0x03
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	40 e8       	ldi	r20, 0x80	; 128
    41a4:	5f e3       	ldi	r21, 0x3F	; 63
    41a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41aa:	88 23       	and	r24, r24
    41ac:	44 f4       	brge	.+16     	; 0x41be <main+0x2062>
		__ticks = 1;
    41ae:	fe 01       	movw	r30, r28
    41b0:	e9 52       	subi	r30, 0x29	; 41
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	90 e0       	ldi	r25, 0x00	; 0
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	80 83       	st	Z, r24
    41bc:	64 c0       	rjmp	.+200    	; 0x4286 <main+0x212a>
	else if (__tmp > 65535)
    41be:	fe 01       	movw	r30, r28
    41c0:	e7 52       	subi	r30, 0x27	; 39
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	60 81       	ld	r22, Z
    41c6:	71 81       	ldd	r23, Z+1	; 0x01
    41c8:	82 81       	ldd	r24, Z+2	; 0x02
    41ca:	93 81       	ldd	r25, Z+3	; 0x03
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	3f ef       	ldi	r19, 0xFF	; 255
    41d0:	4f e7       	ldi	r20, 0x7F	; 127
    41d2:	57 e4       	ldi	r21, 0x47	; 71
    41d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41d8:	18 16       	cp	r1, r24
    41da:	0c f0       	brlt	.+2      	; 0x41de <main+0x2082>
    41dc:	43 c0       	rjmp	.+134    	; 0x4264 <main+0x2108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41de:	fe 01       	movw	r30, r28
    41e0:	e3 52       	subi	r30, 0x23	; 35
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	60 81       	ld	r22, Z
    41e6:	71 81       	ldd	r23, Z+1	; 0x01
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e2       	ldi	r20, 0x20	; 32
    41f2:	51 e4       	ldi	r21, 0x41	; 65
    41f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	8e 01       	movw	r16, r28
    41fe:	09 52       	subi	r16, 0x29	; 41
    4200:	1f 4f       	sbci	r17, 0xFF	; 255
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	f8 01       	movw	r30, r16
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	80 83       	st	Z, r24
    4214:	1f c0       	rjmp	.+62     	; 0x4254 <main+0x20f8>
    4216:	fe 01       	movw	r30, r28
    4218:	eb 52       	subi	r30, 0x2B	; 43
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	88 ec       	ldi	r24, 0xC8	; 200
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
    4224:	fe 01       	movw	r30, r28
    4226:	eb 52       	subi	r30, 0x2B	; 43
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	80 81       	ld	r24, Z
    422c:	91 81       	ldd	r25, Z+1	; 0x01
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <main+0x20d2>
    4232:	fe 01       	movw	r30, r28
    4234:	eb 52       	subi	r30, 0x2B	; 43
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	91 83       	std	Z+1, r25	; 0x01
    423a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	de 01       	movw	r26, r28
    423e:	a9 52       	subi	r26, 0x29	; 41
    4240:	bf 4f       	sbci	r27, 0xFF	; 255
    4242:	fe 01       	movw	r30, r28
    4244:	e9 52       	subi	r30, 0x29	; 41
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	80 81       	ld	r24, Z
    424a:	91 81       	ldd	r25, Z+1	; 0x01
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	11 96       	adiw	r26, 0x01	; 1
    4250:	9c 93       	st	X, r25
    4252:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4254:	fe 01       	movw	r30, r28
    4256:	e9 52       	subi	r30, 0x29	; 41
    4258:	ff 4f       	sbci	r31, 0xFF	; 255
    425a:	80 81       	ld	r24, Z
    425c:	91 81       	ldd	r25, Z+1	; 0x01
    425e:	00 97       	sbiw	r24, 0x00	; 0
    4260:	d1 f6       	brne	.-76     	; 0x4216 <main+0x20ba>
    4262:	27 c0       	rjmp	.+78     	; 0x42b2 <main+0x2156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4264:	8e 01       	movw	r16, r28
    4266:	09 52       	subi	r16, 0x29	; 41
    4268:	1f 4f       	sbci	r17, 0xFF	; 255
    426a:	fe 01       	movw	r30, r28
    426c:	e7 52       	subi	r30, 0x27	; 39
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	f8 01       	movw	r30, r16
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
    4286:	de 01       	movw	r26, r28
    4288:	ad 52       	subi	r26, 0x2D	; 45
    428a:	bf 4f       	sbci	r27, 0xFF	; 255
    428c:	fe 01       	movw	r30, r28
    428e:	e9 52       	subi	r30, 0x29	; 41
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	80 81       	ld	r24, Z
    4294:	91 81       	ldd	r25, Z+1	; 0x01
    4296:	8d 93       	st	X+, r24
    4298:	9c 93       	st	X, r25
    429a:	fe 01       	movw	r30, r28
    429c:	ed 52       	subi	r30, 0x2D	; 45
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 81       	ld	r24, Z
    42a2:	91 81       	ldd	r25, Z+1	; 0x01
    42a4:	01 97       	sbiw	r24, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <main+0x2148>
    42a8:	fe 01       	movw	r30, r28
    42aa:	ed 52       	subi	r30, 0x2D	; 45
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	91 83       	std	Z+1, r25	; 0x01
    42b0:	80 83       	st	Z, r24
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
    42b2:	de 01       	movw	r26, r28
    42b4:	a3 52       	subi	r26, 0x23	; 35
    42b6:	be 4f       	sbci	r27, 0xFE	; 254
    42b8:	fe 01       	movw	r30, r28
    42ba:	e3 52       	subi	r30, 0x23	; 35
    42bc:	fe 4f       	sbci	r31, 0xFE	; 254
    42be:	80 81       	ld	r24, Z
    42c0:	8f 5f       	subi	r24, 0xFF	; 255
    42c2:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
    42c4:	fe 01       	movw	r30, r28
    42c6:	ef 51       	subi	r30, 0x1F	; 31
    42c8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ca:	8f ef       	ldi	r24, 0xFF	; 255
    42cc:	80 83       	st	Z, r24
					LCD_vSend_string("Guest mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
    42ce:	fe 01       	movw	r30, r28
    42d0:	e3 52       	subi	r30, 0x23	; 35
    42d2:	fe 4f       	sbci	r31, 0xFE	; 254
    42d4:	80 81       	ld	r24, Z
    42d6:	84 30       	cpi	r24, 0x04	; 4
    42d8:	08 f4       	brcc	.+2      	; 0x42dc <main+0x2180>
    42da:	5b ce       	rjmp	.-842    	; 0x3f92 <main+0x1e36>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
    42dc:	9e 01       	movw	r18, r28
    42de:	21 51       	subi	r18, 0x11	; 17
    42e0:	3e 4f       	sbci	r19, 0xFE	; 254
    42e2:	86 e0       	ldi	r24, 0x06	; 6
    42e4:	91 e0       	ldi	r25, 0x01	; 1
    42e6:	b9 01       	movw	r22, r18
    42e8:	44 e0       	ldi	r20, 0x04	; 4
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	0e 94 9d 0b 	call	0x173a	; 0x173a <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
    42f0:	ce 01       	movw	r24, r28
    42f2:	85 51       	subi	r24, 0x15	; 21
    42f4:	9e 4f       	sbci	r25, 0xFE	; 254
    42f6:	9e 01       	movw	r18, r28
    42f8:	21 51       	subi	r18, 0x11	; 17
    42fa:	3e 4f       	sbci	r19, 0xFE	; 254
    42fc:	b9 01       	movw	r22, r18
    42fe:	44 e0       	ldi	r20, 0x04	; 4
    4300:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <ui8ComparePass>
    4304:	81 30       	cpi	r24, 0x01	; 1
    4306:	09 f0       	breq	.+2      	; 0x430a <main+0x21ae>
    4308:	d3 c0       	rjmp	.+422    	; 0x44b0 <main+0x2354>
					{
						login_mode = GUEST;
    430a:	fe 01       	movw	r30, r28
    430c:	ed 51       	subi	r30, 0x1D	; 29
    430e:	fe 4f       	sbci	r31, 0xFE	; 254
    4310:	82 e0       	ldi	r24, 0x02	; 2
    4312:	80 83       	st	Z, r24
						pass_tries_count=0;//clear the counter of wrong tries
    4314:	fe 01       	movw	r30, r28
    4316:	e1 52       	subi	r30, 0x21	; 33
    4318:	fe 4f       	sbci	r31, 0xFE	; 254
    431a:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    431c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
    4320:	83 e4       	ldi	r24, 0x43	; 67
    4322:	91 e0       	ldi	r25, 0x01	; 1
    4324:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    4328:	82 e0       	ldi	r24, 0x02	; 2
    432a:	61 e0       	ldi	r22, 0x01	; 1
    432c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Guest mode");
    4330:	85 e6       	ldi	r24, 0x65	; 101
    4332:	91 e0       	ldi	r25, 0x01	; 1
    4334:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4338:	fe 01       	movw	r30, r28
    433a:	e1 53       	subi	r30, 0x31	; 49
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	aa ef       	ldi	r26, 0xFA	; 250
    4344:	b3 e4       	ldi	r27, 0x43	; 67
    4346:	80 83       	st	Z, r24
    4348:	91 83       	std	Z+1, r25	; 0x01
    434a:	a2 83       	std	Z+2, r26	; 0x02
    434c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    434e:	8e 01       	movw	r16, r28
    4350:	05 53       	subi	r16, 0x35	; 53
    4352:	1f 4f       	sbci	r17, 0xFF	; 255
    4354:	fe 01       	movw	r30, r28
    4356:	e1 53       	subi	r30, 0x31	; 49
    4358:	ff 4f       	sbci	r31, 0xFF	; 255
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	4a ef       	ldi	r20, 0xFA	; 250
    4368:	54 e4       	ldi	r21, 0x44	; 68
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	f8 01       	movw	r30, r16
    4374:	80 83       	st	Z, r24
    4376:	91 83       	std	Z+1, r25	; 0x01
    4378:	a2 83       	std	Z+2, r26	; 0x02
    437a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    437c:	fe 01       	movw	r30, r28
    437e:	e5 53       	subi	r30, 0x35	; 53
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	60 81       	ld	r22, Z
    4384:	71 81       	ldd	r23, Z+1	; 0x01
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	40 e8       	ldi	r20, 0x80	; 128
    4390:	5f e3       	ldi	r21, 0x3F	; 63
    4392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4396:	88 23       	and	r24, r24
    4398:	44 f4       	brge	.+16     	; 0x43aa <main+0x224e>
		__ticks = 1;
    439a:	fe 01       	movw	r30, r28
    439c:	e7 53       	subi	r30, 0x37	; 55
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	91 83       	std	Z+1, r25	; 0x01
    43a6:	80 83       	st	Z, r24
    43a8:	64 c0       	rjmp	.+200    	; 0x4472 <main+0x2316>
	else if (__tmp > 65535)
    43aa:	fe 01       	movw	r30, r28
    43ac:	e5 53       	subi	r30, 0x35	; 53
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	3f ef       	ldi	r19, 0xFF	; 255
    43bc:	4f e7       	ldi	r20, 0x7F	; 127
    43be:	57 e4       	ldi	r21, 0x47	; 71
    43c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c4:	18 16       	cp	r1, r24
    43c6:	0c f0       	brlt	.+2      	; 0x43ca <main+0x226e>
    43c8:	43 c0       	rjmp	.+134    	; 0x4450 <main+0x22f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ca:	fe 01       	movw	r30, r28
    43cc:	e1 53       	subi	r30, 0x31	; 49
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	60 81       	ld	r22, Z
    43d2:	71 81       	ldd	r23, Z+1	; 0x01
    43d4:	82 81       	ldd	r24, Z+2	; 0x02
    43d6:	93 81       	ldd	r25, Z+3	; 0x03
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	40 e2       	ldi	r20, 0x20	; 32
    43de:	51 e4       	ldi	r21, 0x41	; 65
    43e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	8e 01       	movw	r16, r28
    43ea:	07 53       	subi	r16, 0x37	; 55
    43ec:	1f 4f       	sbci	r17, 0xFF	; 255
    43ee:	bc 01       	movw	r22, r24
    43f0:	cd 01       	movw	r24, r26
    43f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f6:	dc 01       	movw	r26, r24
    43f8:	cb 01       	movw	r24, r22
    43fa:	f8 01       	movw	r30, r16
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	80 83       	st	Z, r24
    4400:	1f c0       	rjmp	.+62     	; 0x4440 <main+0x22e4>
    4402:	fe 01       	movw	r30, r28
    4404:	e9 53       	subi	r30, 0x39	; 57
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	88 ec       	ldi	r24, 0xC8	; 200
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	91 83       	std	Z+1, r25	; 0x01
    440e:	80 83       	st	Z, r24
    4410:	fe 01       	movw	r30, r28
    4412:	e9 53       	subi	r30, 0x39	; 57
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	80 81       	ld	r24, Z
    4418:	91 81       	ldd	r25, Z+1	; 0x01
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	f1 f7       	brne	.-4      	; 0x441a <main+0x22be>
    441e:	fe 01       	movw	r30, r28
    4420:	e9 53       	subi	r30, 0x39	; 57
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4428:	de 01       	movw	r26, r28
    442a:	a7 53       	subi	r26, 0x37	; 55
    442c:	bf 4f       	sbci	r27, 0xFF	; 255
    442e:	fe 01       	movw	r30, r28
    4430:	e7 53       	subi	r30, 0x37	; 55
    4432:	ff 4f       	sbci	r31, 0xFF	; 255
    4434:	80 81       	ld	r24, Z
    4436:	91 81       	ldd	r25, Z+1	; 0x01
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	11 96       	adiw	r26, 0x01	; 1
    443c:	9c 93       	st	X, r25
    443e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4440:	fe 01       	movw	r30, r28
    4442:	e7 53       	subi	r30, 0x37	; 55
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	80 81       	ld	r24, Z
    4448:	91 81       	ldd	r25, Z+1	; 0x01
    444a:	00 97       	sbiw	r24, 0x00	; 0
    444c:	d1 f6       	brne	.-76     	; 0x4402 <main+0x22a6>
    444e:	27 c0       	rjmp	.+78     	; 0x449e <main+0x2342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4450:	8e 01       	movw	r16, r28
    4452:	07 53       	subi	r16, 0x37	; 55
    4454:	1f 4f       	sbci	r17, 0xFF	; 255
    4456:	fe 01       	movw	r30, r28
    4458:	e5 53       	subi	r30, 0x35	; 53
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	60 81       	ld	r22, Z
    445e:	71 81       	ldd	r23, Z+1	; 0x01
    4460:	82 81       	ldd	r24, Z+2	; 0x02
    4462:	93 81       	ldd	r25, Z+3	; 0x03
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	f8 01       	movw	r30, r16
    446e:	91 83       	std	Z+1, r25	; 0x01
    4470:	80 83       	st	Z, r24
    4472:	de 01       	movw	r26, r28
    4474:	ab 53       	subi	r26, 0x3B	; 59
    4476:	bf 4f       	sbci	r27, 0xFF	; 255
    4478:	fe 01       	movw	r30, r28
    447a:	e7 53       	subi	r30, 0x37	; 55
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	91 81       	ldd	r25, Z+1	; 0x01
    4482:	8d 93       	st	X+, r24
    4484:	9c 93       	st	X, r25
    4486:	fe 01       	movw	r30, r28
    4488:	eb 53       	subi	r30, 0x3B	; 59
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	80 81       	ld	r24, Z
    448e:	91 81       	ldd	r25, Z+1	; 0x01
    4490:	01 97       	sbiw	r24, 0x01	; 1
    4492:	f1 f7       	brne	.-4      	; 0x4490 <main+0x2334>
    4494:	fe 01       	movw	r30, r28
    4496:	eb 53       	subi	r30, 0x3B	; 59
    4498:	ff 4f       	sbci	r31, 0xFF	; 255
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
    449e:	83 e4       	ldi	r24, 0x43	; 67
    44a0:	61 e0       	ldi	r22, 0x01	; 1
    44a2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LED_vTurnOn>
						timer0_initializeCTC();//start the counter of the session
    44a6:	0e 94 02 31 	call	0x6204	; 0x6204 <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    44aa:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
    44ae:	eb c0       	rjmp	.+470    	; 0x4686 <main+0x252a>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
    44b0:	de 01       	movw	r26, r28
    44b2:	a1 52       	subi	r26, 0x21	; 33
    44b4:	be 4f       	sbci	r27, 0xFE	; 254
    44b6:	fe 01       	movw	r30, r28
    44b8:	e1 52       	subi	r30, 0x21	; 33
    44ba:	fe 4f       	sbci	r31, 0xFE	; 254
    44bc:	80 81       	ld	r24, Z
    44be:	8f 5f       	subi	r24, 0xFF	; 255
    44c0:	8c 93       	st	X, r24
						login_mode = NO_MODE;//set the mode as not logged in
    44c2:	fe 01       	movw	r30, r28
    44c4:	ed 51       	subi	r30, 0x1D	; 29
    44c6:	fe 4f       	sbci	r31, 0xFE	; 254
    44c8:	10 82       	st	Z, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    44ca:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong pass");
    44ce:	8c e7       	ldi	r24, 0x7C	; 124
    44d0:	91 e0       	ldi	r25, 0x01	; 1
    44d2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_movecursor(2,1);
    44d6:	82 e0       	ldi	r24, 0x02	; 2
    44d8:	61 e0       	ldi	r22, 0x01	; 1
    44da:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
    44de:	89 e5       	ldi	r24, 0x59	; 89
    44e0:	91 e0       	ldi	r25, 0x01	; 1
    44e2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
    44e6:	fe 01       	movw	r30, r28
    44e8:	e1 52       	subi	r30, 0x21	; 33
    44ea:	fe 4f       	sbci	r31, 0xFE	; 254
    44ec:	93 e3       	ldi	r25, 0x33	; 51
    44ee:	80 81       	ld	r24, Z
    44f0:	f9 2f       	mov	r31, r25
    44f2:	f8 1b       	sub	r31, r24
    44f4:	8f 2f       	mov	r24, r31
    44f6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
    44fa:	fe 01       	movw	r30, r28
    44fc:	ef 53       	subi	r30, 0x3F	; 63
    44fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	aa e7       	ldi	r26, 0x7A	; 122
    4506:	b4 e4       	ldi	r27, 0x44	; 68
    4508:	80 83       	st	Z, r24
    450a:	91 83       	std	Z+1, r25	; 0x01
    450c:	a2 83       	std	Z+2, r26	; 0x02
    450e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4510:	8e 01       	movw	r16, r28
    4512:	03 54       	subi	r16, 0x43	; 67
    4514:	1f 4f       	sbci	r17, 0xFF	; 255
    4516:	fe 01       	movw	r30, r28
    4518:	ef 53       	subi	r30, 0x3F	; 63
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	60 81       	ld	r22, Z
    451e:	71 81       	ldd	r23, Z+1	; 0x01
    4520:	82 81       	ldd	r24, Z+2	; 0x02
    4522:	93 81       	ldd	r25, Z+3	; 0x03
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	4a ef       	ldi	r20, 0xFA	; 250
    452a:	54 e4       	ldi	r21, 0x44	; 68
    452c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4530:	dc 01       	movw	r26, r24
    4532:	cb 01       	movw	r24, r22
    4534:	f8 01       	movw	r30, r16
    4536:	80 83       	st	Z, r24
    4538:	91 83       	std	Z+1, r25	; 0x01
    453a:	a2 83       	std	Z+2, r26	; 0x02
    453c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    453e:	fe 01       	movw	r30, r28
    4540:	e3 54       	subi	r30, 0x43	; 67
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	60 81       	ld	r22, Z
    4546:	71 81       	ldd	r23, Z+1	; 0x01
    4548:	82 81       	ldd	r24, Z+2	; 0x02
    454a:	93 81       	ldd	r25, Z+3	; 0x03
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e8       	ldi	r20, 0x80	; 128
    4552:	5f e3       	ldi	r21, 0x3F	; 63
    4554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4558:	88 23       	and	r24, r24
    455a:	44 f4       	brge	.+16     	; 0x456c <main+0x2410>
		__ticks = 1;
    455c:	fe 01       	movw	r30, r28
    455e:	e5 54       	subi	r30, 0x45	; 69
    4560:	ff 4f       	sbci	r31, 0xFF	; 255
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	91 83       	std	Z+1, r25	; 0x01
    4568:	80 83       	st	Z, r24
    456a:	64 c0       	rjmp	.+200    	; 0x4634 <main+0x24d8>
	else if (__tmp > 65535)
    456c:	fe 01       	movw	r30, r28
    456e:	e3 54       	subi	r30, 0x43	; 67
    4570:	ff 4f       	sbci	r31, 0xFF	; 255
    4572:	60 81       	ld	r22, Z
    4574:	71 81       	ldd	r23, Z+1	; 0x01
    4576:	82 81       	ldd	r24, Z+2	; 0x02
    4578:	93 81       	ldd	r25, Z+3	; 0x03
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	3f ef       	ldi	r19, 0xFF	; 255
    457e:	4f e7       	ldi	r20, 0x7F	; 127
    4580:	57 e4       	ldi	r21, 0x47	; 71
    4582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4586:	18 16       	cp	r1, r24
    4588:	0c f0       	brlt	.+2      	; 0x458c <main+0x2430>
    458a:	43 c0       	rjmp	.+134    	; 0x4612 <main+0x24b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458c:	fe 01       	movw	r30, r28
    458e:	ef 53       	subi	r30, 0x3F	; 63
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	60 81       	ld	r22, Z
    4594:	71 81       	ldd	r23, Z+1	; 0x01
    4596:	82 81       	ldd	r24, Z+2	; 0x02
    4598:	93 81       	ldd	r25, Z+3	; 0x03
    459a:	20 e0       	ldi	r18, 0x00	; 0
    459c:	30 e0       	ldi	r19, 0x00	; 0
    459e:	40 e2       	ldi	r20, 0x20	; 32
    45a0:	51 e4       	ldi	r21, 0x41	; 65
    45a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a6:	dc 01       	movw	r26, r24
    45a8:	cb 01       	movw	r24, r22
    45aa:	8e 01       	movw	r16, r28
    45ac:	05 54       	subi	r16, 0x45	; 69
    45ae:	1f 4f       	sbci	r17, 0xFF	; 255
    45b0:	bc 01       	movw	r22, r24
    45b2:	cd 01       	movw	r24, r26
    45b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b8:	dc 01       	movw	r26, r24
    45ba:	cb 01       	movw	r24, r22
    45bc:	f8 01       	movw	r30, r16
    45be:	91 83       	std	Z+1, r25	; 0x01
    45c0:	80 83       	st	Z, r24
    45c2:	1f c0       	rjmp	.+62     	; 0x4602 <main+0x24a6>
    45c4:	fe 01       	movw	r30, r28
    45c6:	e7 54       	subi	r30, 0x47	; 71
    45c8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ca:	88 ec       	ldi	r24, 0xC8	; 200
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	91 83       	std	Z+1, r25	; 0x01
    45d0:	80 83       	st	Z, r24
    45d2:	fe 01       	movw	r30, r28
    45d4:	e7 54       	subi	r30, 0x47	; 71
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	f1 f7       	brne	.-4      	; 0x45dc <main+0x2480>
    45e0:	fe 01       	movw	r30, r28
    45e2:	e7 54       	subi	r30, 0x47	; 71
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	91 83       	std	Z+1, r25	; 0x01
    45e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ea:	de 01       	movw	r26, r28
    45ec:	a5 54       	subi	r26, 0x45	; 69
    45ee:	bf 4f       	sbci	r27, 0xFF	; 255
    45f0:	fe 01       	movw	r30, r28
    45f2:	e5 54       	subi	r30, 0x45	; 69
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	80 81       	ld	r24, Z
    45f8:	91 81       	ldd	r25, Z+1	; 0x01
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	11 96       	adiw	r26, 0x01	; 1
    45fe:	9c 93       	st	X, r25
    4600:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	fe 01       	movw	r30, r28
    4604:	e5 54       	subi	r30, 0x45	; 69
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	91 81       	ldd	r25, Z+1	; 0x01
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	d1 f6       	brne	.-76     	; 0x45c4 <main+0x2468>
    4610:	27 c0       	rjmp	.+78     	; 0x4660 <main+0x2504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4612:	8e 01       	movw	r16, r28
    4614:	05 54       	subi	r16, 0x45	; 69
    4616:	1f 4f       	sbci	r17, 0xFF	; 255
    4618:	fe 01       	movw	r30, r28
    461a:	e3 54       	subi	r30, 0x43	; 67
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	82 81       	ldd	r24, Z+2	; 0x02
    4624:	93 81       	ldd	r25, Z+3	; 0x03
    4626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    462a:	dc 01       	movw	r26, r24
    462c:	cb 01       	movw	r24, r22
    462e:	f8 01       	movw	r30, r16
    4630:	91 83       	std	Z+1, r25	; 0x01
    4632:	80 83       	st	Z, r24
    4634:	de 01       	movw	r26, r28
    4636:	a9 54       	subi	r26, 0x49	; 73
    4638:	bf 4f       	sbci	r27, 0xFF	; 255
    463a:	fe 01       	movw	r30, r28
    463c:	e5 54       	subi	r30, 0x45	; 69
    463e:	ff 4f       	sbci	r31, 0xFF	; 255
    4640:	80 81       	ld	r24, Z
    4642:	91 81       	ldd	r25, Z+1	; 0x01
    4644:	8d 93       	st	X+, r24
    4646:	9c 93       	st	X, r25
    4648:	fe 01       	movw	r30, r28
    464a:	e9 54       	subi	r30, 0x49	; 73
    464c:	ff 4f       	sbci	r31, 0xFF	; 255
    464e:	80 81       	ld	r24, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <main+0x24f6>
    4656:	fe 01       	movw	r30, r28
    4658:	e9 54       	subi	r30, 0x49	; 73
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	91 83       	std	Z+1, r25	; 0x01
    465e:	80 83       	st	Z, r24
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4660:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
    4664:	fe 01       	movw	r30, r28
    4666:	e1 52       	subi	r30, 0x21	; 33
    4668:	fe 4f       	sbci	r31, 0xFE	; 254
    466a:	80 81       	ld	r24, Z
    466c:	83 30       	cpi	r24, 0x03	; 3
    466e:	58 f0       	brcs	.+22     	; 0x4686 <main+0x252a>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
    4670:	8a e0       	ldi	r24, 0x0A	; 10
    4672:	91 e0       	ldi	r25, 0x01	; 1
    4674:	61 e0       	ldi	r22, 0x01	; 1
    4676:	0e 94 ed 0b 	call	0x17da	; 0x17da <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
    467a:	fe 01       	movw	r30, r28
    467c:	ee 51       	subi	r30, 0x1E	; 30
    467e:	fe 4f       	sbci	r31, 0xFE	; 254
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	80 83       	st	Z, r24
    4684:	07 c0       	rjmp	.+14     	; 0x4694 <main+0x2538>
					}
				}
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
    4686:	fe 01       	movw	r30, r28
    4688:	ed 51       	subi	r30, 0x1D	; 29
    468a:	fe 4f       	sbci	r31, 0xFE	; 254
    468c:	80 81       	ld	r24, Z
    468e:	82 30       	cpi	r24, 0x02	; 2
    4690:	09 f0       	breq	.+2      	; 0x4694 <main+0x2538>
    4692:	ad cb       	rjmp	.-2214   	; 0x3dee <main+0x1c92>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
    4694:	fe 01       	movw	r30, r28
    4696:	ed 51       	subi	r30, 0x1D	; 29
    4698:	fe 4f       	sbci	r31, 0xFE	; 254
    469a:	80 81       	ld	r24, Z
    469c:	88 23       	and	r24, r24
    469e:	11 f4       	brne	.+4      	; 0x46a4 <main+0x2548>
    46a0:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <main+0xfbc>
			}//end of switch
			
		}
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
    46a4:	fe 01       	movw	r30, r28
    46a6:	e2 52       	subi	r30, 0x22	; 34
    46a8:	fe 4f       	sbci	r31, 0xFE	; 254
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	80 83       	st	Z, r24
    46ae:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
    46b2:	fe 01       	movw	r30, r28
    46b4:	ef 51       	subi	r30, 0x1F	; 31
    46b6:	fe 4f       	sbci	r31, 0xFE	; 254
    46b8:	8f ef       	ldi	r24, 0xFF	; 255
    46ba:	80 83       	st	Z, r24
			switch (show_menu)
    46bc:	fe 01       	movw	r30, r28
    46be:	e2 52       	subi	r30, 0x22	; 34
    46c0:	fe 4f       	sbci	r31, 0xFE	; 254
    46c2:	80 81       	ld	r24, Z
    46c4:	28 2f       	mov	r18, r24
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	cd 50       	subi	r28, 0x0D	; 13
    46ca:	de 4f       	sbci	r29, 0xFE	; 254
    46cc:	39 83       	std	Y+1, r19	; 0x01
    46ce:	28 83       	st	Y, r18
    46d0:	c3 5f       	subi	r28, 0xF3	; 243
    46d2:	d1 40       	sbci	r29, 0x01	; 1
    46d4:	cd 50       	subi	r28, 0x0D	; 13
    46d6:	de 4f       	sbci	r29, 0xFE	; 254
    46d8:	88 81       	ld	r24, Y
    46da:	99 81       	ldd	r25, Y+1	; 0x01
    46dc:	c3 5f       	subi	r28, 0xF3	; 243
    46de:	d1 40       	sbci	r29, 0x01	; 1
    46e0:	85 30       	cpi	r24, 0x05	; 5
    46e2:	91 05       	cpc	r25, r1
    46e4:	09 f4       	brne	.+2      	; 0x46e8 <main+0x258c>
    46e6:	26 c6       	rjmp	.+3148   	; 0x5334 <main+0x31d8>
    46e8:	cd 50       	subi	r28, 0x0D	; 13
    46ea:	de 4f       	sbci	r29, 0xFE	; 254
    46ec:	e8 81       	ld	r30, Y
    46ee:	f9 81       	ldd	r31, Y+1	; 0x01
    46f0:	c3 5f       	subi	r28, 0xF3	; 243
    46f2:	d1 40       	sbci	r29, 0x01	; 1
    46f4:	e6 30       	cpi	r30, 0x06	; 6
    46f6:	f1 05       	cpc	r31, r1
    46f8:	ac f5       	brge	.+106    	; 0x4764 <main+0x2608>
    46fa:	cd 50       	subi	r28, 0x0D	; 13
    46fc:	de 4f       	sbci	r29, 0xFE	; 254
    46fe:	28 81       	ld	r18, Y
    4700:	39 81       	ldd	r19, Y+1	; 0x01
    4702:	c3 5f       	subi	r28, 0xF3	; 243
    4704:	d1 40       	sbci	r29, 0x01	; 1
    4706:	22 30       	cpi	r18, 0x02	; 2
    4708:	31 05       	cpc	r19, r1
    470a:	09 f4       	brne	.+2      	; 0x470e <main+0x25b2>
    470c:	65 c2       	rjmp	.+1226   	; 0x4bd8 <main+0x2a7c>
    470e:	cd 50       	subi	r28, 0x0D	; 13
    4710:	de 4f       	sbci	r29, 0xFE	; 254
    4712:	88 81       	ld	r24, Y
    4714:	99 81       	ldd	r25, Y+1	; 0x01
    4716:	c3 5f       	subi	r28, 0xF3	; 243
    4718:	d1 40       	sbci	r29, 0x01	; 1
    471a:	83 30       	cpi	r24, 0x03	; 3
    471c:	91 05       	cpc	r25, r1
    471e:	64 f4       	brge	.+24     	; 0x4738 <main+0x25dc>
    4720:	cd 50       	subi	r28, 0x0D	; 13
    4722:	de 4f       	sbci	r29, 0xFE	; 254
    4724:	e8 81       	ld	r30, Y
    4726:	f9 81       	ldd	r31, Y+1	; 0x01
    4728:	c3 5f       	subi	r28, 0xF3	; 243
    472a:	d1 40       	sbci	r29, 0x01	; 1
    472c:	e1 30       	cpi	r30, 0x01	; 1
    472e:	f1 05       	cpc	r31, r1
    4730:	09 f4       	brne	.+2      	; 0x4734 <main+0x25d8>
    4732:	57 c0       	rjmp	.+174    	; 0x47e2 <main+0x2686>
    4734:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
    4738:	cd 50       	subi	r28, 0x0D	; 13
    473a:	de 4f       	sbci	r29, 0xFE	; 254
    473c:	28 81       	ld	r18, Y
    473e:	39 81       	ldd	r19, Y+1	; 0x01
    4740:	c3 5f       	subi	r28, 0xF3	; 243
    4742:	d1 40       	sbci	r29, 0x01	; 1
    4744:	23 30       	cpi	r18, 0x03	; 3
    4746:	31 05       	cpc	r19, r1
    4748:	09 f4       	brne	.+2      	; 0x474c <main+0x25f0>
    474a:	da c5       	rjmp	.+2996   	; 0x5300 <main+0x31a4>
    474c:	cd 50       	subi	r28, 0x0D	; 13
    474e:	de 4f       	sbci	r29, 0xFE	; 254
    4750:	88 81       	ld	r24, Y
    4752:	99 81       	ldd	r25, Y+1	; 0x01
    4754:	c3 5f       	subi	r28, 0xF3	; 243
    4756:	d1 40       	sbci	r29, 0x01	; 1
    4758:	84 30       	cpi	r24, 0x04	; 4
    475a:	91 05       	cpc	r25, r1
    475c:	09 f4       	brne	.+2      	; 0x4760 <main+0x2604>
    475e:	dd c5       	rjmp	.+3002   	; 0x531a <main+0x31be>
    4760:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
    4764:	cd 50       	subi	r28, 0x0D	; 13
    4766:	de 4f       	sbci	r29, 0xFE	; 254
    4768:	e8 81       	ld	r30, Y
    476a:	f9 81       	ldd	r31, Y+1	; 0x01
    476c:	c3 5f       	subi	r28, 0xF3	; 243
    476e:	d1 40       	sbci	r29, 0x01	; 1
    4770:	e8 30       	cpi	r30, 0x08	; 8
    4772:	f1 05       	cpc	r31, r1
    4774:	09 f4       	brne	.+2      	; 0x4778 <main+0x261c>
    4776:	00 c4       	rjmp	.+2048   	; 0x4f78 <main+0x2e1c>
    4778:	cd 50       	subi	r28, 0x0D	; 13
    477a:	de 4f       	sbci	r29, 0xFE	; 254
    477c:	28 81       	ld	r18, Y
    477e:	39 81       	ldd	r19, Y+1	; 0x01
    4780:	c3 5f       	subi	r28, 0xF3	; 243
    4782:	d1 40       	sbci	r29, 0x01	; 1
    4784:	29 30       	cpi	r18, 0x09	; 9
    4786:	31 05       	cpc	r19, r1
    4788:	b4 f4       	brge	.+44     	; 0x47b6 <main+0x265a>
    478a:	cd 50       	subi	r28, 0x0D	; 13
    478c:	de 4f       	sbci	r29, 0xFE	; 254
    478e:	88 81       	ld	r24, Y
    4790:	99 81       	ldd	r25, Y+1	; 0x01
    4792:	c3 5f       	subi	r28, 0xF3	; 243
    4794:	d1 40       	sbci	r29, 0x01	; 1
    4796:	86 30       	cpi	r24, 0x06	; 6
    4798:	91 05       	cpc	r25, r1
    479a:	09 f4       	brne	.+2      	; 0x479e <main+0x2642>
    479c:	d8 c5       	rjmp	.+2992   	; 0x534e <main+0x31f2>
    479e:	cd 50       	subi	r28, 0x0D	; 13
    47a0:	de 4f       	sbci	r29, 0xFE	; 254
    47a2:	e8 81       	ld	r30, Y
    47a4:	f9 81       	ldd	r31, Y+1	; 0x01
    47a6:	c3 5f       	subi	r28, 0xF3	; 243
    47a8:	d1 40       	sbci	r29, 0x01	; 1
    47aa:	e7 30       	cpi	r30, 0x07	; 7
    47ac:	f1 05       	cpc	r31, r1
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <main+0x2656>
    47b0:	e7 c5       	rjmp	.+3022   	; 0x5380 <main+0x3224>
    47b2:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
    47b6:	cd 50       	subi	r28, 0x0D	; 13
    47b8:	de 4f       	sbci	r29, 0xFE	; 254
    47ba:	28 81       	ld	r18, Y
    47bc:	39 81       	ldd	r19, Y+1	; 0x01
    47be:	c3 5f       	subi	r28, 0xF3	; 243
    47c0:	d1 40       	sbci	r29, 0x01	; 1
    47c2:	29 30       	cpi	r18, 0x09	; 9
    47c4:	31 05       	cpc	r19, r1
    47c6:	09 f4       	brne	.+2      	; 0x47ca <main+0x266e>
    47c8:	e8 c5       	rjmp	.+3024   	; 0x539a <main+0x323e>
    47ca:	cd 50       	subi	r28, 0x0D	; 13
    47cc:	de 4f       	sbci	r29, 0xFE	; 254
    47ce:	88 81       	ld	r24, Y
    47d0:	99 81       	ldd	r25, Y+1	; 0x01
    47d2:	c3 5f       	subi	r28, 0xF3	; 243
    47d4:	d1 40       	sbci	r29, 0x01	; 1
    47d6:	8a 30       	cpi	r24, 0x0A	; 10
    47d8:	91 05       	cpc	r25, r1
    47da:	09 f4       	brne	.+2      	; 0x47de <main+0x2682>
    47dc:	eb c5       	rjmp	.+3030   	; 0x53b4 <main+0x3258>
    47de:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
    47e2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
    47e6:	87 e8       	ldi	r24, 0x87	; 135
    47e8:	91 e0       	ldi	r25, 0x01	; 1
    47ea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    47ee:	82 e0       	ldi	r24, 0x02	; 2
    47f0:	61 e0       	ldi	r22, 0x01	; 1
    47f2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					if(login_mode==ADMIN)//check login mode
    47f6:	fe 01       	movw	r30, r28
    47f8:	ed 51       	subi	r30, 0x1D	; 29
    47fa:	fe 4f       	sbci	r31, 0xFE	; 254
    47fc:	80 81       	ld	r24, Z
    47fe:	81 30       	cpi	r24, 0x01	; 1
    4800:	29 f4       	brne	.+10     	; 0x480c <main+0x26b0>
					{
						LCD_vSend_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
    4802:	87 e9       	ldi	r24, 0x97	; 151
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    480a:	0a c0       	rjmp	.+20     	; 0x4820 <main+0x26c4>
					}
					else if(login_mode==GUEST)//check login mode
    480c:	fe 01       	movw	r30, r28
    480e:	ed 51       	subi	r30, 0x1D	; 29
    4810:	fe 4f       	sbci	r31, 0xFE	; 254
    4812:	80 81       	ld	r24, Z
    4814:	82 30       	cpi	r24, 0x02	; 2
    4816:	21 f4       	brne	.+8      	; 0x4820 <main+0x26c4>
					{
						LCD_vSend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
    4818:	87 ea       	ldi	r24, 0xA7	; 167
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					}
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    4820:	fe 01       	movw	r30, r28
    4822:	ed 51       	subi	r30, 0x1D	; 29
    4824:	fe 4f       	sbci	r31, 0xFE	; 254
    4826:	80 81       	ld	r24, Z
    4828:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    482c:	fe 01       	movw	r30, r28
    482e:	ef 51       	subi	r30, 0x1F	; 31
    4830:	fe 4f       	sbci	r31, 0xFE	; 254
    4832:	80 83       	st	Z, r24
    4834:	fe 01       	movw	r30, r28
    4836:	ed 54       	subi	r30, 0x4D	; 77
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	a8 ec       	ldi	r26, 0xC8	; 200
    4840:	b2 e4       	ldi	r27, 0x42	; 66
    4842:	80 83       	st	Z, r24
    4844:	91 83       	std	Z+1, r25	; 0x01
    4846:	a2 83       	std	Z+2, r26	; 0x02
    4848:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    484a:	8e 01       	movw	r16, r28
    484c:	01 55       	subi	r16, 0x51	; 81
    484e:	1f 4f       	sbci	r17, 0xFF	; 255
    4850:	fe 01       	movw	r30, r28
    4852:	ed 54       	subi	r30, 0x4D	; 77
    4854:	ff 4f       	sbci	r31, 0xFF	; 255
    4856:	60 81       	ld	r22, Z
    4858:	71 81       	ldd	r23, Z+1	; 0x01
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	93 81       	ldd	r25, Z+3	; 0x03
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	4a ef       	ldi	r20, 0xFA	; 250
    4864:	54 e4       	ldi	r21, 0x44	; 68
    4866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	f8 01       	movw	r30, r16
    4870:	80 83       	st	Z, r24
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	a2 83       	std	Z+2, r26	; 0x02
    4876:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4878:	fe 01       	movw	r30, r28
    487a:	e1 55       	subi	r30, 0x51	; 81
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	60 81       	ld	r22, Z
    4880:	71 81       	ldd	r23, Z+1	; 0x01
    4882:	82 81       	ldd	r24, Z+2	; 0x02
    4884:	93 81       	ldd	r25, Z+3	; 0x03
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	40 e8       	ldi	r20, 0x80	; 128
    488c:	5f e3       	ldi	r21, 0x3F	; 63
    488e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4892:	88 23       	and	r24, r24
    4894:	44 f4       	brge	.+16     	; 0x48a6 <main+0x274a>
		__ticks = 1;
    4896:	fe 01       	movw	r30, r28
    4898:	e3 55       	subi	r30, 0x53	; 83
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	91 83       	std	Z+1, r25	; 0x01
    48a2:	80 83       	st	Z, r24
    48a4:	64 c0       	rjmp	.+200    	; 0x496e <main+0x2812>
	else if (__tmp > 65535)
    48a6:	fe 01       	movw	r30, r28
    48a8:	e1 55       	subi	r30, 0x51	; 81
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	93 81       	ldd	r25, Z+3	; 0x03
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	3f ef       	ldi	r19, 0xFF	; 255
    48b8:	4f e7       	ldi	r20, 0x7F	; 127
    48ba:	57 e4       	ldi	r21, 0x47	; 71
    48bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48c0:	18 16       	cp	r1, r24
    48c2:	0c f0       	brlt	.+2      	; 0x48c6 <main+0x276a>
    48c4:	43 c0       	rjmp	.+134    	; 0x494c <main+0x27f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c6:	fe 01       	movw	r30, r28
    48c8:	ed 54       	subi	r30, 0x4D	; 77
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	60 81       	ld	r22, Z
    48ce:	71 81       	ldd	r23, Z+1	; 0x01
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	93 81       	ldd	r25, Z+3	; 0x03
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	40 e2       	ldi	r20, 0x20	; 32
    48da:	51 e4       	ldi	r21, 0x41	; 65
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	8e 01       	movw	r16, r28
    48e6:	03 55       	subi	r16, 0x53	; 83
    48e8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ea:	bc 01       	movw	r22, r24
    48ec:	cd 01       	movw	r24, r26
    48ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f2:	dc 01       	movw	r26, r24
    48f4:	cb 01       	movw	r24, r22
    48f6:	f8 01       	movw	r30, r16
    48f8:	91 83       	std	Z+1, r25	; 0x01
    48fa:	80 83       	st	Z, r24
    48fc:	1f c0       	rjmp	.+62     	; 0x493c <main+0x27e0>
    48fe:	fe 01       	movw	r30, r28
    4900:	e5 55       	subi	r30, 0x55	; 85
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	88 ec       	ldi	r24, 0xC8	; 200
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	91 83       	std	Z+1, r25	; 0x01
    490a:	80 83       	st	Z, r24
    490c:	fe 01       	movw	r30, r28
    490e:	e5 55       	subi	r30, 0x55	; 85
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	01 97       	sbiw	r24, 0x01	; 1
    4918:	f1 f7       	brne	.-4      	; 0x4916 <main+0x27ba>
    491a:	fe 01       	movw	r30, r28
    491c:	e5 55       	subi	r30, 0x55	; 85
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	91 83       	std	Z+1, r25	; 0x01
    4922:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4924:	de 01       	movw	r26, r28
    4926:	a3 55       	subi	r26, 0x53	; 83
    4928:	bf 4f       	sbci	r27, 0xFF	; 255
    492a:	fe 01       	movw	r30, r28
    492c:	e3 55       	subi	r30, 0x53	; 83
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	80 81       	ld	r24, Z
    4932:	91 81       	ldd	r25, Z+1	; 0x01
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	11 96       	adiw	r26, 0x01	; 1
    4938:	9c 93       	st	X, r25
    493a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493c:	fe 01       	movw	r30, r28
    493e:	e3 55       	subi	r30, 0x53	; 83
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	80 81       	ld	r24, Z
    4944:	91 81       	ldd	r25, Z+1	; 0x01
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	d1 f6       	brne	.-76     	; 0x48fe <main+0x27a2>
    494a:	28 c0       	rjmp	.+80     	; 0x499c <main+0x2840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	8e 01       	movw	r16, r28
    494e:	03 55       	subi	r16, 0x53	; 83
    4950:	1f 4f       	sbci	r17, 0xFF	; 255
    4952:	fe 01       	movw	r30, r28
    4954:	e1 55       	subi	r30, 0x51	; 81
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	82 81       	ldd	r24, Z+2	; 0x02
    495e:	93 81       	ldd	r25, Z+3	; 0x03
    4960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4964:	dc 01       	movw	r26, r24
    4966:	cb 01       	movw	r24, r22
    4968:	f8 01       	movw	r30, r16
    496a:	91 83       	std	Z+1, r25	; 0x01
    496c:	80 83       	st	Z, r24
    496e:	de 01       	movw	r26, r28
    4970:	a7 55       	subi	r26, 0x57	; 87
    4972:	bf 4f       	sbci	r27, 0xFF	; 255
    4974:	fe 01       	movw	r30, r28
    4976:	e3 55       	subi	r30, 0x53	; 83
    4978:	ff 4f       	sbci	r31, 0xFF	; 255
    497a:	80 81       	ld	r24, Z
    497c:	91 81       	ldd	r25, Z+1	; 0x01
    497e:	11 96       	adiw	r26, 0x01	; 1
    4980:	9c 93       	st	X, r25
    4982:	8e 93       	st	-X, r24
    4984:	fe 01       	movw	r30, r28
    4986:	e7 55       	subi	r30, 0x57	; 87
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	80 81       	ld	r24, Z
    498c:	91 81       	ldd	r25, Z+1	; 0x01
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <main+0x2832>
    4992:	fe 01       	movw	r30, r28
    4994:	e7 55       	subi	r30, 0x57	; 87
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
    499c:	fe 01       	movw	r30, r28
    499e:	ef 51       	subi	r30, 0x1F	; 31
    49a0:	fe 4f       	sbci	r31, 0xFE	; 254
    49a2:	80 81       	ld	r24, Z
    49a4:	81 33       	cpi	r24, 0x31	; 49
    49a6:	31 f4       	brne	.+12     	; 0x49b4 <main+0x2858>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
    49a8:	fe 01       	movw	r30, r28
    49aa:	e2 52       	subi	r30, 0x22	; 34
    49ac:	fe 4f       	sbci	r31, 0xFE	; 254
    49ae:	83 e0       	ldi	r24, 0x03	; 3
    49b0:	80 83       	st	Z, r24
    49b2:	fd c0       	rjmp	.+506    	; 0x4bae <main+0x2a52>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
    49b4:	fe 01       	movw	r30, r28
    49b6:	ef 51       	subi	r30, 0x1F	; 31
    49b8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ba:	80 81       	ld	r24, Z
    49bc:	82 33       	cpi	r24, 0x32	; 50
    49be:	31 f4       	brne	.+12     	; 0x49cc <main+0x2870>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
    49c0:	fe 01       	movw	r30, r28
    49c2:	e2 52       	subi	r30, 0x22	; 34
    49c4:	fe 4f       	sbci	r31, 0xFE	; 254
    49c6:	84 e0       	ldi	r24, 0x04	; 4
    49c8:	80 83       	st	Z, r24
    49ca:	f1 c0       	rjmp	.+482    	; 0x4bae <main+0x2a52>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
    49cc:	fe 01       	movw	r30, r28
    49ce:	ef 51       	subi	r30, 0x1F	; 31
    49d0:	fe 4f       	sbci	r31, 0xFE	; 254
    49d2:	80 81       	ld	r24, Z
    49d4:	83 33       	cpi	r24, 0x33	; 51
    49d6:	31 f4       	brne	.+12     	; 0x49e4 <main+0x2888>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
    49d8:	fe 01       	movw	r30, r28
    49da:	e2 52       	subi	r30, 0x22	; 34
    49dc:	fe 4f       	sbci	r31, 0xFE	; 254
    49de:	85 e0       	ldi	r24, 0x05	; 5
    49e0:	80 83       	st	Z, r24
    49e2:	e5 c0       	rjmp	.+458    	; 0x4bae <main+0x2a52>
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
    49e4:	fe 01       	movw	r30, r28
    49e6:	ef 51       	subi	r30, 0x1F	; 31
    49e8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ea:	80 81       	ld	r24, Z
    49ec:	84 33       	cpi	r24, 0x34	; 52
    49ee:	61 f4       	brne	.+24     	; 0x4a08 <main+0x28ac>
    49f0:	fe 01       	movw	r30, r28
    49f2:	ed 51       	subi	r30, 0x1D	; 29
    49f4:	fe 4f       	sbci	r31, 0xFE	; 254
    49f6:	80 81       	ld	r24, Z
    49f8:	82 30       	cpi	r24, 0x02	; 2
    49fa:	31 f4       	brne	.+12     	; 0x4a08 <main+0x28ac>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    49fc:	fe 01       	movw	r30, r28
    49fe:	e2 52       	subi	r30, 0x22	; 34
    4a00:	fe 4f       	sbci	r31, 0xFE	; 254
    4a02:	86 e0       	ldi	r24, 0x06	; 6
    4a04:	80 83       	st	Z, r24
    4a06:	d3 c0       	rjmp	.+422    	; 0x4bae <main+0x2a52>
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ef 51       	subi	r30, 0x1F	; 31
    4a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a0e:	80 81       	ld	r24, Z
    4a10:	84 33       	cpi	r24, 0x34	; 52
    4a12:	61 f4       	brne	.+24     	; 0x4a2c <main+0x28d0>
    4a14:	fe 01       	movw	r30, r28
    4a16:	ed 51       	subi	r30, 0x1D	; 29
    4a18:	fe 4f       	sbci	r31, 0xFE	; 254
    4a1a:	80 81       	ld	r24, Z
    4a1c:	81 30       	cpi	r24, 0x01	; 1
    4a1e:	31 f4       	brne	.+12     	; 0x4a2c <main+0x28d0>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    4a20:	fe 01       	movw	r30, r28
    4a22:	e2 52       	subi	r30, 0x22	; 34
    4a24:	fe 4f       	sbci	r31, 0xFE	; 254
    4a26:	82 e0       	ldi	r24, 0x02	; 2
    4a28:	80 83       	st	Z, r24
    4a2a:	c1 c0       	rjmp	.+386    	; 0x4bae <main+0x2a52>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	ef 51       	subi	r30, 0x1F	; 31
    4a30:	fe 4f       	sbci	r31, 0xFE	; 254
    4a32:	80 81       	ld	r24, Z
    4a34:	8f 3f       	cpi	r24, 0xFF	; 255
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <main+0x28de>
    4a38:	ba c0       	rjmp	.+372    	; 0x4bae <main+0x2a52>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4a3a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    4a3e:	87 eb       	ldi	r24, 0xB7	; 183
    4a40:	91 e0       	ldi	r25, 0x01	; 1
    4a42:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4a46:	fe 01       	movw	r30, r28
    4a48:	eb 55       	subi	r30, 0x5B	; 91
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	aa ef       	ldi	r26, 0xFA	; 250
    4a52:	b3 e4       	ldi	r27, 0x43	; 67
    4a54:	80 83       	st	Z, r24
    4a56:	91 83       	std	Z+1, r25	; 0x01
    4a58:	a2 83       	std	Z+2, r26	; 0x02
    4a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a5c:	8e 01       	movw	r16, r28
    4a5e:	0f 55       	subi	r16, 0x5F	; 95
    4a60:	1f 4f       	sbci	r17, 0xFF	; 255
    4a62:	fe 01       	movw	r30, r28
    4a64:	eb 55       	subi	r30, 0x5B	; 91
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	60 81       	ld	r22, Z
    4a6a:	71 81       	ldd	r23, Z+1	; 0x01
    4a6c:	82 81       	ldd	r24, Z+2	; 0x02
    4a6e:	93 81       	ldd	r25, Z+3	; 0x03
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	4a ef       	ldi	r20, 0xFA	; 250
    4a76:	54 e4       	ldi	r21, 0x44	; 68
    4a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	f8 01       	movw	r30, r16
    4a82:	80 83       	st	Z, r24
    4a84:	91 83       	std	Z+1, r25	; 0x01
    4a86:	a2 83       	std	Z+2, r26	; 0x02
    4a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	ef 55       	subi	r30, 0x5F	; 95
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	60 81       	ld	r22, Z
    4a92:	71 81       	ldd	r23, Z+1	; 0x01
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	93 81       	ldd	r25, Z+3	; 0x03
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e8       	ldi	r20, 0x80	; 128
    4a9e:	5f e3       	ldi	r21, 0x3F	; 63
    4aa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aa4:	88 23       	and	r24, r24
    4aa6:	44 f4       	brge	.+16     	; 0x4ab8 <main+0x295c>
		__ticks = 1;
    4aa8:	fe 01       	movw	r30, r28
    4aaa:	e1 56       	subi	r30, 0x61	; 97
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	91 83       	std	Z+1, r25	; 0x01
    4ab4:	80 83       	st	Z, r24
    4ab6:	64 c0       	rjmp	.+200    	; 0x4b80 <main+0x2a24>
	else if (__tmp > 65535)
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ef 55       	subi	r30, 0x5F	; 95
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	60 81       	ld	r22, Z
    4ac0:	71 81       	ldd	r23, Z+1	; 0x01
    4ac2:	82 81       	ldd	r24, Z+2	; 0x02
    4ac4:	93 81       	ldd	r25, Z+3	; 0x03
    4ac6:	20 e0       	ldi	r18, 0x00	; 0
    4ac8:	3f ef       	ldi	r19, 0xFF	; 255
    4aca:	4f e7       	ldi	r20, 0x7F	; 127
    4acc:	57 e4       	ldi	r21, 0x47	; 71
    4ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ad2:	18 16       	cp	r1, r24
    4ad4:	0c f0       	brlt	.+2      	; 0x4ad8 <main+0x297c>
    4ad6:	43 c0       	rjmp	.+134    	; 0x4b5e <main+0x2a02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad8:	fe 01       	movw	r30, r28
    4ada:	eb 55       	subi	r30, 0x5B	; 91
    4adc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ade:	60 81       	ld	r22, Z
    4ae0:	71 81       	ldd	r23, Z+1	; 0x01
    4ae2:	82 81       	ldd	r24, Z+2	; 0x02
    4ae4:	93 81       	ldd	r25, Z+3	; 0x03
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	40 e2       	ldi	r20, 0x20	; 32
    4aec:	51 e4       	ldi	r21, 0x41	; 65
    4aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	8e 01       	movw	r16, r28
    4af8:	01 56       	subi	r16, 0x61	; 97
    4afa:	1f 4f       	sbci	r17, 0xFF	; 255
    4afc:	bc 01       	movw	r22, r24
    4afe:	cd 01       	movw	r24, r26
    4b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	f8 01       	movw	r30, r16
    4b0a:	91 83       	std	Z+1, r25	; 0x01
    4b0c:	80 83       	st	Z, r24
    4b0e:	1f c0       	rjmp	.+62     	; 0x4b4e <main+0x29f2>
    4b10:	fe 01       	movw	r30, r28
    4b12:	e3 56       	subi	r30, 0x63	; 99
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	88 ec       	ldi	r24, 0xC8	; 200
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	91 83       	std	Z+1, r25	; 0x01
    4b1c:	80 83       	st	Z, r24
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e3 56       	subi	r30, 0x63	; 99
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	80 81       	ld	r24, Z
    4b26:	91 81       	ldd	r25, Z+1	; 0x01
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	f1 f7       	brne	.-4      	; 0x4b28 <main+0x29cc>
    4b2c:	fe 01       	movw	r30, r28
    4b2e:	e3 56       	subi	r30, 0x63	; 99
    4b30:	ff 4f       	sbci	r31, 0xFF	; 255
    4b32:	91 83       	std	Z+1, r25	; 0x01
    4b34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b36:	de 01       	movw	r26, r28
    4b38:	a1 56       	subi	r26, 0x61	; 97
    4b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e1 56       	subi	r30, 0x61	; 97
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 81       	ld	r24, Z
    4b44:	91 81       	ldd	r25, Z+1	; 0x01
    4b46:	01 97       	sbiw	r24, 0x01	; 1
    4b48:	11 96       	adiw	r26, 0x01	; 1
    4b4a:	9c 93       	st	X, r25
    4b4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4e:	fe 01       	movw	r30, r28
    4b50:	e1 56       	subi	r30, 0x61	; 97
    4b52:	ff 4f       	sbci	r31, 0xFF	; 255
    4b54:	80 81       	ld	r24, Z
    4b56:	91 81       	ldd	r25, Z+1	; 0x01
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	d1 f6       	brne	.-76     	; 0x4b10 <main+0x29b4>
    4b5c:	28 c0       	rjmp	.+80     	; 0x4bae <main+0x2a52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5e:	8e 01       	movw	r16, r28
    4b60:	01 56       	subi	r16, 0x61	; 97
    4b62:	1f 4f       	sbci	r17, 0xFF	; 255
    4b64:	fe 01       	movw	r30, r28
    4b66:	ef 55       	subi	r30, 0x5F	; 95
    4b68:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6a:	60 81       	ld	r22, Z
    4b6c:	71 81       	ldd	r23, Z+1	; 0x01
    4b6e:	82 81       	ldd	r24, Z+2	; 0x02
    4b70:	93 81       	ldd	r25, Z+3	; 0x03
    4b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
    4b80:	de 01       	movw	r26, r28
    4b82:	a5 56       	subi	r26, 0x65	; 101
    4b84:	bf 4f       	sbci	r27, 0xFF	; 255
    4b86:	fe 01       	movw	r30, r28
    4b88:	e1 56       	subi	r30, 0x61	; 97
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	80 81       	ld	r24, Z
    4b8e:	91 81       	ldd	r25, Z+1	; 0x01
    4b90:	11 96       	adiw	r26, 0x01	; 1
    4b92:	9c 93       	st	X, r25
    4b94:	8e 93       	st	-X, r24
    4b96:	fe 01       	movw	r30, r28
    4b98:	e5 56       	subi	r30, 0x65	; 101
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	80 81       	ld	r24, Z
    4b9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <main+0x2a44>
    4ba4:	fe 01       	movw	r30, r28
    4ba6:	e5 56       	subi	r30, 0x65	; 101
    4ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    4baa:	91 83       	std	Z+1, r25	; 0x01
    4bac:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
    4bae:	fe 01       	movw	r30, r28
    4bb0:	ef 51       	subi	r30, 0x1F	; 31
    4bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bb4:	80 81       	ld	r24, Z
    4bb6:	81 33       	cpi	r24, 0x31	; 49
    4bb8:	40 f0       	brcs	.+16     	; 0x4bca <main+0x2a6e>
    4bba:	fe 01       	movw	r30, r28
    4bbc:	ef 51       	subi	r30, 0x1F	; 31
    4bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc0:	80 81       	ld	r24, Z
    4bc2:	85 33       	cpi	r24, 0x35	; 53
    4bc4:	10 f4       	brcc	.+4      	; 0x4bca <main+0x2a6e>
    4bc6:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
    4bca:	80 91 a0 02 	lds	r24, 0x02A0
    4bce:	88 23       	and	r24, r24
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <main+0x2a78>
    4bd2:	07 ce       	rjmp	.-1010   	; 0x47e2 <main+0x2686>
    4bd4:	0c 94 4f 2e 	jmp	0x5c9e	; 0x5c9e <main+0x3b42>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4bd8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Room4    2:TV   ");
    4bdc:	83 ec       	ldi	r24, 0xC3	; 195
    4bde:	91 e0       	ldi	r25, 0x01	; 1
    4be0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    4be4:	82 e0       	ldi	r24, 0x02	; 2
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("3:Air Cond.4:RET");
    4bec:	86 ed       	ldi	r24, 0xD6	; 214
    4bee:	91 e0       	ldi	r25, 0x01	; 1
    4bf0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	ed 51       	subi	r30, 0x1D	; 29
    4bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfa:	80 81       	ld	r24, Z
    4bfc:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    4c00:	fe 01       	movw	r30, r28
    4c02:	ef 51       	subi	r30, 0x1F	; 31
    4c04:	fe 4f       	sbci	r31, 0xFE	; 254
    4c06:	80 83       	st	Z, r24
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e9 56       	subi	r30, 0x69	; 105
    4c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0e:	80 e0       	ldi	r24, 0x00	; 0
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	a8 ec       	ldi	r26, 0xC8	; 200
    4c14:	b2 e4       	ldi	r27, 0x42	; 66
    4c16:	80 83       	st	Z, r24
    4c18:	91 83       	std	Z+1, r25	; 0x01
    4c1a:	a2 83       	std	Z+2, r26	; 0x02
    4c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1e:	8e 01       	movw	r16, r28
    4c20:	0d 56       	subi	r16, 0x6D	; 109
    4c22:	1f 4f       	sbci	r17, 0xFF	; 255
    4c24:	fe 01       	movw	r30, r28
    4c26:	e9 56       	subi	r30, 0x69	; 105
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	60 81       	ld	r22, Z
    4c2c:	71 81       	ldd	r23, Z+1	; 0x01
    4c2e:	82 81       	ldd	r24, Z+2	; 0x02
    4c30:	93 81       	ldd	r25, Z+3	; 0x03
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	4a ef       	ldi	r20, 0xFA	; 250
    4c38:	54 e4       	ldi	r21, 0x44	; 68
    4c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c3e:	dc 01       	movw	r26, r24
    4c40:	cb 01       	movw	r24, r22
    4c42:	f8 01       	movw	r30, r16
    4c44:	80 83       	st	Z, r24
    4c46:	91 83       	std	Z+1, r25	; 0x01
    4c48:	a2 83       	std	Z+2, r26	; 0x02
    4c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	ed 56       	subi	r30, 0x6D	; 109
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	60 81       	ld	r22, Z
    4c54:	71 81       	ldd	r23, Z+1	; 0x01
    4c56:	82 81       	ldd	r24, Z+2	; 0x02
    4c58:	93 81       	ldd	r25, Z+3	; 0x03
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e8       	ldi	r20, 0x80	; 128
    4c60:	5f e3       	ldi	r21, 0x3F	; 63
    4c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c66:	88 23       	and	r24, r24
    4c68:	44 f4       	brge	.+16     	; 0x4c7a <main+0x2b1e>
		__ticks = 1;
    4c6a:	fe 01       	movw	r30, r28
    4c6c:	ef 56       	subi	r30, 0x6F	; 111
    4c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	91 83       	std	Z+1, r25	; 0x01
    4c76:	80 83       	st	Z, r24
    4c78:	64 c0       	rjmp	.+200    	; 0x4d42 <main+0x2be6>
	else if (__tmp > 65535)
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	ed 56       	subi	r30, 0x6D	; 109
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	60 81       	ld	r22, Z
    4c82:	71 81       	ldd	r23, Z+1	; 0x01
    4c84:	82 81       	ldd	r24, Z+2	; 0x02
    4c86:	93 81       	ldd	r25, Z+3	; 0x03
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	3f ef       	ldi	r19, 0xFF	; 255
    4c8c:	4f e7       	ldi	r20, 0x7F	; 127
    4c8e:	57 e4       	ldi	r21, 0x47	; 71
    4c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c94:	18 16       	cp	r1, r24
    4c96:	0c f0       	brlt	.+2      	; 0x4c9a <main+0x2b3e>
    4c98:	43 c0       	rjmp	.+134    	; 0x4d20 <main+0x2bc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9a:	fe 01       	movw	r30, r28
    4c9c:	e9 56       	subi	r30, 0x69	; 105
    4c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca0:	60 81       	ld	r22, Z
    4ca2:	71 81       	ldd	r23, Z+1	; 0x01
    4ca4:	82 81       	ldd	r24, Z+2	; 0x02
    4ca6:	93 81       	ldd	r25, Z+3	; 0x03
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	40 e2       	ldi	r20, 0x20	; 32
    4cae:	51 e4       	ldi	r21, 0x41	; 65
    4cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb4:	dc 01       	movw	r26, r24
    4cb6:	cb 01       	movw	r24, r22
    4cb8:	8e 01       	movw	r16, r28
    4cba:	0f 56       	subi	r16, 0x6F	; 111
    4cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4cbe:	bc 01       	movw	r22, r24
    4cc0:	cd 01       	movw	r24, r26
    4cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	f8 01       	movw	r30, r16
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	80 83       	st	Z, r24
    4cd0:	1f c0       	rjmp	.+62     	; 0x4d10 <main+0x2bb4>
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e1 57       	subi	r30, 0x71	; 113
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	88 ec       	ldi	r24, 0xC8	; 200
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	80 83       	st	Z, r24
    4ce0:	fe 01       	movw	r30, r28
    4ce2:	e1 57       	subi	r30, 0x71	; 113
    4ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce6:	80 81       	ld	r24, Z
    4ce8:	91 81       	ldd	r25, Z+1	; 0x01
    4cea:	01 97       	sbiw	r24, 0x01	; 1
    4cec:	f1 f7       	brne	.-4      	; 0x4cea <main+0x2b8e>
    4cee:	fe 01       	movw	r30, r28
    4cf0:	e1 57       	subi	r30, 0x71	; 113
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	91 83       	std	Z+1, r25	; 0x01
    4cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cf8:	de 01       	movw	r26, r28
    4cfa:	af 56       	subi	r26, 0x6F	; 111
    4cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    4cfe:	fe 01       	movw	r30, r28
    4d00:	ef 56       	subi	r30, 0x6F	; 111
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	80 81       	ld	r24, Z
    4d06:	91 81       	ldd	r25, Z+1	; 0x01
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	11 96       	adiw	r26, 0x01	; 1
    4d0c:	9c 93       	st	X, r25
    4d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d10:	fe 01       	movw	r30, r28
    4d12:	ef 56       	subi	r30, 0x6F	; 111
    4d14:	ff 4f       	sbci	r31, 0xFF	; 255
    4d16:	80 81       	ld	r24, Z
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	00 97       	sbiw	r24, 0x00	; 0
    4d1c:	d1 f6       	brne	.-76     	; 0x4cd2 <main+0x2b76>
    4d1e:	28 c0       	rjmp	.+80     	; 0x4d70 <main+0x2c14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d20:	8e 01       	movw	r16, r28
    4d22:	0f 56       	subi	r16, 0x6F	; 111
    4d24:	1f 4f       	sbci	r17, 0xFF	; 255
    4d26:	fe 01       	movw	r30, r28
    4d28:	ed 56       	subi	r30, 0x6D	; 109
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	60 81       	ld	r22, Z
    4d2e:	71 81       	ldd	r23, Z+1	; 0x01
    4d30:	82 81       	ldd	r24, Z+2	; 0x02
    4d32:	93 81       	ldd	r25, Z+3	; 0x03
    4d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d38:	dc 01       	movw	r26, r24
    4d3a:	cb 01       	movw	r24, r22
    4d3c:	f8 01       	movw	r30, r16
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	80 83       	st	Z, r24
    4d42:	de 01       	movw	r26, r28
    4d44:	a3 57       	subi	r26, 0x73	; 115
    4d46:	bf 4f       	sbci	r27, 0xFF	; 255
    4d48:	fe 01       	movw	r30, r28
    4d4a:	ef 56       	subi	r30, 0x6F	; 111
    4d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4e:	80 81       	ld	r24, Z
    4d50:	91 81       	ldd	r25, Z+1	; 0x01
    4d52:	11 96       	adiw	r26, 0x01	; 1
    4d54:	9c 93       	st	X, r25
    4d56:	8e 93       	st	-X, r24
    4d58:	fe 01       	movw	r30, r28
    4d5a:	e3 57       	subi	r30, 0x73	; 115
    4d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d5e:	80 81       	ld	r24, Z
    4d60:	91 81       	ldd	r25, Z+1	; 0x01
    4d62:	01 97       	sbiw	r24, 0x01	; 1
    4d64:	f1 f7       	brne	.-4      	; 0x4d62 <main+0x2c06>
    4d66:	fe 01       	movw	r30, r28
    4d68:	e3 57       	subi	r30, 0x73	; 115
    4d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
    4d70:	fe 01       	movw	r30, r28
    4d72:	ef 51       	subi	r30, 0x1F	; 31
    4d74:	fe 4f       	sbci	r31, 0xFE	; 254
    4d76:	80 81       	ld	r24, Z
    4d78:	81 33       	cpi	r24, 0x31	; 49
    4d7a:	31 f4       	brne	.+12     	; 0x4d88 <main+0x2c2c>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	e2 52       	subi	r30, 0x22	; 34
    4d80:	fe 4f       	sbci	r31, 0xFE	; 254
    4d82:	86 e0       	ldi	r24, 0x06	; 6
    4d84:	80 83       	st	Z, r24
    4d86:	e5 c0       	rjmp	.+458    	; 0x4f52 <main+0x2df6>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
    4d88:	fe 01       	movw	r30, r28
    4d8a:	ef 51       	subi	r30, 0x1F	; 31
    4d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d8e:	80 81       	ld	r24, Z
    4d90:	82 33       	cpi	r24, 0x32	; 50
    4d92:	31 f4       	brne	.+12     	; 0x4da0 <main+0x2c44>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
    4d94:	fe 01       	movw	r30, r28
    4d96:	e2 52       	subi	r30, 0x22	; 34
    4d98:	fe 4f       	sbci	r31, 0xFE	; 254
    4d9a:	87 e0       	ldi	r24, 0x07	; 7
    4d9c:	80 83       	st	Z, r24
    4d9e:	d9 c0       	rjmp	.+434    	; 0x4f52 <main+0x2df6>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
    4da0:	fe 01       	movw	r30, r28
    4da2:	ef 51       	subi	r30, 0x1F	; 31
    4da4:	fe 4f       	sbci	r31, 0xFE	; 254
    4da6:	80 81       	ld	r24, Z
    4da8:	83 33       	cpi	r24, 0x33	; 51
    4daa:	31 f4       	brne	.+12     	; 0x4db8 <main+0x2c5c>
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
    4dac:	fe 01       	movw	r30, r28
    4dae:	e2 52       	subi	r30, 0x22	; 34
    4db0:	fe 4f       	sbci	r31, 0xFE	; 254
    4db2:	88 e0       	ldi	r24, 0x08	; 8
    4db4:	80 83       	st	Z, r24
    4db6:	cd c0       	rjmp	.+410    	; 0x4f52 <main+0x2df6>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
    4db8:	fe 01       	movw	r30, r28
    4dba:	ef 51       	subi	r30, 0x1F	; 31
    4dbc:	fe 4f       	sbci	r31, 0xFE	; 254
    4dbe:	80 81       	ld	r24, Z
    4dc0:	84 33       	cpi	r24, 0x34	; 52
    4dc2:	31 f4       	brne	.+12     	; 0x4dd0 <main+0x2c74>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    4dc4:	fe 01       	movw	r30, r28
    4dc6:	e2 52       	subi	r30, 0x22	; 34
    4dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	80 83       	st	Z, r24
    4dce:	c1 c0       	rjmp	.+386    	; 0x4f52 <main+0x2df6>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    4dd0:	fe 01       	movw	r30, r28
    4dd2:	ef 51       	subi	r30, 0x1F	; 31
    4dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    4dd6:	80 81       	ld	r24, Z
    4dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    4dda:	09 f4       	brne	.+2      	; 0x4dde <main+0x2c82>
    4ddc:	ba c0       	rjmp	.+372    	; 0x4f52 <main+0x2df6>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4dde:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    4de2:	87 eb       	ldi	r24, 0xB7	; 183
    4de4:	91 e0       	ldi	r25, 0x01	; 1
    4de6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    4dea:	fe 01       	movw	r30, r28
    4dec:	e7 57       	subi	r30, 0x77	; 119
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	80 e0       	ldi	r24, 0x00	; 0
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	aa ef       	ldi	r26, 0xFA	; 250
    4df6:	b3 e4       	ldi	r27, 0x43	; 67
    4df8:	80 83       	st	Z, r24
    4dfa:	91 83       	std	Z+1, r25	; 0x01
    4dfc:	a2 83       	std	Z+2, r26	; 0x02
    4dfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e00:	8e 01       	movw	r16, r28
    4e02:	0b 57       	subi	r16, 0x7B	; 123
    4e04:	1f 4f       	sbci	r17, 0xFF	; 255
    4e06:	fe 01       	movw	r30, r28
    4e08:	e7 57       	subi	r30, 0x77	; 119
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	60 81       	ld	r22, Z
    4e0e:	71 81       	ldd	r23, Z+1	; 0x01
    4e10:	82 81       	ldd	r24, Z+2	; 0x02
    4e12:	93 81       	ldd	r25, Z+3	; 0x03
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	30 e0       	ldi	r19, 0x00	; 0
    4e18:	4a ef       	ldi	r20, 0xFA	; 250
    4e1a:	54 e4       	ldi	r21, 0x44	; 68
    4e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e20:	dc 01       	movw	r26, r24
    4e22:	cb 01       	movw	r24, r22
    4e24:	f8 01       	movw	r30, r16
    4e26:	80 83       	st	Z, r24
    4e28:	91 83       	std	Z+1, r25	; 0x01
    4e2a:	a2 83       	std	Z+2, r26	; 0x02
    4e2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e2e:	fe 01       	movw	r30, r28
    4e30:	eb 57       	subi	r30, 0x7B	; 123
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	60 81       	ld	r22, Z
    4e36:	71 81       	ldd	r23, Z+1	; 0x01
    4e38:	82 81       	ldd	r24, Z+2	; 0x02
    4e3a:	93 81       	ldd	r25, Z+3	; 0x03
    4e3c:	20 e0       	ldi	r18, 0x00	; 0
    4e3e:	30 e0       	ldi	r19, 0x00	; 0
    4e40:	40 e8       	ldi	r20, 0x80	; 128
    4e42:	5f e3       	ldi	r21, 0x3F	; 63
    4e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e48:	88 23       	and	r24, r24
    4e4a:	44 f4       	brge	.+16     	; 0x4e5c <main+0x2d00>
		__ticks = 1;
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	ed 57       	subi	r30, 0x7D	; 125
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	81 e0       	ldi	r24, 0x01	; 1
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	91 83       	std	Z+1, r25	; 0x01
    4e58:	80 83       	st	Z, r24
    4e5a:	64 c0       	rjmp	.+200    	; 0x4f24 <main+0x2dc8>
	else if (__tmp > 65535)
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	eb 57       	subi	r30, 0x7B	; 123
    4e60:	ff 4f       	sbci	r31, 0xFF	; 255
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	82 81       	ldd	r24, Z+2	; 0x02
    4e68:	93 81       	ldd	r25, Z+3	; 0x03
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	3f ef       	ldi	r19, 0xFF	; 255
    4e6e:	4f e7       	ldi	r20, 0x7F	; 127
    4e70:	57 e4       	ldi	r21, 0x47	; 71
    4e72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e76:	18 16       	cp	r1, r24
    4e78:	0c f0       	brlt	.+2      	; 0x4e7c <main+0x2d20>
    4e7a:	43 c0       	rjmp	.+134    	; 0x4f02 <main+0x2da6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e7 57       	subi	r30, 0x77	; 119
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	60 81       	ld	r22, Z
    4e84:	71 81       	ldd	r23, Z+1	; 0x01
    4e86:	82 81       	ldd	r24, Z+2	; 0x02
    4e88:	93 81       	ldd	r25, Z+3	; 0x03
    4e8a:	20 e0       	ldi	r18, 0x00	; 0
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	40 e2       	ldi	r20, 0x20	; 32
    4e90:	51 e4       	ldi	r21, 0x41	; 65
    4e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e96:	dc 01       	movw	r26, r24
    4e98:	cb 01       	movw	r24, r22
    4e9a:	8e 01       	movw	r16, r28
    4e9c:	0d 57       	subi	r16, 0x7D	; 125
    4e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea0:	bc 01       	movw	r22, r24
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	f8 01       	movw	r30, r16
    4eae:	91 83       	std	Z+1, r25	; 0x01
    4eb0:	80 83       	st	Z, r24
    4eb2:	1f c0       	rjmp	.+62     	; 0x4ef2 <main+0x2d96>
    4eb4:	fe 01       	movw	r30, r28
    4eb6:	ef 57       	subi	r30, 0x7F	; 127
    4eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eba:	88 ec       	ldi	r24, 0xC8	; 200
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	91 83       	std	Z+1, r25	; 0x01
    4ec0:	80 83       	st	Z, r24
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	ef 57       	subi	r30, 0x7F	; 127
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	80 81       	ld	r24, Z
    4eca:	91 81       	ldd	r25, Z+1	; 0x01
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <main+0x2d70>
    4ed0:	fe 01       	movw	r30, r28
    4ed2:	ef 57       	subi	r30, 0x7F	; 127
    4ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed6:	91 83       	std	Z+1, r25	; 0x01
    4ed8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eda:	de 01       	movw	r26, r28
    4edc:	ad 57       	subi	r26, 0x7D	; 125
    4ede:	bf 4f       	sbci	r27, 0xFF	; 255
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	ed 57       	subi	r30, 0x7D	; 125
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	01 97       	sbiw	r24, 0x01	; 1
    4eec:	11 96       	adiw	r26, 0x01	; 1
    4eee:	9c 93       	st	X, r25
    4ef0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	ed 57       	subi	r30, 0x7D	; 125
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	00 97       	sbiw	r24, 0x00	; 0
    4efe:	d1 f6       	brne	.-76     	; 0x4eb4 <main+0x2d58>
    4f00:	28 c0       	rjmp	.+80     	; 0x4f52 <main+0x2df6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f02:	8e 01       	movw	r16, r28
    4f04:	0d 57       	subi	r16, 0x7D	; 125
    4f06:	1f 4f       	sbci	r17, 0xFF	; 255
    4f08:	fe 01       	movw	r30, r28
    4f0a:	eb 57       	subi	r30, 0x7B	; 123
    4f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0e:	60 81       	ld	r22, Z
    4f10:	71 81       	ldd	r23, Z+1	; 0x01
    4f12:	82 81       	ldd	r24, Z+2	; 0x02
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	cb 01       	movw	r24, r22
    4f1e:	f8 01       	movw	r30, r16
    4f20:	91 83       	std	Z+1, r25	; 0x01
    4f22:	80 83       	st	Z, r24
    4f24:	de 01       	movw	r26, r28
    4f26:	a1 58       	subi	r26, 0x81	; 129
    4f28:	bf 4f       	sbci	r27, 0xFF	; 255
    4f2a:	fe 01       	movw	r30, r28
    4f2c:	ed 57       	subi	r30, 0x7D	; 125
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	80 81       	ld	r24, Z
    4f32:	91 81       	ldd	r25, Z+1	; 0x01
    4f34:	11 96       	adiw	r26, 0x01	; 1
    4f36:	9c 93       	st	X, r25
    4f38:	8e 93       	st	-X, r24
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e1 58       	subi	r30, 0x81	; 129
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	80 81       	ld	r24, Z
    4f42:	91 81       	ldd	r25, Z+1	; 0x01
    4f44:	01 97       	sbiw	r24, 0x01	; 1
    4f46:	f1 f7       	brne	.-4      	; 0x4f44 <main+0x2de8>
    4f48:	fe 01       	movw	r30, r28
    4f4a:	e1 58       	subi	r30, 0x81	; 129
    4f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    4f52:	fe 01       	movw	r30, r28
    4f54:	ef 51       	subi	r30, 0x1F	; 31
    4f56:	fe 4f       	sbci	r31, 0xFE	; 254
    4f58:	80 81       	ld	r24, Z
    4f5a:	81 33       	cpi	r24, 0x31	; 49
    4f5c:	38 f0       	brcs	.+14     	; 0x4f6c <main+0x2e10>
    4f5e:	fe 01       	movw	r30, r28
    4f60:	ef 51       	subi	r30, 0x1F	; 31
    4f62:	fe 4f       	sbci	r31, 0xFE	; 254
    4f64:	80 81       	ld	r24, Z
    4f66:	85 33       	cpi	r24, 0x35	; 53
    4f68:	08 f4       	brcc	.+2      	; 0x4f6c <main+0x2e10>
    4f6a:	99 c6       	rjmp	.+3378   	; 0x5c9e <main+0x3b42>
    4f6c:	80 91 a0 02 	lds	r24, 0x02A0
    4f70:	88 23       	and	r24, r24
    4f72:	09 f4       	brne	.+2      	; 0x4f76 <main+0x2e1a>
    4f74:	31 ce       	rjmp	.-926    	; 0x4bd8 <main+0x2a7c>
    4f76:	93 c6       	rjmp	.+3366   	; 0x5c9e <main+0x3b42>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    4f78:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
    4f7c:	87 ee       	ldi	r24, 0xE7	; 231
    4f7e:	91 e0       	ldi	r25, 0x01	; 1
    4f80:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_movecursor(2,1);
    4f84:	82 e0       	ldi	r24, 0x02	; 2
    4f86:	61 e0       	ldi	r22, 0x01	; 1
    4f88:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
    4f8c:	8a ef       	ldi	r24, 0xFA	; 250
    4f8e:	91 e0       	ldi	r25, 0x01	; 1
    4f90:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    4f94:	fe 01       	movw	r30, r28
    4f96:	ed 51       	subi	r30, 0x1D	; 29
    4f98:	fe 4f       	sbci	r31, 0xFE	; 254
    4f9a:	80 81       	ld	r24, Z
    4f9c:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    4fa0:	fe 01       	movw	r30, r28
    4fa2:	ef 51       	subi	r30, 0x1F	; 31
    4fa4:	fe 4f       	sbci	r31, 0xFE	; 254
    4fa6:	80 83       	st	Z, r24
    4fa8:	fe 01       	movw	r30, r28
    4faa:	e5 58       	subi	r30, 0x85	; 133
    4fac:	ff 4f       	sbci	r31, 0xFF	; 255
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	a8 ec       	ldi	r26, 0xC8	; 200
    4fb4:	b2 e4       	ldi	r27, 0x42	; 66
    4fb6:	80 83       	st	Z, r24
    4fb8:	91 83       	std	Z+1, r25	; 0x01
    4fba:	a2 83       	std	Z+2, r26	; 0x02
    4fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fbe:	8e 01       	movw	r16, r28
    4fc0:	09 58       	subi	r16, 0x89	; 137
    4fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc4:	fe 01       	movw	r30, r28
    4fc6:	e5 58       	subi	r30, 0x85	; 133
    4fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fca:	60 81       	ld	r22, Z
    4fcc:	71 81       	ldd	r23, Z+1	; 0x01
    4fce:	82 81       	ldd	r24, Z+2	; 0x02
    4fd0:	93 81       	ldd	r25, Z+3	; 0x03
    4fd2:	20 e0       	ldi	r18, 0x00	; 0
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	4a ef       	ldi	r20, 0xFA	; 250
    4fd8:	54 e4       	ldi	r21, 0x44	; 68
    4fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	f8 01       	movw	r30, r16
    4fe4:	80 83       	st	Z, r24
    4fe6:	91 83       	std	Z+1, r25	; 0x01
    4fe8:	a2 83       	std	Z+2, r26	; 0x02
    4fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fec:	fe 01       	movw	r30, r28
    4fee:	e9 58       	subi	r30, 0x89	; 137
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	60 81       	ld	r22, Z
    4ff4:	71 81       	ldd	r23, Z+1	; 0x01
    4ff6:	82 81       	ldd	r24, Z+2	; 0x02
    4ff8:	93 81       	ldd	r25, Z+3	; 0x03
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	40 e8       	ldi	r20, 0x80	; 128
    5000:	5f e3       	ldi	r21, 0x3F	; 63
    5002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5006:	88 23       	and	r24, r24
    5008:	44 f4       	brge	.+16     	; 0x501a <main+0x2ebe>
		__ticks = 1;
    500a:	fe 01       	movw	r30, r28
    500c:	eb 58       	subi	r30, 0x8B	; 139
    500e:	ff 4f       	sbci	r31, 0xFF	; 255
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	91 83       	std	Z+1, r25	; 0x01
    5016:	80 83       	st	Z, r24
    5018:	64 c0       	rjmp	.+200    	; 0x50e2 <main+0x2f86>
	else if (__tmp > 65535)
    501a:	fe 01       	movw	r30, r28
    501c:	e9 58       	subi	r30, 0x89	; 137
    501e:	ff 4f       	sbci	r31, 0xFF	; 255
    5020:	60 81       	ld	r22, Z
    5022:	71 81       	ldd	r23, Z+1	; 0x01
    5024:	82 81       	ldd	r24, Z+2	; 0x02
    5026:	93 81       	ldd	r25, Z+3	; 0x03
    5028:	20 e0       	ldi	r18, 0x00	; 0
    502a:	3f ef       	ldi	r19, 0xFF	; 255
    502c:	4f e7       	ldi	r20, 0x7F	; 127
    502e:	57 e4       	ldi	r21, 0x47	; 71
    5030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5034:	18 16       	cp	r1, r24
    5036:	0c f0       	brlt	.+2      	; 0x503a <main+0x2ede>
    5038:	43 c0       	rjmp	.+134    	; 0x50c0 <main+0x2f64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    503a:	fe 01       	movw	r30, r28
    503c:	e5 58       	subi	r30, 0x85	; 133
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	60 81       	ld	r22, Z
    5042:	71 81       	ldd	r23, Z+1	; 0x01
    5044:	82 81       	ldd	r24, Z+2	; 0x02
    5046:	93 81       	ldd	r25, Z+3	; 0x03
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	40 e2       	ldi	r20, 0x20	; 32
    504e:	51 e4       	ldi	r21, 0x41	; 65
    5050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5054:	dc 01       	movw	r26, r24
    5056:	cb 01       	movw	r24, r22
    5058:	8e 01       	movw	r16, r28
    505a:	0b 58       	subi	r16, 0x8B	; 139
    505c:	1f 4f       	sbci	r17, 0xFF	; 255
    505e:	bc 01       	movw	r22, r24
    5060:	cd 01       	movw	r24, r26
    5062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5066:	dc 01       	movw	r26, r24
    5068:	cb 01       	movw	r24, r22
    506a:	f8 01       	movw	r30, r16
    506c:	91 83       	std	Z+1, r25	; 0x01
    506e:	80 83       	st	Z, r24
    5070:	1f c0       	rjmp	.+62     	; 0x50b0 <main+0x2f54>
    5072:	fe 01       	movw	r30, r28
    5074:	ed 58       	subi	r30, 0x8D	; 141
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	88 ec       	ldi	r24, 0xC8	; 200
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	91 83       	std	Z+1, r25	; 0x01
    507e:	80 83       	st	Z, r24
    5080:	fe 01       	movw	r30, r28
    5082:	ed 58       	subi	r30, 0x8D	; 141
    5084:	ff 4f       	sbci	r31, 0xFF	; 255
    5086:	80 81       	ld	r24, Z
    5088:	91 81       	ldd	r25, Z+1	; 0x01
    508a:	01 97       	sbiw	r24, 0x01	; 1
    508c:	f1 f7       	brne	.-4      	; 0x508a <main+0x2f2e>
    508e:	fe 01       	movw	r30, r28
    5090:	ed 58       	subi	r30, 0x8D	; 141
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	91 83       	std	Z+1, r25	; 0x01
    5096:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5098:	de 01       	movw	r26, r28
    509a:	ab 58       	subi	r26, 0x8B	; 139
    509c:	bf 4f       	sbci	r27, 0xFF	; 255
    509e:	fe 01       	movw	r30, r28
    50a0:	eb 58       	subi	r30, 0x8B	; 139
    50a2:	ff 4f       	sbci	r31, 0xFF	; 255
    50a4:	80 81       	ld	r24, Z
    50a6:	91 81       	ldd	r25, Z+1	; 0x01
    50a8:	01 97       	sbiw	r24, 0x01	; 1
    50aa:	11 96       	adiw	r26, 0x01	; 1
    50ac:	9c 93       	st	X, r25
    50ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50b0:	fe 01       	movw	r30, r28
    50b2:	eb 58       	subi	r30, 0x8B	; 139
    50b4:	ff 4f       	sbci	r31, 0xFF	; 255
    50b6:	80 81       	ld	r24, Z
    50b8:	91 81       	ldd	r25, Z+1	; 0x01
    50ba:	00 97       	sbiw	r24, 0x00	; 0
    50bc:	d1 f6       	brne	.-76     	; 0x5072 <main+0x2f16>
    50be:	28 c0       	rjmp	.+80     	; 0x5110 <main+0x2fb4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50c0:	8e 01       	movw	r16, r28
    50c2:	0b 58       	subi	r16, 0x8B	; 139
    50c4:	1f 4f       	sbci	r17, 0xFF	; 255
    50c6:	fe 01       	movw	r30, r28
    50c8:	e9 58       	subi	r30, 0x89	; 137
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	60 81       	ld	r22, Z
    50ce:	71 81       	ldd	r23, Z+1	; 0x01
    50d0:	82 81       	ldd	r24, Z+2	; 0x02
    50d2:	93 81       	ldd	r25, Z+3	; 0x03
    50d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d8:	dc 01       	movw	r26, r24
    50da:	cb 01       	movw	r24, r22
    50dc:	f8 01       	movw	r30, r16
    50de:	91 83       	std	Z+1, r25	; 0x01
    50e0:	80 83       	st	Z, r24
    50e2:	de 01       	movw	r26, r28
    50e4:	af 58       	subi	r26, 0x8F	; 143
    50e6:	bf 4f       	sbci	r27, 0xFF	; 255
    50e8:	fe 01       	movw	r30, r28
    50ea:	eb 58       	subi	r30, 0x8B	; 139
    50ec:	ff 4f       	sbci	r31, 0xFF	; 255
    50ee:	80 81       	ld	r24, Z
    50f0:	91 81       	ldd	r25, Z+1	; 0x01
    50f2:	11 96       	adiw	r26, 0x01	; 1
    50f4:	9c 93       	st	X, r25
    50f6:	8e 93       	st	-X, r24
    50f8:	fe 01       	movw	r30, r28
    50fa:	ef 58       	subi	r30, 0x8F	; 143
    50fc:	ff 4f       	sbci	r31, 0xFF	; 255
    50fe:	80 81       	ld	r24, Z
    5100:	91 81       	ldd	r25, Z+1	; 0x01
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	f1 f7       	brne	.-4      	; 0x5102 <main+0x2fa6>
    5106:	fe 01       	movw	r30, r28
    5108:	ef 58       	subi	r30, 0x8F	; 143
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	91 83       	std	Z+1, r25	; 0x01
    510e:	80 83       	st	Z, r24
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
    5110:	fe 01       	movw	r30, r28
    5112:	ef 51       	subi	r30, 0x1F	; 31
    5114:	fe 4f       	sbci	r31, 0xFE	; 254
    5116:	80 81       	ld	r24, Z
    5118:	81 33       	cpi	r24, 0x31	; 49
    511a:	31 f4       	brne	.+12     	; 0x5128 <main+0x2fcc>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
    511c:	fe 01       	movw	r30, r28
    511e:	e2 52       	subi	r30, 0x22	; 34
    5120:	fe 4f       	sbci	r31, 0xFE	; 254
    5122:	8a e0       	ldi	r24, 0x0A	; 10
    5124:	80 83       	st	Z, r24
    5126:	d9 c0       	rjmp	.+434    	; 0x52da <main+0x317e>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
    5128:	fe 01       	movw	r30, r28
    512a:	ef 51       	subi	r30, 0x1F	; 31
    512c:	fe 4f       	sbci	r31, 0xFE	; 254
    512e:	80 81       	ld	r24, Z
    5130:	82 33       	cpi	r24, 0x32	; 50
    5132:	31 f4       	brne	.+12     	; 0x5140 <main+0x2fe4>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
    5134:	fe 01       	movw	r30, r28
    5136:	e2 52       	subi	r30, 0x22	; 34
    5138:	fe 4f       	sbci	r31, 0xFE	; 254
    513a:	89 e0       	ldi	r24, 0x09	; 9
    513c:	80 83       	st	Z, r24
    513e:	cd c0       	rjmp	.+410    	; 0x52da <main+0x317e>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
    5140:	fe 01       	movw	r30, r28
    5142:	ef 51       	subi	r30, 0x1F	; 31
    5144:	fe 4f       	sbci	r31, 0xFE	; 254
    5146:	80 81       	ld	r24, Z
    5148:	80 33       	cpi	r24, 0x30	; 48
    514a:	31 f4       	brne	.+12     	; 0x5158 <main+0x2ffc>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    514c:	fe 01       	movw	r30, r28
    514e:	e2 52       	subi	r30, 0x22	; 34
    5150:	fe 4f       	sbci	r31, 0xFE	; 254
    5152:	82 e0       	ldi	r24, 0x02	; 2
    5154:	80 83       	st	Z, r24
    5156:	c1 c0       	rjmp	.+386    	; 0x52da <main+0x317e>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
    5158:	fe 01       	movw	r30, r28
    515a:	ef 51       	subi	r30, 0x1F	; 31
    515c:	fe 4f       	sbci	r31, 0xFE	; 254
    515e:	80 81       	ld	r24, Z
    5160:	8f 3f       	cpi	r24, 0xFF	; 255
    5162:	09 f4       	brne	.+2      	; 0x5166 <main+0x300a>
    5164:	ba c0       	rjmp	.+372    	; 0x52da <main+0x317e>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5166:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    516a:	87 eb       	ldi	r24, 0xB7	; 183
    516c:	91 e0       	ldi	r25, 0x01	; 1
    516e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5172:	fe 01       	movw	r30, r28
    5174:	e3 59       	subi	r30, 0x93	; 147
    5176:	ff 4f       	sbci	r31, 0xFF	; 255
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	90 e0       	ldi	r25, 0x00	; 0
    517c:	aa ef       	ldi	r26, 0xFA	; 250
    517e:	b3 e4       	ldi	r27, 0x43	; 67
    5180:	80 83       	st	Z, r24
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	a2 83       	std	Z+2, r26	; 0x02
    5186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5188:	8e 01       	movw	r16, r28
    518a:	07 59       	subi	r16, 0x97	; 151
    518c:	1f 4f       	sbci	r17, 0xFF	; 255
    518e:	fe 01       	movw	r30, r28
    5190:	e3 59       	subi	r30, 0x93	; 147
    5192:	ff 4f       	sbci	r31, 0xFF	; 255
    5194:	60 81       	ld	r22, Z
    5196:	71 81       	ldd	r23, Z+1	; 0x01
    5198:	82 81       	ldd	r24, Z+2	; 0x02
    519a:	93 81       	ldd	r25, Z+3	; 0x03
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	4a ef       	ldi	r20, 0xFA	; 250
    51a2:	54 e4       	ldi	r21, 0x44	; 68
    51a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	f8 01       	movw	r30, r16
    51ae:	80 83       	st	Z, r24
    51b0:	91 83       	std	Z+1, r25	; 0x01
    51b2:	a2 83       	std	Z+2, r26	; 0x02
    51b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51b6:	fe 01       	movw	r30, r28
    51b8:	e7 59       	subi	r30, 0x97	; 151
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	60 81       	ld	r22, Z
    51be:	71 81       	ldd	r23, Z+1	; 0x01
    51c0:	82 81       	ldd	r24, Z+2	; 0x02
    51c2:	93 81       	ldd	r25, Z+3	; 0x03
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	40 e8       	ldi	r20, 0x80	; 128
    51ca:	5f e3       	ldi	r21, 0x3F	; 63
    51cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51d0:	88 23       	and	r24, r24
    51d2:	44 f4       	brge	.+16     	; 0x51e4 <main+0x3088>
		__ticks = 1;
    51d4:	fe 01       	movw	r30, r28
    51d6:	e9 59       	subi	r30, 0x99	; 153
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	81 e0       	ldi	r24, 0x01	; 1
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24
    51e2:	64 c0       	rjmp	.+200    	; 0x52ac <main+0x3150>
	else if (__tmp > 65535)
    51e4:	fe 01       	movw	r30, r28
    51e6:	e7 59       	subi	r30, 0x97	; 151
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	60 81       	ld	r22, Z
    51ec:	71 81       	ldd	r23, Z+1	; 0x01
    51ee:	82 81       	ldd	r24, Z+2	; 0x02
    51f0:	93 81       	ldd	r25, Z+3	; 0x03
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	3f ef       	ldi	r19, 0xFF	; 255
    51f6:	4f e7       	ldi	r20, 0x7F	; 127
    51f8:	57 e4       	ldi	r21, 0x47	; 71
    51fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51fe:	18 16       	cp	r1, r24
    5200:	0c f0       	brlt	.+2      	; 0x5204 <main+0x30a8>
    5202:	43 c0       	rjmp	.+134    	; 0x528a <main+0x312e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5204:	fe 01       	movw	r30, r28
    5206:	e3 59       	subi	r30, 0x93	; 147
    5208:	ff 4f       	sbci	r31, 0xFF	; 255
    520a:	60 81       	ld	r22, Z
    520c:	71 81       	ldd	r23, Z+1	; 0x01
    520e:	82 81       	ldd	r24, Z+2	; 0x02
    5210:	93 81       	ldd	r25, Z+3	; 0x03
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e2       	ldi	r20, 0x20	; 32
    5218:	51 e4       	ldi	r21, 0x41	; 65
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	8e 01       	movw	r16, r28
    5224:	09 59       	subi	r16, 0x99	; 153
    5226:	1f 4f       	sbci	r17, 0xFF	; 255
    5228:	bc 01       	movw	r22, r24
    522a:	cd 01       	movw	r24, r26
    522c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5230:	dc 01       	movw	r26, r24
    5232:	cb 01       	movw	r24, r22
    5234:	f8 01       	movw	r30, r16
    5236:	91 83       	std	Z+1, r25	; 0x01
    5238:	80 83       	st	Z, r24
    523a:	1f c0       	rjmp	.+62     	; 0x527a <main+0x311e>
    523c:	fe 01       	movw	r30, r28
    523e:	eb 59       	subi	r30, 0x9B	; 155
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	88 ec       	ldi	r24, 0xC8	; 200
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	91 83       	std	Z+1, r25	; 0x01
    5248:	80 83       	st	Z, r24
    524a:	fe 01       	movw	r30, r28
    524c:	eb 59       	subi	r30, 0x9B	; 155
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	80 81       	ld	r24, Z
    5252:	91 81       	ldd	r25, Z+1	; 0x01
    5254:	01 97       	sbiw	r24, 0x01	; 1
    5256:	f1 f7       	brne	.-4      	; 0x5254 <main+0x30f8>
    5258:	fe 01       	movw	r30, r28
    525a:	eb 59       	subi	r30, 0x9B	; 155
    525c:	ff 4f       	sbci	r31, 0xFF	; 255
    525e:	91 83       	std	Z+1, r25	; 0x01
    5260:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5262:	de 01       	movw	r26, r28
    5264:	a9 59       	subi	r26, 0x99	; 153
    5266:	bf 4f       	sbci	r27, 0xFF	; 255
    5268:	fe 01       	movw	r30, r28
    526a:	e9 59       	subi	r30, 0x99	; 153
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	80 81       	ld	r24, Z
    5270:	91 81       	ldd	r25, Z+1	; 0x01
    5272:	01 97       	sbiw	r24, 0x01	; 1
    5274:	11 96       	adiw	r26, 0x01	; 1
    5276:	9c 93       	st	X, r25
    5278:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    527a:	fe 01       	movw	r30, r28
    527c:	e9 59       	subi	r30, 0x99	; 153
    527e:	ff 4f       	sbci	r31, 0xFF	; 255
    5280:	80 81       	ld	r24, Z
    5282:	91 81       	ldd	r25, Z+1	; 0x01
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	d1 f6       	brne	.-76     	; 0x523c <main+0x30e0>
    5288:	28 c0       	rjmp	.+80     	; 0x52da <main+0x317e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    528a:	8e 01       	movw	r16, r28
    528c:	09 59       	subi	r16, 0x99	; 153
    528e:	1f 4f       	sbci	r17, 0xFF	; 255
    5290:	fe 01       	movw	r30, r28
    5292:	e7 59       	subi	r30, 0x97	; 151
    5294:	ff 4f       	sbci	r31, 0xFF	; 255
    5296:	60 81       	ld	r22, Z
    5298:	71 81       	ldd	r23, Z+1	; 0x01
    529a:	82 81       	ldd	r24, Z+2	; 0x02
    529c:	93 81       	ldd	r25, Z+3	; 0x03
    529e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	f8 01       	movw	r30, r16
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	de 01       	movw	r26, r28
    52ae:	ad 59       	subi	r26, 0x9D	; 157
    52b0:	bf 4f       	sbci	r27, 0xFF	; 255
    52b2:	fe 01       	movw	r30, r28
    52b4:	e9 59       	subi	r30, 0x99	; 153
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	80 81       	ld	r24, Z
    52ba:	91 81       	ldd	r25, Z+1	; 0x01
    52bc:	11 96       	adiw	r26, 0x01	; 1
    52be:	9c 93       	st	X, r25
    52c0:	8e 93       	st	-X, r24
    52c2:	fe 01       	movw	r30, r28
    52c4:	ed 59       	subi	r30, 0x9D	; 157
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	01 97       	sbiw	r24, 0x01	; 1
    52ce:	f1 f7       	brne	.-4      	; 0x52cc <main+0x3170>
    52d0:	fe 01       	movw	r30, r28
    52d2:	ed 59       	subi	r30, 0x9D	; 157
    52d4:	ff 4f       	sbci	r31, 0xFF	; 255
    52d6:	91 83       	std	Z+1, r25	; 0x01
    52d8:	80 83       	st	Z, r24
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    52da:	fe 01       	movw	r30, r28
    52dc:	ef 51       	subi	r30, 0x1F	; 31
    52de:	fe 4f       	sbci	r31, 0xFE	; 254
    52e0:	80 81       	ld	r24, Z
    52e2:	80 33       	cpi	r24, 0x30	; 48
    52e4:	38 f0       	brcs	.+14     	; 0x52f4 <main+0x3198>
    52e6:	fe 01       	movw	r30, r28
    52e8:	ef 51       	subi	r30, 0x1F	; 31
    52ea:	fe 4f       	sbci	r31, 0xFE	; 254
    52ec:	80 81       	ld	r24, Z
    52ee:	83 33       	cpi	r24, 0x33	; 51
    52f0:	08 f4       	brcc	.+2      	; 0x52f4 <main+0x3198>
    52f2:	d5 c4       	rjmp	.+2474   	; 0x5c9e <main+0x3b42>
    52f4:	80 91 a0 02 	lds	r24, 0x02A0
    52f8:	88 23       	and	r24, r24
    52fa:	09 f4       	brne	.+2      	; 0x52fe <main+0x31a2>
    52fc:	3d ce       	rjmp	.-902    	; 0x4f78 <main+0x2e1c>
    52fe:	cf c4       	rjmp	.+2462   	; 0x5c9e <main+0x3b42>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
    5300:	fe 01       	movw	r30, r28
    5302:	ed 51       	subi	r30, 0x1D	; 29
    5304:	fe 4f       	sbci	r31, 0xFE	; 254
    5306:	83 e0       	ldi	r24, 0x03	; 3
    5308:	60 81       	ld	r22, Z
    530a:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    530e:	fe 01       	movw	r30, r28
    5310:	e2 52       	subi	r30, 0x22	; 34
    5312:	fe 4f       	sbci	r31, 0xFE	; 254
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	80 83       	st	Z, r24
    5318:	c2 c4       	rjmp	.+2436   	; 0x5c9e <main+0x3b42>
				break;//End of room1 menu case
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
    531a:	fe 01       	movw	r30, r28
    531c:	ed 51       	subi	r30, 0x1D	; 29
    531e:	fe 4f       	sbci	r31, 0xFE	; 254
    5320:	84 e0       	ldi	r24, 0x04	; 4
    5322:	60 81       	ld	r22, Z
    5324:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    5328:	fe 01       	movw	r30, r28
    532a:	e2 52       	subi	r30, 0x22	; 34
    532c:	fe 4f       	sbci	r31, 0xFE	; 254
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	80 83       	st	Z, r24
    5332:	b5 c4       	rjmp	.+2410   	; 0x5c9e <main+0x3b42>
				break;//End of room2 menu case
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
    5334:	fe 01       	movw	r30, r28
    5336:	ed 51       	subi	r30, 0x1D	; 29
    5338:	fe 4f       	sbci	r31, 0xFE	; 254
    533a:	85 e0       	ldi	r24, 0x05	; 5
    533c:	60 81       	ld	r22, Z
    533e:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    5342:	fe 01       	movw	r30, r28
    5344:	e2 52       	subi	r30, 0x22	; 34
    5346:	fe 4f       	sbci	r31, 0xFE	; 254
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	80 83       	st	Z, r24
    534c:	a8 c4       	rjmp	.+2384   	; 0x5c9e <main+0x3b42>
				break;//End of room3 menu case
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
    534e:	fe 01       	movw	r30, r28
    5350:	ed 51       	subi	r30, 0x1D	; 29
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
    5354:	86 e0       	ldi	r24, 0x06	; 6
    5356:	60 81       	ld	r22, Z
    5358:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
    535c:	fe 01       	movw	r30, r28
    535e:	ed 51       	subi	r30, 0x1D	; 29
    5360:	fe 4f       	sbci	r31, 0xFE	; 254
    5362:	80 81       	ld	r24, Z
    5364:	82 30       	cpi	r24, 0x02	; 2
    5366:	31 f4       	brne	.+12     	; 0x5374 <main+0x3218>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    5368:	fe 01       	movw	r30, r28
    536a:	e2 52       	subi	r30, 0x22	; 34
    536c:	fe 4f       	sbci	r31, 0xFE	; 254
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	80 83       	st	Z, r24
    5372:	95 c4       	rjmp	.+2346   	; 0x5c9e <main+0x3b42>
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    5374:	fe 01       	movw	r30, r28
    5376:	e2 52       	subi	r30, 0x22	; 34
    5378:	fe 4f       	sbci	r31, 0xFE	; 254
    537a:	82 e0       	ldi	r24, 0x02	; 2
    537c:	80 83       	st	Z, r24
    537e:	8f c4       	rjmp	.+2334   	; 0x5c9e <main+0x3b42>
				}
				break;//End of room4 menu case
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
    5380:	fe 01       	movw	r30, r28
    5382:	ed 51       	subi	r30, 0x1D	; 29
    5384:	fe 4f       	sbci	r31, 0xFE	; 254
    5386:	87 e0       	ldi	r24, 0x07	; 7
    5388:	60 81       	ld	r22, Z
    538a:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    538e:	fe 01       	movw	r30, r28
    5390:	e2 52       	subi	r30, 0x22	; 34
    5392:	fe 4f       	sbci	r31, 0xFE	; 254
    5394:	82 e0       	ldi	r24, 0x02	; 2
    5396:	80 83       	st	Z, r24
    5398:	82 c4       	rjmp	.+2308   	; 0x5c9e <main+0x3b42>
				break;//End of TV menu case
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
    539a:	fe 01       	movw	r30, r28
    539c:	ed 51       	subi	r30, 0x1D	; 29
    539e:	fe 4f       	sbci	r31, 0xFE	; 254
    53a0:	89 e0       	ldi	r24, 0x09	; 9
    53a2:	60 81       	ld	r22, Z
    53a4:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    53a8:	fe 01       	movw	r30, r28
    53aa:	e2 52       	subi	r30, 0x22	; 34
    53ac:	fe 4f       	sbci	r31, 0xFE	; 254
    53ae:	88 e0       	ldi	r24, 0x08	; 8
    53b0:	80 83       	st	Z, r24
    53b2:	75 c4       	rjmp	.+2282   	; 0x5c9e <main+0x3b42>
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
    53b4:	fe 01       	movw	r30, r28
    53b6:	ea 51       	subi	r30, 0x1A	; 26
    53b8:	fe 4f       	sbci	r31, 0xFE	; 254
    53ba:	10 82       	st	Z, r1
    53bc:	60 c4       	rjmp	.+2240   	; 0x5c7e <main+0x3b22>
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
    53be:	fe 01       	movw	r30, r28
    53c0:	ef 51       	subi	r30, 0x1F	; 31
    53c2:	fe 4f       	sbci	r31, 0xFE	; 254
    53c4:	8f ef       	ldi	r24, 0xFF	; 255
    53c6:	80 83       	st	Z, r24
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    53c8:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");//print the format of inserting temperature
    53cc:	8b e0       	ldi	r24, 0x0B	; 11
    53ce:	92 e0       	ldi	r25, 0x02	; 2
    53d0:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL); // print the symbol of degree
    53d4:	8f ed       	ldi	r24, 0xDF	; 223
    53d6:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
					LCD_vSend_char('C'); // print the C character
    53da:	83 e4       	ldi	r24, 0x43	; 67
    53dc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
					LCD_movecursor(1,11);//move the cursor to the place to write the entered temperature
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	6b e0       	ldi	r22, 0x0B	; 11
    53e4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
    53e8:	fe 01       	movw	r30, r28
    53ea:	e1 5a       	subi	r30, 0xA1	; 161
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	a8 e4       	ldi	r26, 0x48	; 72
    53f4:	b3 e4       	ldi	r27, 0x43	; 67
    53f6:	80 83       	st	Z, r24
    53f8:	91 83       	std	Z+1, r25	; 0x01
    53fa:	a2 83       	std	Z+2, r26	; 0x02
    53fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fe:	8e 01       	movw	r16, r28
    5400:	05 5a       	subi	r16, 0xA5	; 165
    5402:	1f 4f       	sbci	r17, 0xFF	; 255
    5404:	fe 01       	movw	r30, r28
    5406:	e1 5a       	subi	r30, 0xA1	; 161
    5408:	ff 4f       	sbci	r31, 0xFF	; 255
    540a:	60 81       	ld	r22, Z
    540c:	71 81       	ldd	r23, Z+1	; 0x01
    540e:	82 81       	ldd	r24, Z+2	; 0x02
    5410:	93 81       	ldd	r25, Z+3	; 0x03
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	4a ef       	ldi	r20, 0xFA	; 250
    5418:	54 e4       	ldi	r21, 0x44	; 68
    541a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541e:	dc 01       	movw	r26, r24
    5420:	cb 01       	movw	r24, r22
    5422:	f8 01       	movw	r30, r16
    5424:	80 83       	st	Z, r24
    5426:	91 83       	std	Z+1, r25	; 0x01
    5428:	a2 83       	std	Z+2, r26	; 0x02
    542a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    542c:	fe 01       	movw	r30, r28
    542e:	e5 5a       	subi	r30, 0xA5	; 165
    5430:	ff 4f       	sbci	r31, 0xFF	; 255
    5432:	60 81       	ld	r22, Z
    5434:	71 81       	ldd	r23, Z+1	; 0x01
    5436:	82 81       	ldd	r24, Z+2	; 0x02
    5438:	93 81       	ldd	r25, Z+3	; 0x03
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	40 e8       	ldi	r20, 0x80	; 128
    5440:	5f e3       	ldi	r21, 0x3F	; 63
    5442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5446:	88 23       	and	r24, r24
    5448:	44 f4       	brge	.+16     	; 0x545a <main+0x32fe>
		__ticks = 1;
    544a:	fe 01       	movw	r30, r28
    544c:	e7 5a       	subi	r30, 0xA7	; 167
    544e:	ff 4f       	sbci	r31, 0xFF	; 255
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	91 83       	std	Z+1, r25	; 0x01
    5456:	80 83       	st	Z, r24
    5458:	64 c0       	rjmp	.+200    	; 0x5522 <main+0x33c6>
	else if (__tmp > 65535)
    545a:	fe 01       	movw	r30, r28
    545c:	e5 5a       	subi	r30, 0xA5	; 165
    545e:	ff 4f       	sbci	r31, 0xFF	; 255
    5460:	60 81       	ld	r22, Z
    5462:	71 81       	ldd	r23, Z+1	; 0x01
    5464:	82 81       	ldd	r24, Z+2	; 0x02
    5466:	93 81       	ldd	r25, Z+3	; 0x03
    5468:	20 e0       	ldi	r18, 0x00	; 0
    546a:	3f ef       	ldi	r19, 0xFF	; 255
    546c:	4f e7       	ldi	r20, 0x7F	; 127
    546e:	57 e4       	ldi	r21, 0x47	; 71
    5470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5474:	18 16       	cp	r1, r24
    5476:	0c f0       	brlt	.+2      	; 0x547a <main+0x331e>
    5478:	43 c0       	rjmp	.+134    	; 0x5500 <main+0x33a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    547a:	fe 01       	movw	r30, r28
    547c:	e1 5a       	subi	r30, 0xA1	; 161
    547e:	ff 4f       	sbci	r31, 0xFF	; 255
    5480:	60 81       	ld	r22, Z
    5482:	71 81       	ldd	r23, Z+1	; 0x01
    5484:	82 81       	ldd	r24, Z+2	; 0x02
    5486:	93 81       	ldd	r25, Z+3	; 0x03
    5488:	20 e0       	ldi	r18, 0x00	; 0
    548a:	30 e0       	ldi	r19, 0x00	; 0
    548c:	40 e2       	ldi	r20, 0x20	; 32
    548e:	51 e4       	ldi	r21, 0x41	; 65
    5490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	8e 01       	movw	r16, r28
    549a:	07 5a       	subi	r16, 0xA7	; 167
    549c:	1f 4f       	sbci	r17, 0xFF	; 255
    549e:	bc 01       	movw	r22, r24
    54a0:	cd 01       	movw	r24, r26
    54a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a6:	dc 01       	movw	r26, r24
    54a8:	cb 01       	movw	r24, r22
    54aa:	f8 01       	movw	r30, r16
    54ac:	91 83       	std	Z+1, r25	; 0x01
    54ae:	80 83       	st	Z, r24
    54b0:	1f c0       	rjmp	.+62     	; 0x54f0 <main+0x3394>
    54b2:	fe 01       	movw	r30, r28
    54b4:	e9 5a       	subi	r30, 0xA9	; 169
    54b6:	ff 4f       	sbci	r31, 0xFF	; 255
    54b8:	88 ec       	ldi	r24, 0xC8	; 200
    54ba:	90 e0       	ldi	r25, 0x00	; 0
    54bc:	91 83       	std	Z+1, r25	; 0x01
    54be:	80 83       	st	Z, r24
    54c0:	fe 01       	movw	r30, r28
    54c2:	e9 5a       	subi	r30, 0xA9	; 169
    54c4:	ff 4f       	sbci	r31, 0xFF	; 255
    54c6:	80 81       	ld	r24, Z
    54c8:	91 81       	ldd	r25, Z+1	; 0x01
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	f1 f7       	brne	.-4      	; 0x54ca <main+0x336e>
    54ce:	fe 01       	movw	r30, r28
    54d0:	e9 5a       	subi	r30, 0xA9	; 169
    54d2:	ff 4f       	sbci	r31, 0xFF	; 255
    54d4:	91 83       	std	Z+1, r25	; 0x01
    54d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54d8:	de 01       	movw	r26, r28
    54da:	a7 5a       	subi	r26, 0xA7	; 167
    54dc:	bf 4f       	sbci	r27, 0xFF	; 255
    54de:	fe 01       	movw	r30, r28
    54e0:	e7 5a       	subi	r30, 0xA7	; 167
    54e2:	ff 4f       	sbci	r31, 0xFF	; 255
    54e4:	80 81       	ld	r24, Z
    54e6:	91 81       	ldd	r25, Z+1	; 0x01
    54e8:	01 97       	sbiw	r24, 0x01	; 1
    54ea:	11 96       	adiw	r26, 0x01	; 1
    54ec:	9c 93       	st	X, r25
    54ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54f0:	fe 01       	movw	r30, r28
    54f2:	e7 5a       	subi	r30, 0xA7	; 167
    54f4:	ff 4f       	sbci	r31, 0xFF	; 255
    54f6:	80 81       	ld	r24, Z
    54f8:	91 81       	ldd	r25, Z+1	; 0x01
    54fa:	00 97       	sbiw	r24, 0x00	; 0
    54fc:	d1 f6       	brne	.-76     	; 0x54b2 <main+0x3356>
    54fe:	27 c0       	rjmp	.+78     	; 0x554e <main+0x33f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5500:	8e 01       	movw	r16, r28
    5502:	07 5a       	subi	r16, 0xA7	; 167
    5504:	1f 4f       	sbci	r17, 0xFF	; 255
    5506:	fe 01       	movw	r30, r28
    5508:	e5 5a       	subi	r30, 0xA5	; 165
    550a:	ff 4f       	sbci	r31, 0xFF	; 255
    550c:	60 81       	ld	r22, Z
    550e:	71 81       	ldd	r23, Z+1	; 0x01
    5510:	82 81       	ldd	r24, Z+2	; 0x02
    5512:	93 81       	ldd	r25, Z+3	; 0x03
    5514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5518:	dc 01       	movw	r26, r24
    551a:	cb 01       	movw	r24, r22
    551c:	f8 01       	movw	r30, r16
    551e:	91 83       	std	Z+1, r25	; 0x01
    5520:	80 83       	st	Z, r24
    5522:	de 01       	movw	r26, r28
    5524:	ab 5a       	subi	r26, 0xAB	; 171
    5526:	bf 4f       	sbci	r27, 0xFF	; 255
    5528:	fe 01       	movw	r30, r28
    552a:	e7 5a       	subi	r30, 0xA7	; 167
    552c:	ff 4f       	sbci	r31, 0xFF	; 255
    552e:	80 81       	ld	r24, Z
    5530:	91 81       	ldd	r25, Z+1	; 0x01
    5532:	8d 93       	st	X+, r24
    5534:	9c 93       	st	X, r25
    5536:	fe 01       	movw	r30, r28
    5538:	eb 5a       	subi	r30, 0xAB	; 171
    553a:	ff 4f       	sbci	r31, 0xFF	; 255
    553c:	80 81       	ld	r24, Z
    553e:	91 81       	ldd	r25, Z+1	; 0x01
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <main+0x33e4>
    5544:	fe 01       	movw	r30, r28
    5546:	eb 5a       	subi	r30, 0xAB	; 171
    5548:	ff 4f       	sbci	r31, 0xFF	; 255
    554a:	91 83       	std	Z+1, r25	; 0x01
    554c:	80 83       	st	Z, r24
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    554e:	fe 01       	movw	r30, r28
    5550:	ed 51       	subi	r30, 0x1D	; 29
    5552:	fe 4f       	sbci	r31, 0xFE	; 254
    5554:	80 81       	ld	r24, Z
    5556:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    555a:	fe 01       	movw	r30, r28
    555c:	ef 51       	subi	r30, 0x1F	; 31
    555e:	fe 4f       	sbci	r31, 0xFE	; 254
    5560:	80 83       	st	Z, r24
    5562:	fe 01       	movw	r30, r28
    5564:	ef 5a       	subi	r30, 0xAF	; 175
    5566:	ff 4f       	sbci	r31, 0xFF	; 255
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	aa e7       	ldi	r26, 0x7A	; 122
    556e:	b3 e4       	ldi	r27, 0x43	; 67
    5570:	80 83       	st	Z, r24
    5572:	91 83       	std	Z+1, r25	; 0x01
    5574:	a2 83       	std	Z+2, r26	; 0x02
    5576:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5578:	8e 01       	movw	r16, r28
    557a:	03 5b       	subi	r16, 0xB3	; 179
    557c:	1f 4f       	sbci	r17, 0xFF	; 255
    557e:	fe 01       	movw	r30, r28
    5580:	ef 5a       	subi	r30, 0xAF	; 175
    5582:	ff 4f       	sbci	r31, 0xFF	; 255
    5584:	60 81       	ld	r22, Z
    5586:	71 81       	ldd	r23, Z+1	; 0x01
    5588:	82 81       	ldd	r24, Z+2	; 0x02
    558a:	93 81       	ldd	r25, Z+3	; 0x03
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	4a ef       	ldi	r20, 0xFA	; 250
    5592:	54 e4       	ldi	r21, 0x44	; 68
    5594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	f8 01       	movw	r30, r16
    559e:	80 83       	st	Z, r24
    55a0:	91 83       	std	Z+1, r25	; 0x01
    55a2:	a2 83       	std	Z+2, r26	; 0x02
    55a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55a6:	fe 01       	movw	r30, r28
    55a8:	e3 5b       	subi	r30, 0xB3	; 179
    55aa:	ff 4f       	sbci	r31, 0xFF	; 255
    55ac:	60 81       	ld	r22, Z
    55ae:	71 81       	ldd	r23, Z+1	; 0x01
    55b0:	82 81       	ldd	r24, Z+2	; 0x02
    55b2:	93 81       	ldd	r25, Z+3	; 0x03
    55b4:	20 e0       	ldi	r18, 0x00	; 0
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	40 e8       	ldi	r20, 0x80	; 128
    55ba:	5f e3       	ldi	r21, 0x3F	; 63
    55bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55c0:	88 23       	and	r24, r24
    55c2:	44 f4       	brge	.+16     	; 0x55d4 <main+0x3478>
		__ticks = 1;
    55c4:	fe 01       	movw	r30, r28
    55c6:	e5 5b       	subi	r30, 0xB5	; 181
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	80 83       	st	Z, r24
    55d2:	64 c0       	rjmp	.+200    	; 0x569c <main+0x3540>
	else if (__tmp > 65535)
    55d4:	fe 01       	movw	r30, r28
    55d6:	e3 5b       	subi	r30, 0xB3	; 179
    55d8:	ff 4f       	sbci	r31, 0xFF	; 255
    55da:	60 81       	ld	r22, Z
    55dc:	71 81       	ldd	r23, Z+1	; 0x01
    55de:	82 81       	ldd	r24, Z+2	; 0x02
    55e0:	93 81       	ldd	r25, Z+3	; 0x03
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	3f ef       	ldi	r19, 0xFF	; 255
    55e6:	4f e7       	ldi	r20, 0x7F	; 127
    55e8:	57 e4       	ldi	r21, 0x47	; 71
    55ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ee:	18 16       	cp	r1, r24
    55f0:	0c f0       	brlt	.+2      	; 0x55f4 <main+0x3498>
    55f2:	43 c0       	rjmp	.+134    	; 0x567a <main+0x351e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f4:	fe 01       	movw	r30, r28
    55f6:	ef 5a       	subi	r30, 0xAF	; 175
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	60 81       	ld	r22, Z
    55fc:	71 81       	ldd	r23, Z+1	; 0x01
    55fe:	82 81       	ldd	r24, Z+2	; 0x02
    5600:	93 81       	ldd	r25, Z+3	; 0x03
    5602:	20 e0       	ldi	r18, 0x00	; 0
    5604:	30 e0       	ldi	r19, 0x00	; 0
    5606:	40 e2       	ldi	r20, 0x20	; 32
    5608:	51 e4       	ldi	r21, 0x41	; 65
    560a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	8e 01       	movw	r16, r28
    5614:	05 5b       	subi	r16, 0xB5	; 181
    5616:	1f 4f       	sbci	r17, 0xFF	; 255
    5618:	bc 01       	movw	r22, r24
    561a:	cd 01       	movw	r24, r26
    561c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5620:	dc 01       	movw	r26, r24
    5622:	cb 01       	movw	r24, r22
    5624:	f8 01       	movw	r30, r16
    5626:	91 83       	std	Z+1, r25	; 0x01
    5628:	80 83       	st	Z, r24
    562a:	1f c0       	rjmp	.+62     	; 0x566a <main+0x350e>
    562c:	fe 01       	movw	r30, r28
    562e:	e7 5b       	subi	r30, 0xB7	; 183
    5630:	ff 4f       	sbci	r31, 0xFF	; 255
    5632:	88 ec       	ldi	r24, 0xC8	; 200
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	91 83       	std	Z+1, r25	; 0x01
    5638:	80 83       	st	Z, r24
    563a:	fe 01       	movw	r30, r28
    563c:	e7 5b       	subi	r30, 0xB7	; 183
    563e:	ff 4f       	sbci	r31, 0xFF	; 255
    5640:	80 81       	ld	r24, Z
    5642:	91 81       	ldd	r25, Z+1	; 0x01
    5644:	01 97       	sbiw	r24, 0x01	; 1
    5646:	f1 f7       	brne	.-4      	; 0x5644 <main+0x34e8>
    5648:	fe 01       	movw	r30, r28
    564a:	e7 5b       	subi	r30, 0xB7	; 183
    564c:	ff 4f       	sbci	r31, 0xFF	; 255
    564e:	91 83       	std	Z+1, r25	; 0x01
    5650:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5652:	de 01       	movw	r26, r28
    5654:	a5 5b       	subi	r26, 0xB5	; 181
    5656:	bf 4f       	sbci	r27, 0xFF	; 255
    5658:	fe 01       	movw	r30, r28
    565a:	e5 5b       	subi	r30, 0xB5	; 181
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	80 81       	ld	r24, Z
    5660:	91 81       	ldd	r25, Z+1	; 0x01
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	11 96       	adiw	r26, 0x01	; 1
    5666:	9c 93       	st	X, r25
    5668:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    566a:	fe 01       	movw	r30, r28
    566c:	e5 5b       	subi	r30, 0xB5	; 181
    566e:	ff 4f       	sbci	r31, 0xFF	; 255
    5670:	80 81       	ld	r24, Z
    5672:	91 81       	ldd	r25, Z+1	; 0x01
    5674:	00 97       	sbiw	r24, 0x00	; 0
    5676:	d1 f6       	brne	.-76     	; 0x562c <main+0x34d0>
    5678:	28 c0       	rjmp	.+80     	; 0x56ca <main+0x356e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    567a:	8e 01       	movw	r16, r28
    567c:	05 5b       	subi	r16, 0xB5	; 181
    567e:	1f 4f       	sbci	r17, 0xFF	; 255
    5680:	fe 01       	movw	r30, r28
    5682:	e3 5b       	subi	r30, 0xB3	; 179
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	60 81       	ld	r22, Z
    5688:	71 81       	ldd	r23, Z+1	; 0x01
    568a:	82 81       	ldd	r24, Z+2	; 0x02
    568c:	93 81       	ldd	r25, Z+3	; 0x03
    568e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5692:	dc 01       	movw	r26, r24
    5694:	cb 01       	movw	r24, r22
    5696:	f8 01       	movw	r30, r16
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	80 83       	st	Z, r24
    569c:	de 01       	movw	r26, r28
    569e:	a9 5b       	subi	r26, 0xB9	; 185
    56a0:	bf 4f       	sbci	r27, 0xFF	; 255
    56a2:	fe 01       	movw	r30, r28
    56a4:	e5 5b       	subi	r30, 0xB5	; 181
    56a6:	ff 4f       	sbci	r31, 0xFF	; 255
    56a8:	80 81       	ld	r24, Z
    56aa:	91 81       	ldd	r25, Z+1	; 0x01
    56ac:	11 96       	adiw	r26, 0x01	; 1
    56ae:	9c 93       	st	X, r25
    56b0:	8e 93       	st	-X, r24
    56b2:	fe 01       	movw	r30, r28
    56b4:	e9 5b       	subi	r30, 0xB9	; 185
    56b6:	ff 4f       	sbci	r31, 0xFF	; 255
    56b8:	80 81       	ld	r24, Z
    56ba:	91 81       	ldd	r25, Z+1	; 0x01
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	f1 f7       	brne	.-4      	; 0x56bc <main+0x3560>
    56c0:	fe 01       	movw	r30, r28
    56c2:	e9 5b       	subi	r30, 0xB9	; 185
    56c4:	ff 4f       	sbci	r31, 0xFF	; 255
    56c6:	91 83       	std	Z+1, r25	; 0x01
    56c8:	80 83       	st	Z, r24
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
    56ca:	80 91 a0 02 	lds	r24, 0x02A0
    56ce:	81 30       	cpi	r24, 0x01	; 1
    56d0:	09 f4       	brne	.+2      	; 0x56d4 <main+0x3578>
    56d2:	e0 c2       	rjmp	.+1472   	; 0x5c94 <main+0x3b38>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
    56d4:	fe 01       	movw	r30, r28
    56d6:	ef 51       	subi	r30, 0x1F	; 31
    56d8:	fe 4f       	sbci	r31, 0xFE	; 254
    56da:	80 81       	ld	r24, Z
    56dc:	80 33       	cpi	r24, 0x30	; 48
    56de:	38 f0       	brcs	.+14     	; 0x56ee <main+0x3592>
    56e0:	fe 01       	movw	r30, r28
    56e2:	ef 51       	subi	r30, 0x1F	; 31
    56e4:	fe 4f       	sbci	r31, 0xFE	; 254
    56e6:	80 81       	ld	r24, Z
    56e8:	8a 33       	cpi	r24, 0x3A	; 58
    56ea:	08 f4       	brcc	.+2      	; 0x56ee <main+0x3592>
    56ec:	8c c0       	rjmp	.+280    	; 0x5806 <main+0x36aa>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    56ee:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    56f2:	87 eb       	ldi	r24, 0xB7	; 183
    56f4:	91 e0       	ldi	r25, 0x01	; 1
    56f6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    56fa:	fe 01       	movw	r30, r28
    56fc:	ed 5b       	subi	r30, 0xBD	; 189
    56fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5700:	80 e0       	ldi	r24, 0x00	; 0
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	aa ef       	ldi	r26, 0xFA	; 250
    5706:	b3 e4       	ldi	r27, 0x43	; 67
    5708:	80 83       	st	Z, r24
    570a:	91 83       	std	Z+1, r25	; 0x01
    570c:	a2 83       	std	Z+2, r26	; 0x02
    570e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5710:	8e 01       	movw	r16, r28
    5712:	01 5c       	subi	r16, 0xC1	; 193
    5714:	1f 4f       	sbci	r17, 0xFF	; 255
    5716:	fe 01       	movw	r30, r28
    5718:	ed 5b       	subi	r30, 0xBD	; 189
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	60 81       	ld	r22, Z
    571e:	71 81       	ldd	r23, Z+1	; 0x01
    5720:	82 81       	ldd	r24, Z+2	; 0x02
    5722:	93 81       	ldd	r25, Z+3	; 0x03
    5724:	20 e0       	ldi	r18, 0x00	; 0
    5726:	30 e0       	ldi	r19, 0x00	; 0
    5728:	4a ef       	ldi	r20, 0xFA	; 250
    572a:	54 e4       	ldi	r21, 0x44	; 68
    572c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5730:	dc 01       	movw	r26, r24
    5732:	cb 01       	movw	r24, r22
    5734:	f8 01       	movw	r30, r16
    5736:	80 83       	st	Z, r24
    5738:	91 83       	std	Z+1, r25	; 0x01
    573a:	a2 83       	std	Z+2, r26	; 0x02
    573c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    573e:	fe 01       	movw	r30, r28
    5740:	ff 96       	adiw	r30, 0x3f	; 63
    5742:	60 81       	ld	r22, Z
    5744:	71 81       	ldd	r23, Z+1	; 0x01
    5746:	82 81       	ldd	r24, Z+2	; 0x02
    5748:	93 81       	ldd	r25, Z+3	; 0x03
    574a:	20 e0       	ldi	r18, 0x00	; 0
    574c:	30 e0       	ldi	r19, 0x00	; 0
    574e:	40 e8       	ldi	r20, 0x80	; 128
    5750:	5f e3       	ldi	r21, 0x3F	; 63
    5752:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5756:	88 23       	and	r24, r24
    5758:	2c f4       	brge	.+10     	; 0x5764 <main+0x3608>
		__ticks = 1;
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	9e af       	std	Y+62, r25	; 0x3e
    5760:	8d af       	std	Y+61, r24	; 0x3d
    5762:	46 c0       	rjmp	.+140    	; 0x57f0 <main+0x3694>
	else if (__tmp > 65535)
    5764:	fe 01       	movw	r30, r28
    5766:	ff 96       	adiw	r30, 0x3f	; 63
    5768:	60 81       	ld	r22, Z
    576a:	71 81       	ldd	r23, Z+1	; 0x01
    576c:	82 81       	ldd	r24, Z+2	; 0x02
    576e:	93 81       	ldd	r25, Z+3	; 0x03
    5770:	20 e0       	ldi	r18, 0x00	; 0
    5772:	3f ef       	ldi	r19, 0xFF	; 255
    5774:	4f e7       	ldi	r20, 0x7F	; 127
    5776:	57 e4       	ldi	r21, 0x47	; 71
    5778:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    577c:	18 16       	cp	r1, r24
    577e:	64 f5       	brge	.+88     	; 0x57d8 <main+0x367c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5780:	fe 01       	movw	r30, r28
    5782:	ed 5b       	subi	r30, 0xBD	; 189
    5784:	ff 4f       	sbci	r31, 0xFF	; 255
    5786:	60 81       	ld	r22, Z
    5788:	71 81       	ldd	r23, Z+1	; 0x01
    578a:	82 81       	ldd	r24, Z+2	; 0x02
    578c:	93 81       	ldd	r25, Z+3	; 0x03
    578e:	20 e0       	ldi	r18, 0x00	; 0
    5790:	30 e0       	ldi	r19, 0x00	; 0
    5792:	40 e2       	ldi	r20, 0x20	; 32
    5794:	51 e4       	ldi	r21, 0x41	; 65
    5796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    579a:	dc 01       	movw	r26, r24
    579c:	cb 01       	movw	r24, r22
    579e:	bc 01       	movw	r22, r24
    57a0:	cd 01       	movw	r24, r26
    57a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57a6:	dc 01       	movw	r26, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	9e af       	std	Y+62, r25	; 0x3e
    57ac:	8d af       	std	Y+61, r24	; 0x3d
    57ae:	0f c0       	rjmp	.+30     	; 0x57ce <main+0x3672>
    57b0:	88 ec       	ldi	r24, 0xC8	; 200
    57b2:	90 e0       	ldi	r25, 0x00	; 0
    57b4:	9c af       	std	Y+60, r25	; 0x3c
    57b6:	8b af       	std	Y+59, r24	; 0x3b
    57b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    57ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    57bc:	01 97       	sbiw	r24, 0x01	; 1
    57be:	f1 f7       	brne	.-4      	; 0x57bc <main+0x3660>
    57c0:	9c af       	std	Y+60, r25	; 0x3c
    57c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    57c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    57c8:	01 97       	sbiw	r24, 0x01	; 1
    57ca:	9e af       	std	Y+62, r25	; 0x3e
    57cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    57d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    57d2:	00 97       	sbiw	r24, 0x00	; 0
    57d4:	69 f7       	brne	.-38     	; 0x57b0 <main+0x3654>
    57d6:	53 c2       	rjmp	.+1190   	; 0x5c7e <main+0x3b22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57d8:	fe 01       	movw	r30, r28
    57da:	ff 96       	adiw	r30, 0x3f	; 63
    57dc:	60 81       	ld	r22, Z
    57de:	71 81       	ldd	r23, Z+1	; 0x01
    57e0:	82 81       	ldd	r24, Z+2	; 0x02
    57e2:	93 81       	ldd	r25, Z+3	; 0x03
    57e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	9e af       	std	Y+62, r25	; 0x3e
    57ee:	8d af       	std	Y+61, r24	; 0x3d
    57f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    57f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    57f4:	9a af       	std	Y+58, r25	; 0x3a
    57f6:	89 af       	std	Y+57, r24	; 0x39
    57f8:	89 ad       	ldd	r24, Y+57	; 0x39
    57fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	f1 f7       	brne	.-4      	; 0x57fc <main+0x36a0>
    5800:	9a af       	std	Y+58, r25	; 0x3a
    5802:	89 af       	std	Y+57, r24	; 0x39
    5804:	3c c2       	rjmp	.+1144   	; 0x5c7e <main+0x3b22>
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    5806:	fe 01       	movw	r30, r28
    5808:	ef 51       	subi	r30, 0x1F	; 31
    580a:	fe 4f       	sbci	r31, 0xFE	; 254
    580c:	80 81       	ld	r24, Z
    580e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
    5812:	de 01       	movw	r26, r28
    5814:	ac 51       	subi	r26, 0x1C	; 28
    5816:	be 4f       	sbci	r27, 0xFE	; 254
    5818:	fe 01       	movw	r30, r28
    581a:	ef 51       	subi	r30, 0x1F	; 31
    581c:	fe 4f       	sbci	r31, 0xFE	; 254
    581e:	80 81       	ld	r24, Z
    5820:	80 53       	subi	r24, 0x30	; 48
    5822:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
    5824:	fe 01       	movw	r30, r28
    5826:	ef 51       	subi	r30, 0x1F	; 31
    5828:	fe 4f       	sbci	r31, 0xFE	; 254
    582a:	8f ef       	ldi	r24, 0xFF	; 255
    582c:	80 83       	st	Z, r24
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    582e:	fe 01       	movw	r30, r28
    5830:	ed 51       	subi	r30, 0x1D	; 29
    5832:	fe 4f       	sbci	r31, 0xFE	; 254
    5834:	80 81       	ld	r24, Z
    5836:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    583a:	fe 01       	movw	r30, r28
    583c:	ef 51       	subi	r30, 0x1F	; 31
    583e:	fe 4f       	sbci	r31, 0xFE	; 254
    5840:	80 83       	st	Z, r24
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	aa e7       	ldi	r26, 0x7A	; 122
    5848:	b3 e4       	ldi	r27, 0x43	; 67
    584a:	8d ab       	std	Y+53, r24	; 0x35
    584c:	9e ab       	std	Y+54, r25	; 0x36
    584e:	af ab       	std	Y+55, r26	; 0x37
    5850:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5852:	6d a9       	ldd	r22, Y+53	; 0x35
    5854:	7e a9       	ldd	r23, Y+54	; 0x36
    5856:	8f a9       	ldd	r24, Y+55	; 0x37
    5858:	98 ad       	ldd	r25, Y+56	; 0x38
    585a:	20 e0       	ldi	r18, 0x00	; 0
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	4a ef       	ldi	r20, 0xFA	; 250
    5860:	54 e4       	ldi	r21, 0x44	; 68
    5862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5866:	dc 01       	movw	r26, r24
    5868:	cb 01       	movw	r24, r22
    586a:	89 ab       	std	Y+49, r24	; 0x31
    586c:	9a ab       	std	Y+50, r25	; 0x32
    586e:	ab ab       	std	Y+51, r26	; 0x33
    5870:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5872:	69 a9       	ldd	r22, Y+49	; 0x31
    5874:	7a a9       	ldd	r23, Y+50	; 0x32
    5876:	8b a9       	ldd	r24, Y+51	; 0x33
    5878:	9c a9       	ldd	r25, Y+52	; 0x34
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	40 e8       	ldi	r20, 0x80	; 128
    5880:	5f e3       	ldi	r21, 0x3F	; 63
    5882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5886:	88 23       	and	r24, r24
    5888:	2c f4       	brge	.+10     	; 0x5894 <main+0x3738>
		__ticks = 1;
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	98 ab       	std	Y+48, r25	; 0x30
    5890:	8f a7       	std	Y+47, r24	; 0x2f
    5892:	3f c0       	rjmp	.+126    	; 0x5912 <main+0x37b6>
	else if (__tmp > 65535)
    5894:	69 a9       	ldd	r22, Y+49	; 0x31
    5896:	7a a9       	ldd	r23, Y+50	; 0x32
    5898:	8b a9       	ldd	r24, Y+51	; 0x33
    589a:	9c a9       	ldd	r25, Y+52	; 0x34
    589c:	20 e0       	ldi	r18, 0x00	; 0
    589e:	3f ef       	ldi	r19, 0xFF	; 255
    58a0:	4f e7       	ldi	r20, 0x7F	; 127
    58a2:	57 e4       	ldi	r21, 0x47	; 71
    58a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58a8:	18 16       	cp	r1, r24
    58aa:	4c f5       	brge	.+82     	; 0x58fe <main+0x37a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58ac:	6d a9       	ldd	r22, Y+53	; 0x35
    58ae:	7e a9       	ldd	r23, Y+54	; 0x36
    58b0:	8f a9       	ldd	r24, Y+55	; 0x37
    58b2:	98 ad       	ldd	r25, Y+56	; 0x38
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	40 e2       	ldi	r20, 0x20	; 32
    58ba:	51 e4       	ldi	r21, 0x41	; 65
    58bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58c0:	dc 01       	movw	r26, r24
    58c2:	cb 01       	movw	r24, r22
    58c4:	bc 01       	movw	r22, r24
    58c6:	cd 01       	movw	r24, r26
    58c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58cc:	dc 01       	movw	r26, r24
    58ce:	cb 01       	movw	r24, r22
    58d0:	98 ab       	std	Y+48, r25	; 0x30
    58d2:	8f a7       	std	Y+47, r24	; 0x2f
    58d4:	0f c0       	rjmp	.+30     	; 0x58f4 <main+0x3798>
    58d6:	88 ec       	ldi	r24, 0xC8	; 200
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	9e a7       	std	Y+46, r25	; 0x2e
    58dc:	8d a7       	std	Y+45, r24	; 0x2d
    58de:	8d a5       	ldd	r24, Y+45	; 0x2d
    58e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    58e2:	01 97       	sbiw	r24, 0x01	; 1
    58e4:	f1 f7       	brne	.-4      	; 0x58e2 <main+0x3786>
    58e6:	9e a7       	std	Y+46, r25	; 0x2e
    58e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    58ec:	98 a9       	ldd	r25, Y+48	; 0x30
    58ee:	01 97       	sbiw	r24, 0x01	; 1
    58f0:	98 ab       	std	Y+48, r25	; 0x30
    58f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    58f6:	98 a9       	ldd	r25, Y+48	; 0x30
    58f8:	00 97       	sbiw	r24, 0x00	; 0
    58fa:	69 f7       	brne	.-38     	; 0x58d6 <main+0x377a>
    58fc:	14 c0       	rjmp	.+40     	; 0x5926 <main+0x37ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58fe:	69 a9       	ldd	r22, Y+49	; 0x31
    5900:	7a a9       	ldd	r23, Y+50	; 0x32
    5902:	8b a9       	ldd	r24, Y+51	; 0x33
    5904:	9c a9       	ldd	r25, Y+52	; 0x34
    5906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    590a:	dc 01       	movw	r26, r24
    590c:	cb 01       	movw	r24, r22
    590e:	98 ab       	std	Y+48, r25	; 0x30
    5910:	8f a7       	std	Y+47, r24	; 0x2f
    5912:	8f a5       	ldd	r24, Y+47	; 0x2f
    5914:	98 a9       	ldd	r25, Y+48	; 0x30
    5916:	9c a7       	std	Y+44, r25	; 0x2c
    5918:	8b a7       	std	Y+43, r24	; 0x2b
    591a:	8b a5       	ldd	r24, Y+43	; 0x2b
    591c:	9c a5       	ldd	r25, Y+44	; 0x2c
    591e:	01 97       	sbiw	r24, 0x01	; 1
    5920:	f1 f7       	brne	.-4      	; 0x591e <main+0x37c2>
    5922:	9c a7       	std	Y+44, r25	; 0x2c
    5924:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)//if the user session is timeout
    5926:	80 91 a0 02 	lds	r24, 0x02A0
    592a:	81 30       	cpi	r24, 0x01	; 1
    592c:	09 f4       	brne	.+2      	; 0x5930 <main+0x37d4>
    592e:	b2 c1       	rjmp	.+868    	; 0x5c94 <main+0x3b38>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
    5930:	fe 01       	movw	r30, r28
    5932:	ef 51       	subi	r30, 0x1F	; 31
    5934:	fe 4f       	sbci	r31, 0xFE	; 254
    5936:	80 81       	ld	r24, Z
    5938:	80 33       	cpi	r24, 0x30	; 48
    593a:	38 f0       	brcs	.+14     	; 0x594a <main+0x37ee>
    593c:	fe 01       	movw	r30, r28
    593e:	ef 51       	subi	r30, 0x1F	; 31
    5940:	fe 4f       	sbci	r31, 0xFE	; 254
    5942:	80 81       	ld	r24, Z
    5944:	8a 33       	cpi	r24, 0x3A	; 58
    5946:	08 f4       	brcc	.+2      	; 0x594a <main+0x37ee>
    5948:	79 c0       	rjmp	.+242    	; 0x5a3c <main+0x38e0>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    594a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    594e:	87 eb       	ldi	r24, 0xB7	; 183
    5950:	91 e0       	ldi	r25, 0x01	; 1
    5952:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	90 e0       	ldi	r25, 0x00	; 0
    595a:	aa ef       	ldi	r26, 0xFA	; 250
    595c:	b3 e4       	ldi	r27, 0x43	; 67
    595e:	8f a3       	std	Y+39, r24	; 0x27
    5960:	98 a7       	std	Y+40, r25	; 0x28
    5962:	a9 a7       	std	Y+41, r26	; 0x29
    5964:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5966:	6f a1       	ldd	r22, Y+39	; 0x27
    5968:	78 a5       	ldd	r23, Y+40	; 0x28
    596a:	89 a5       	ldd	r24, Y+41	; 0x29
    596c:	9a a5       	ldd	r25, Y+42	; 0x2a
    596e:	20 e0       	ldi	r18, 0x00	; 0
    5970:	30 e0       	ldi	r19, 0x00	; 0
    5972:	4a ef       	ldi	r20, 0xFA	; 250
    5974:	54 e4       	ldi	r21, 0x44	; 68
    5976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    597a:	dc 01       	movw	r26, r24
    597c:	cb 01       	movw	r24, r22
    597e:	8b a3       	std	Y+35, r24	; 0x23
    5980:	9c a3       	std	Y+36, r25	; 0x24
    5982:	ad a3       	std	Y+37, r26	; 0x25
    5984:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5986:	6b a1       	ldd	r22, Y+35	; 0x23
    5988:	7c a1       	ldd	r23, Y+36	; 0x24
    598a:	8d a1       	ldd	r24, Y+37	; 0x25
    598c:	9e a1       	ldd	r25, Y+38	; 0x26
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	40 e8       	ldi	r20, 0x80	; 128
    5994:	5f e3       	ldi	r21, 0x3F	; 63
    5996:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    599a:	88 23       	and	r24, r24
    599c:	2c f4       	brge	.+10     	; 0x59a8 <main+0x384c>
		__ticks = 1;
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	9a a3       	std	Y+34, r25	; 0x22
    59a4:	89 a3       	std	Y+33, r24	; 0x21
    59a6:	3f c0       	rjmp	.+126    	; 0x5a26 <main+0x38ca>
	else if (__tmp > 65535)
    59a8:	6b a1       	ldd	r22, Y+35	; 0x23
    59aa:	7c a1       	ldd	r23, Y+36	; 0x24
    59ac:	8d a1       	ldd	r24, Y+37	; 0x25
    59ae:	9e a1       	ldd	r25, Y+38	; 0x26
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	3f ef       	ldi	r19, 0xFF	; 255
    59b4:	4f e7       	ldi	r20, 0x7F	; 127
    59b6:	57 e4       	ldi	r21, 0x47	; 71
    59b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59bc:	18 16       	cp	r1, r24
    59be:	4c f5       	brge	.+82     	; 0x5a12 <main+0x38b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59c0:	6f a1       	ldd	r22, Y+39	; 0x27
    59c2:	78 a5       	ldd	r23, Y+40	; 0x28
    59c4:	89 a5       	ldd	r24, Y+41	; 0x29
    59c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	40 e2       	ldi	r20, 0x20	; 32
    59ce:	51 e4       	ldi	r21, 0x41	; 65
    59d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d4:	dc 01       	movw	r26, r24
    59d6:	cb 01       	movw	r24, r22
    59d8:	bc 01       	movw	r22, r24
    59da:	cd 01       	movw	r24, r26
    59dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59e0:	dc 01       	movw	r26, r24
    59e2:	cb 01       	movw	r24, r22
    59e4:	9a a3       	std	Y+34, r25	; 0x22
    59e6:	89 a3       	std	Y+33, r24	; 0x21
    59e8:	0f c0       	rjmp	.+30     	; 0x5a08 <main+0x38ac>
    59ea:	88 ec       	ldi	r24, 0xC8	; 200
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	98 a3       	std	Y+32, r25	; 0x20
    59f0:	8f 8f       	std	Y+31, r24	; 0x1f
    59f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59f4:	98 a1       	ldd	r25, Y+32	; 0x20
    59f6:	01 97       	sbiw	r24, 0x01	; 1
    59f8:	f1 f7       	brne	.-4      	; 0x59f6 <main+0x389a>
    59fa:	98 a3       	std	Y+32, r25	; 0x20
    59fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59fe:	89 a1       	ldd	r24, Y+33	; 0x21
    5a00:	9a a1       	ldd	r25, Y+34	; 0x22
    5a02:	01 97       	sbiw	r24, 0x01	; 1
    5a04:	9a a3       	std	Y+34, r25	; 0x22
    5a06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a08:	89 a1       	ldd	r24, Y+33	; 0x21
    5a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    5a0c:	00 97       	sbiw	r24, 0x00	; 0
    5a0e:	69 f7       	brne	.-38     	; 0x59ea <main+0x388e>
    5a10:	36 c1       	rjmp	.+620    	; 0x5c7e <main+0x3b22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a12:	6b a1       	ldd	r22, Y+35	; 0x23
    5a14:	7c a1       	ldd	r23, Y+36	; 0x24
    5a16:	8d a1       	ldd	r24, Y+37	; 0x25
    5a18:	9e a1       	ldd	r25, Y+38	; 0x26
    5a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a1e:	dc 01       	movw	r26, r24
    5a20:	cb 01       	movw	r24, r22
    5a22:	9a a3       	std	Y+34, r25	; 0x22
    5a24:	89 a3       	std	Y+33, r24	; 0x21
    5a26:	89 a1       	ldd	r24, Y+33	; 0x21
    5a28:	9a a1       	ldd	r25, Y+34	; 0x22
    5a2a:	9e 8f       	std	Y+30, r25	; 0x1e
    5a2c:	8d 8f       	std	Y+29, r24	; 0x1d
    5a2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a32:	01 97       	sbiw	r24, 0x01	; 1
    5a34:	f1 f7       	brne	.-4      	; 0x5a32 <main+0x38d6>
    5a36:	9e 8f       	std	Y+30, r25	; 0x1e
    5a38:	8d 8f       	std	Y+29, r24	; 0x1d
    5a3a:	21 c1       	rjmp	.+578    	; 0x5c7e <main+0x3b22>
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    5a3c:	fe 01       	movw	r30, r28
    5a3e:	ef 51       	subi	r30, 0x1F	; 31
    5a40:	fe 4f       	sbci	r31, 0xFE	; 254
    5a42:	80 81       	ld	r24, Z
    5a44:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
    5a48:	de 01       	movw	r26, r28
    5a4a:	ab 51       	subi	r26, 0x1B	; 27
    5a4c:	be 4f       	sbci	r27, 0xFE	; 254
    5a4e:	fe 01       	movw	r30, r28
    5a50:	ef 51       	subi	r30, 0x1F	; 31
    5a52:	fe 4f       	sbci	r31, 0xFE	; 254
    5a54:	80 81       	ld	r24, Z
    5a56:	80 53       	subi	r24, 0x30	; 48
    5a58:	8c 93       	st	X, r24
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
    5a5a:	fe 01       	movw	r30, r28
    5a5c:	ef 51       	subi	r30, 0x1F	; 31
    5a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	80 83       	st	Z, r24
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
    5a64:	fe 01       	movw	r30, r28
    5a66:	ec 51       	subi	r30, 0x1C	; 28
    5a68:	fe 4f       	sbci	r31, 0xFE	; 254
    5a6a:	80 81       	ld	r24, Z
    5a6c:	88 2f       	mov	r24, r24
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	9c 01       	movw	r18, r24
    5a72:	22 0f       	add	r18, r18
    5a74:	33 1f       	adc	r19, r19
    5a76:	c9 01       	movw	r24, r18
    5a78:	88 0f       	add	r24, r24
    5a7a:	99 1f       	adc	r25, r25
    5a7c:	88 0f       	add	r24, r24
    5a7e:	99 1f       	adc	r25, r25
    5a80:	82 0f       	add	r24, r18
    5a82:	93 1f       	adc	r25, r19
    5a84:	98 2f       	mov	r25, r24
    5a86:	de 01       	movw	r26, r28
    5a88:	aa 51       	subi	r26, 0x1A	; 26
    5a8a:	be 4f       	sbci	r27, 0xFE	; 254
    5a8c:	fe 01       	movw	r30, r28
    5a8e:	eb 51       	subi	r30, 0x1B	; 27
    5a90:	fe 4f       	sbci	r31, 0xFE	; 254
    5a92:	80 81       	ld	r24, Z
    5a94:	89 0f       	add	r24, r25
    5a96:	8c 93       	st	X, r24
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
    5a98:	80 e4       	ldi	r24, 0x40	; 64
    5a9a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	a8 e4       	ldi	r26, 0x48	; 72
    5aa4:	b3 e4       	ldi	r27, 0x43	; 67
    5aa6:	89 8f       	std	Y+25, r24	; 0x19
    5aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    5aaa:	ab 8f       	std	Y+27, r26	; 0x1b
    5aac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aae:	69 8d       	ldd	r22, Y+25	; 0x19
    5ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ab6:	20 e0       	ldi	r18, 0x00	; 0
    5ab8:	30 e0       	ldi	r19, 0x00	; 0
    5aba:	4a ef       	ldi	r20, 0xFA	; 250
    5abc:	54 e4       	ldi	r21, 0x44	; 68
    5abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac2:	dc 01       	movw	r26, r24
    5ac4:	cb 01       	movw	r24, r22
    5ac6:	8d 8b       	std	Y+21, r24	; 0x15
    5ac8:	9e 8b       	std	Y+22, r25	; 0x16
    5aca:	af 8b       	std	Y+23, r26	; 0x17
    5acc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ace:	6d 89       	ldd	r22, Y+21	; 0x15
    5ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ad6:	20 e0       	ldi	r18, 0x00	; 0
    5ad8:	30 e0       	ldi	r19, 0x00	; 0
    5ada:	40 e8       	ldi	r20, 0x80	; 128
    5adc:	5f e3       	ldi	r21, 0x3F	; 63
    5ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ae2:	88 23       	and	r24, r24
    5ae4:	2c f4       	brge	.+10     	; 0x5af0 <main+0x3994>
		__ticks = 1;
    5ae6:	81 e0       	ldi	r24, 0x01	; 1
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	9c 8b       	std	Y+20, r25	; 0x14
    5aec:	8b 8b       	std	Y+19, r24	; 0x13
    5aee:	3f c0       	rjmp	.+126    	; 0x5b6e <main+0x3a12>
	else if (__tmp > 65535)
    5af0:	6d 89       	ldd	r22, Y+21	; 0x15
    5af2:	7e 89       	ldd	r23, Y+22	; 0x16
    5af4:	8f 89       	ldd	r24, Y+23	; 0x17
    5af6:	98 8d       	ldd	r25, Y+24	; 0x18
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	3f ef       	ldi	r19, 0xFF	; 255
    5afc:	4f e7       	ldi	r20, 0x7F	; 127
    5afe:	57 e4       	ldi	r21, 0x47	; 71
    5b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b04:	18 16       	cp	r1, r24
    5b06:	4c f5       	brge	.+82     	; 0x5b5a <main+0x39fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b08:	69 8d       	ldd	r22, Y+25	; 0x19
    5b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b10:	20 e0       	ldi	r18, 0x00	; 0
    5b12:	30 e0       	ldi	r19, 0x00	; 0
    5b14:	40 e2       	ldi	r20, 0x20	; 32
    5b16:	51 e4       	ldi	r21, 0x41	; 65
    5b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	cb 01       	movw	r24, r22
    5b20:	bc 01       	movw	r22, r24
    5b22:	cd 01       	movw	r24, r26
    5b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	9c 8b       	std	Y+20, r25	; 0x14
    5b2e:	8b 8b       	std	Y+19, r24	; 0x13
    5b30:	0f c0       	rjmp	.+30     	; 0x5b50 <main+0x39f4>
    5b32:	88 ec       	ldi	r24, 0xC8	; 200
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	9a 8b       	std	Y+18, r25	; 0x12
    5b38:	89 8b       	std	Y+17, r24	; 0x11
    5b3a:	89 89       	ldd	r24, Y+17	; 0x11
    5b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    5b3e:	01 97       	sbiw	r24, 0x01	; 1
    5b40:	f1 f7       	brne	.-4      	; 0x5b3e <main+0x39e2>
    5b42:	9a 8b       	std	Y+18, r25	; 0x12
    5b44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b46:	8b 89       	ldd	r24, Y+19	; 0x13
    5b48:	9c 89       	ldd	r25, Y+20	; 0x14
    5b4a:	01 97       	sbiw	r24, 0x01	; 1
    5b4c:	9c 8b       	std	Y+20, r25	; 0x14
    5b4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b50:	8b 89       	ldd	r24, Y+19	; 0x13
    5b52:	9c 89       	ldd	r25, Y+20	; 0x14
    5b54:	00 97       	sbiw	r24, 0x00	; 0
    5b56:	69 f7       	brne	.-38     	; 0x5b32 <main+0x39d6>
    5b58:	14 c0       	rjmp	.+40     	; 0x5b82 <main+0x3a26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    5b60:	98 8d       	ldd	r25, Y+24	; 0x18
    5b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b66:	dc 01       	movw	r26, r24
    5b68:	cb 01       	movw	r24, r22
    5b6a:	9c 8b       	std	Y+20, r25	; 0x14
    5b6c:	8b 8b       	std	Y+19, r24	; 0x13
    5b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    5b70:	9c 89       	ldd	r25, Y+20	; 0x14
    5b72:	98 8b       	std	Y+16, r25	; 0x10
    5b74:	8f 87       	std	Y+15, r24	; 0x0f
    5b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b78:	98 89       	ldd	r25, Y+16	; 0x10
    5b7a:	01 97       	sbiw	r24, 0x01	; 1
    5b7c:	f1 f7       	brne	.-4      	; 0x5b7a <main+0x3a1e>
    5b7e:	98 8b       	std	Y+16, r25	; 0x10
    5b80:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
    5b82:	fe 01       	movw	r30, r28
    5b84:	ea 51       	subi	r30, 0x1A	; 26
    5b86:	fe 4f       	sbci	r31, 0xFE	; 254
    5b88:	80 81       	ld	r24, Z
    5b8a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5b8e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");//show the message
    5b92:	89 e1       	ldi	r24, 0x19	; 25
    5b94:	92 e0       	ldi	r25, 0x02	; 2
    5b96:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5b9a:	80 e0       	ldi	r24, 0x00	; 0
    5b9c:	90 e0       	ldi	r25, 0x00	; 0
    5b9e:	aa ef       	ldi	r26, 0xFA	; 250
    5ba0:	b3 e4       	ldi	r27, 0x43	; 67
    5ba2:	8b 87       	std	Y+11, r24	; 0x0b
    5ba4:	9c 87       	std	Y+12, r25	; 0x0c
    5ba6:	ad 87       	std	Y+13, r26	; 0x0d
    5ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bb2:	20 e0       	ldi	r18, 0x00	; 0
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	4a ef       	ldi	r20, 0xFA	; 250
    5bb8:	54 e4       	ldi	r21, 0x44	; 68
    5bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	8f 83       	std	Y+7, r24	; 0x07
    5bc4:	98 87       	std	Y+8, r25	; 0x08
    5bc6:	a9 87       	std	Y+9, r26	; 0x09
    5bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5bca:	6f 81       	ldd	r22, Y+7	; 0x07
    5bcc:	78 85       	ldd	r23, Y+8	; 0x08
    5bce:	89 85       	ldd	r24, Y+9	; 0x09
    5bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	40 e8       	ldi	r20, 0x80	; 128
    5bd8:	5f e3       	ldi	r21, 0x3F	; 63
    5bda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5bde:	88 23       	and	r24, r24
    5be0:	2c f4       	brge	.+10     	; 0x5bec <main+0x3a90>
		__ticks = 1;
    5be2:	81 e0       	ldi	r24, 0x01	; 1
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	9e 83       	std	Y+6, r25	; 0x06
    5be8:	8d 83       	std	Y+5, r24	; 0x05
    5bea:	3f c0       	rjmp	.+126    	; 0x5c6a <main+0x3b0e>
	else if (__tmp > 65535)
    5bec:	6f 81       	ldd	r22, Y+7	; 0x07
    5bee:	78 85       	ldd	r23, Y+8	; 0x08
    5bf0:	89 85       	ldd	r24, Y+9	; 0x09
    5bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf4:	20 e0       	ldi	r18, 0x00	; 0
    5bf6:	3f ef       	ldi	r19, 0xFF	; 255
    5bf8:	4f e7       	ldi	r20, 0x7F	; 127
    5bfa:	57 e4       	ldi	r21, 0x47	; 71
    5bfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c00:	18 16       	cp	r1, r24
    5c02:	4c f5       	brge	.+82     	; 0x5c56 <main+0x3afa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c04:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c06:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c08:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	30 e0       	ldi	r19, 0x00	; 0
    5c10:	40 e2       	ldi	r20, 0x20	; 32
    5c12:	51 e4       	ldi	r21, 0x41	; 65
    5c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	cb 01       	movw	r24, r22
    5c1c:	bc 01       	movw	r22, r24
    5c1e:	cd 01       	movw	r24, r26
    5c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c24:	dc 01       	movw	r26, r24
    5c26:	cb 01       	movw	r24, r22
    5c28:	9e 83       	std	Y+6, r25	; 0x06
    5c2a:	8d 83       	std	Y+5, r24	; 0x05
    5c2c:	0f c0       	rjmp	.+30     	; 0x5c4c <main+0x3af0>
    5c2e:	88 ec       	ldi	r24, 0xC8	; 200
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	9c 83       	std	Y+4, r25	; 0x04
    5c34:	8b 83       	std	Y+3, r24	; 0x03
    5c36:	8b 81       	ldd	r24, Y+3	; 0x03
    5c38:	9c 81       	ldd	r25, Y+4	; 0x04
    5c3a:	01 97       	sbiw	r24, 0x01	; 1
    5c3c:	f1 f7       	brne	.-4      	; 0x5c3a <main+0x3ade>
    5c3e:	9c 83       	std	Y+4, r25	; 0x04
    5c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c42:	8d 81       	ldd	r24, Y+5	; 0x05
    5c44:	9e 81       	ldd	r25, Y+6	; 0x06
    5c46:	01 97       	sbiw	r24, 0x01	; 1
    5c48:	9e 83       	std	Y+6, r25	; 0x06
    5c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c50:	00 97       	sbiw	r24, 0x00	; 0
    5c52:	69 f7       	brne	.-38     	; 0x5c2e <main+0x3ad2>
    5c54:	14 c0       	rjmp	.+40     	; 0x5c7e <main+0x3b22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c56:	6f 81       	ldd	r22, Y+7	; 0x07
    5c58:	78 85       	ldd	r23, Y+8	; 0x08
    5c5a:	89 85       	ldd	r24, Y+9	; 0x09
    5c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c62:	dc 01       	movw	r26, r24
    5c64:	cb 01       	movw	r24, r22
    5c66:	9e 83       	std	Y+6, r25	; 0x06
    5c68:	8d 83       	std	Y+5, r24	; 0x05
    5c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c6e:	9a 83       	std	Y+2, r25	; 0x02
    5c70:	89 83       	std	Y+1, r24	; 0x01
    5c72:	89 81       	ldd	r24, Y+1	; 0x01
    5c74:	9a 81       	ldd	r25, Y+2	; 0x02
    5c76:	01 97       	sbiw	r24, 0x01	; 1
    5c78:	f1 f7       	brne	.-4      	; 0x5c76 <main+0x3b1a>
    5c7a:	9a 83       	std	Y+2, r25	; 0x02
    5c7c:	89 83       	std	Y+1, r24	; 0x01
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
    5c7e:	fe 01       	movw	r30, r28
    5c80:	ea 51       	subi	r30, 0x1A	; 26
    5c82:	fe 4f       	sbci	r31, 0xFE	; 254
    5c84:	80 81       	ld	r24, Z
    5c86:	88 23       	and	r24, r24
    5c88:	29 f4       	brne	.+10     	; 0x5c94 <main+0x3b38>
    5c8a:	80 91 a0 02 	lds	r24, 0x02A0
    5c8e:	88 23       	and	r24, r24
    5c90:	09 f4       	brne	.+2      	; 0x5c94 <main+0x3b38>
    5c92:	95 cb       	rjmp	.-2262   	; 0x53be <main+0x3262>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    5c94:	fe 01       	movw	r30, r28
    5c96:	e2 52       	subi	r30, 0x22	; 34
    5c98:	fe 4f       	sbci	r31, 0xFE	; 254
    5c9a:	88 e0       	ldi	r24, 0x08	; 8
    5c9c:	80 83       	st	Z, r24
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    5c9e:	80 91 a0 02 	lds	r24, 0x02A0
    5ca2:	81 30       	cpi	r24, 0x01	; 1
    5ca4:	11 f0       	breq	.+4      	; 0x5caa <main+0x3b4e>
    5ca6:	0c 94 59 23 	jmp	0x46b2	; 0x46b2 <main+0x2556>
    5caa:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <main+0xdf2>

00005cae <__vector_10>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

ISR(TIMER0_COMP_vect)
{
    5cae:	1f 92       	push	r1
    5cb0:	0f 92       	push	r0
    5cb2:	0f b6       	in	r0, 0x3f	; 63
    5cb4:	0f 92       	push	r0
    5cb6:	11 24       	eor	r1, r1
    5cb8:	8f 93       	push	r24
    5cba:	9f 93       	push	r25
    5cbc:	df 93       	push	r29
    5cbe:	cf 93       	push	r28
    5cc0:	cd b7       	in	r28, 0x3d	; 61
    5cc2:	de b7       	in	r29, 0x3e	; 62
	session_counter++;//increase the indicator of session time for every tick
    5cc4:	80 91 9e 02 	lds	r24, 0x029E
    5cc8:	90 91 9f 02 	lds	r25, 0x029F
    5ccc:	01 96       	adiw	r24, 0x01	; 1
    5cce:	90 93 9f 02 	sts	0x029F, r25
    5cd2:	80 93 9e 02 	sts	0x029E, r24
    5cd6:	cf 91       	pop	r28
    5cd8:	df 91       	pop	r29
    5cda:	9f 91       	pop	r25
    5cdc:	8f 91       	pop	r24
    5cde:	0f 90       	pop	r0
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	0f 90       	pop	r0
    5ce4:	1f 90       	pop	r1
    5ce6:	18 95       	reti

00005ce8 <ui8ComparePass>:

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
    5ce8:	df 93       	push	r29
    5cea:	cf 93       	push	r28
    5cec:	cd b7       	in	r28, 0x3d	; 61
    5cee:	de b7       	in	r29, 0x3e	; 62
    5cf0:	27 97       	sbiw	r28, 0x07	; 7
    5cf2:	0f b6       	in	r0, 0x3f	; 63
    5cf4:	f8 94       	cli
    5cf6:	de bf       	out	0x3e, r29	; 62
    5cf8:	0f be       	out	0x3f, r0	; 63
    5cfa:	cd bf       	out	0x3d, r28	; 61
    5cfc:	9c 83       	std	Y+4, r25	; 0x04
    5cfe:	8b 83       	std	Y+3, r24	; 0x03
    5d00:	7e 83       	std	Y+6, r23	; 0x06
    5d02:	6d 83       	std	Y+5, r22	; 0x05
    5d04:	4f 83       	std	Y+7, r20	; 0x07
	uint8 pin_counter=0;//the offset of the character of the pin
    5d06:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ret_value = TRUE;
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	89 83       	std	Y+1, r24	; 0x01
    5d0c:	19 c0       	rjmp	.+50     	; 0x5d40 <ui8ComparePass+0x58>
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
    5d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d10:	28 2f       	mov	r18, r24
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	8b 81       	ldd	r24, Y+3	; 0x03
    5d16:	9c 81       	ldd	r25, Y+4	; 0x04
    5d18:	fc 01       	movw	r30, r24
    5d1a:	e2 0f       	add	r30, r18
    5d1c:	f3 1f       	adc	r31, r19
    5d1e:	40 81       	ld	r20, Z
    5d20:	8a 81       	ldd	r24, Y+2	; 0x02
    5d22:	28 2f       	mov	r18, r24
    5d24:	30 e0       	ldi	r19, 0x00	; 0
    5d26:	8d 81       	ldd	r24, Y+5	; 0x05
    5d28:	9e 81       	ldd	r25, Y+6	; 0x06
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	e2 0f       	add	r30, r18
    5d2e:	f3 1f       	adc	r31, r19
    5d30:	80 81       	ld	r24, Z
    5d32:	48 17       	cp	r20, r24
    5d34:	11 f0       	breq	.+4      	; 0x5d3a <ui8ComparePass+0x52>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
    5d36:	19 82       	std	Y+1, r1	; 0x01
    5d38:	07 c0       	rjmp	.+14     	; 0x5d48 <ui8ComparePass+0x60>
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
    5d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3c:	8f 5f       	subi	r24, 0xFF	; 255
    5d3e:	8a 83       	std	Y+2, r24	; 0x02

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    5d40:	9a 81       	ldd	r25, Y+2	; 0x02
    5d42:	8f 81       	ldd	r24, Y+7	; 0x07
    5d44:	98 17       	cp	r25, r24
    5d46:	18 f3       	brcs	.-58     	; 0x5d0e <ui8ComparePass+0x26>
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
}
    5d4a:	27 96       	adiw	r28, 0x07	; 7
    5d4c:	0f b6       	in	r0, 0x3f	; 63
    5d4e:	f8 94       	cli
    5d50:	de bf       	out	0x3e, r29	; 62
    5d52:	0f be       	out	0x3f, r0	; 63
    5d54:	cd bf       	out	0x3d, r28	; 61
    5d56:	cf 91       	pop	r28
    5d58:	df 91       	pop	r29
    5d5a:	08 95       	ret

00005d5c <vMenuOption>:

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    5d5c:	df 93       	push	r29
    5d5e:	cf 93       	push	r28
    5d60:	cd b7       	in	r28, 0x3d	; 61
    5d62:	de b7       	in	r29, 0x3e	; 62
    5d64:	e3 97       	sbiw	r28, 0x33	; 51
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	88 ab       	std	Y+48, r24	; 0x30
    5d72:	69 ab       	std	Y+49, r22	; 0x31
	uint8 u8StatusCode  = 0;//demand status code
    5d74:	1f a6       	std	Y+47, r1	; 0x2f
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
    5d76:	1e a6       	std	Y+46, r1	; 0x2e
	uint8 u8TurnOffCode = 0;//turn off the device or room
    5d78:	1d a6       	std	Y+45, r1	; 0x2d
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
    5d7a:	8f ef       	ldi	r24, 0xFF	; 255
    5d7c:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
    5d7e:	8f ef       	ldi	r24, 0xFF	; 255
    5d80:	8b a7       	std	Y+43, r24	; 0x2b
	
	do
	{
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    5d82:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
    5d86:	88 a9       	ldd	r24, Y+48	; 0x30
    5d88:	28 2f       	mov	r18, r24
    5d8a:	30 e0       	ldi	r19, 0x00	; 0
    5d8c:	3b ab       	std	Y+51, r19	; 0x33
    5d8e:	2a ab       	std	Y+50, r18	; 0x32
    5d90:	8a a9       	ldd	r24, Y+50	; 0x32
    5d92:	9b a9       	ldd	r25, Y+51	; 0x33
    5d94:	85 30       	cpi	r24, 0x05	; 5
    5d96:	91 05       	cpc	r25, r1
    5d98:	b1 f1       	breq	.+108    	; 0x5e06 <vMenuOption+0xaa>
    5d9a:	2a a9       	ldd	r18, Y+50	; 0x32
    5d9c:	3b a9       	ldd	r19, Y+51	; 0x33
    5d9e:	26 30       	cpi	r18, 0x06	; 6
    5da0:	31 05       	cpc	r19, r1
    5da2:	5c f4       	brge	.+22     	; 0x5dba <vMenuOption+0x5e>
    5da4:	8a a9       	ldd	r24, Y+50	; 0x32
    5da6:	9b a9       	ldd	r25, Y+51	; 0x33
    5da8:	83 30       	cpi	r24, 0x03	; 3
    5daa:	91 05       	cpc	r25, r1
    5dac:	b1 f0       	breq	.+44     	; 0x5dda <vMenuOption+0x7e>
    5dae:	2a a9       	ldd	r18, Y+50	; 0x32
    5db0:	3b a9       	ldd	r19, Y+51	; 0x33
    5db2:	24 30       	cpi	r18, 0x04	; 4
    5db4:	31 05       	cpc	r19, r1
    5db6:	e1 f0       	breq	.+56     	; 0x5df0 <vMenuOption+0x94>
    5db8:	51 c0       	rjmp	.+162    	; 0x5e5c <vMenuOption+0x100>
    5dba:	8a a9       	ldd	r24, Y+50	; 0x32
    5dbc:	9b a9       	ldd	r25, Y+51	; 0x33
    5dbe:	87 30       	cpi	r24, 0x07	; 7
    5dc0:	91 05       	cpc	r25, r1
    5dc2:	b9 f1       	breq	.+110    	; 0x5e32 <vMenuOption+0xd6>
    5dc4:	2a a9       	ldd	r18, Y+50	; 0x32
    5dc6:	3b a9       	ldd	r19, Y+51	; 0x33
    5dc8:	27 30       	cpi	r18, 0x07	; 7
    5dca:	31 05       	cpc	r19, r1
    5dcc:	3c f1       	brlt	.+78     	; 0x5e1c <vMenuOption+0xc0>
    5dce:	8a a9       	ldd	r24, Y+50	; 0x32
    5dd0:	9b a9       	ldd	r25, Y+51	; 0x33
    5dd2:	89 30       	cpi	r24, 0x09	; 9
    5dd4:	91 05       	cpc	r25, r1
    5dd6:	c1 f1       	breq	.+112    	; 0x5e48 <vMenuOption+0xec>
    5dd8:	41 c0       	rjmp	.+130    	; 0x5e5c <vMenuOption+0x100>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    5dda:	81 e1       	ldi	r24, 0x11	; 17
    5ddc:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM1_TURN_ON;
    5dde:	81 e2       	ldi	r24, 0x21	; 33
    5de0:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM1_TURN_OFF;
    5de2:	81 e3       	ldi	r24, 0x31	; 49
    5de4:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room1 S:");
    5de6:	8a e2       	ldi	r24, 0x2A	; 42
    5de8:	92 e0       	ldi	r25, 0x02	; 2
    5dea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5dee:	36 c0       	rjmp	.+108    	; 0x5e5c <vMenuOption+0x100>
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    5df0:	82 e1       	ldi	r24, 0x12	; 18
    5df2:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM2_TURN_ON;
    5df4:	82 e2       	ldi	r24, 0x22	; 34
    5df6:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM2_TURN_OFF;
    5df8:	82 e3       	ldi	r24, 0x32	; 50
    5dfa:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room2 S:");
    5dfc:	83 e3       	ldi	r24, 0x33	; 51
    5dfe:	92 e0       	ldi	r25, 0x02	; 2
    5e00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5e04:	2b c0       	rjmp	.+86     	; 0x5e5c <vMenuOption+0x100>
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    5e06:	83 e1       	ldi	r24, 0x13	; 19
    5e08:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM3_TURN_ON;
    5e0a:	83 e2       	ldi	r24, 0x23	; 35
    5e0c:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM3_TURN_OFF;
    5e0e:	83 e3       	ldi	r24, 0x33	; 51
    5e10:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room3 S:");
    5e12:	8c e3       	ldi	r24, 0x3C	; 60
    5e14:	92 e0       	ldi	r25, 0x02	; 2
    5e16:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5e1a:	20 c0       	rjmp	.+64     	; 0x5e5c <vMenuOption+0x100>
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    5e1c:	84 e1       	ldi	r24, 0x14	; 20
    5e1e:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = ROOM4_TURN_ON;
    5e20:	84 e2       	ldi	r24, 0x24	; 36
    5e22:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = ROOM4_TURN_OFF;
    5e24:	84 e3       	ldi	r24, 0x34	; 52
    5e26:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Room4 S:");
    5e28:	85 e4       	ldi	r24, 0x45	; 69
    5e2a:	92 e0       	ldi	r25, 0x02	; 2
    5e2c:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5e30:	15 c0       	rjmp	.+42     	; 0x5e5c <vMenuOption+0x100>
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    5e32:	85 e1       	ldi	r24, 0x15	; 21
    5e34:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = TV_TURN_ON;
    5e36:	85 e2       	ldi	r24, 0x25	; 37
    5e38:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = TV_TURN_OFF;
    5e3a:	85 e3       	ldi	r24, 0x35	; 53
    5e3c:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("TV S:");
    5e3e:	8e e4       	ldi	r24, 0x4E	; 78
    5e40:	92 e0       	ldi	r25, 0x02	; 2
    5e42:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5e46:	0a c0       	rjmp	.+20     	; 0x5e5c <vMenuOption+0x100>
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    5e48:	86 e1       	ldi	r24, 0x16	; 22
    5e4a:	8f a7       	std	Y+47, r24	; 0x2f
			u8TurnOnCode = AIR_COND_TURN_ON;
    5e4c:	86 e2       	ldi	r24, 0x26	; 38
    5e4e:	8e a7       	std	Y+46, r24	; 0x2e
			u8TurnOffCode = AIR_COND_TURN_OFF;
    5e50:	86 e3       	ldi	r24, 0x36	; 54
    5e52:	8d a7       	std	Y+45, r24	; 0x2d
			LCD_vSend_string("Air Cond. S:");
    5e54:	84 e5       	ldi	r24, 0x54	; 84
    5e56:	92 e0       	ldi	r25, 0x02	; 2
    5e58:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
    5e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e5e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    5e62:	80 e0       	ldi	r24, 0x00	; 0
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	a8 ec       	ldi	r26, 0xC8	; 200
    5e68:	b2 e4       	ldi	r27, 0x42	; 66
    5e6a:	8f a3       	std	Y+39, r24	; 0x27
    5e6c:	98 a7       	std	Y+40, r25	; 0x28
    5e6e:	a9 a7       	std	Y+41, r26	; 0x29
    5e70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e72:	6f a1       	ldd	r22, Y+39	; 0x27
    5e74:	78 a5       	ldd	r23, Y+40	; 0x28
    5e76:	89 a5       	ldd	r24, Y+41	; 0x29
    5e78:	9a a5       	ldd	r25, Y+42	; 0x2a
    5e7a:	20 e0       	ldi	r18, 0x00	; 0
    5e7c:	30 e0       	ldi	r19, 0x00	; 0
    5e7e:	4a ef       	ldi	r20, 0xFA	; 250
    5e80:	54 e4       	ldi	r21, 0x44	; 68
    5e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e86:	dc 01       	movw	r26, r24
    5e88:	cb 01       	movw	r24, r22
    5e8a:	8b a3       	std	Y+35, r24	; 0x23
    5e8c:	9c a3       	std	Y+36, r25	; 0x24
    5e8e:	ad a3       	std	Y+37, r26	; 0x25
    5e90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5e92:	6b a1       	ldd	r22, Y+35	; 0x23
    5e94:	7c a1       	ldd	r23, Y+36	; 0x24
    5e96:	8d a1       	ldd	r24, Y+37	; 0x25
    5e98:	9e a1       	ldd	r25, Y+38	; 0x26
    5e9a:	20 e0       	ldi	r18, 0x00	; 0
    5e9c:	30 e0       	ldi	r19, 0x00	; 0
    5e9e:	40 e8       	ldi	r20, 0x80	; 128
    5ea0:	5f e3       	ldi	r21, 0x3F	; 63
    5ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ea6:	88 23       	and	r24, r24
    5ea8:	2c f4       	brge	.+10     	; 0x5eb4 <vMenuOption+0x158>
		__ticks = 1;
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	90 e0       	ldi	r25, 0x00	; 0
    5eae:	9a a3       	std	Y+34, r25	; 0x22
    5eb0:	89 a3       	std	Y+33, r24	; 0x21
    5eb2:	3f c0       	rjmp	.+126    	; 0x5f32 <vMenuOption+0x1d6>
	else if (__tmp > 65535)
    5eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    5eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    5eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    5eba:	9e a1       	ldd	r25, Y+38	; 0x26
    5ebc:	20 e0       	ldi	r18, 0x00	; 0
    5ebe:	3f ef       	ldi	r19, 0xFF	; 255
    5ec0:	4f e7       	ldi	r20, 0x7F	; 127
    5ec2:	57 e4       	ldi	r21, 0x47	; 71
    5ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ec8:	18 16       	cp	r1, r24
    5eca:	4c f5       	brge	.+82     	; 0x5f1e <vMenuOption+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ecc:	6f a1       	ldd	r22, Y+39	; 0x27
    5ece:	78 a5       	ldd	r23, Y+40	; 0x28
    5ed0:	89 a5       	ldd	r24, Y+41	; 0x29
    5ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ed4:	20 e0       	ldi	r18, 0x00	; 0
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	40 e2       	ldi	r20, 0x20	; 32
    5eda:	51 e4       	ldi	r21, 0x41	; 65
    5edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ee0:	dc 01       	movw	r26, r24
    5ee2:	cb 01       	movw	r24, r22
    5ee4:	bc 01       	movw	r22, r24
    5ee6:	cd 01       	movw	r24, r26
    5ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eec:	dc 01       	movw	r26, r24
    5eee:	cb 01       	movw	r24, r22
    5ef0:	9a a3       	std	Y+34, r25	; 0x22
    5ef2:	89 a3       	std	Y+33, r24	; 0x21
    5ef4:	0f c0       	rjmp	.+30     	; 0x5f14 <vMenuOption+0x1b8>
    5ef6:	88 ec       	ldi	r24, 0xC8	; 200
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	98 a3       	std	Y+32, r25	; 0x20
    5efc:	8f 8f       	std	Y+31, r24	; 0x1f
    5efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f00:	98 a1       	ldd	r25, Y+32	; 0x20
    5f02:	01 97       	sbiw	r24, 0x01	; 1
    5f04:	f1 f7       	brne	.-4      	; 0x5f02 <vMenuOption+0x1a6>
    5f06:	98 a3       	std	Y+32, r25	; 0x20
    5f08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5f0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5f0e:	01 97       	sbiw	r24, 0x01	; 1
    5f10:	9a a3       	std	Y+34, r25	; 0x22
    5f12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f14:	89 a1       	ldd	r24, Y+33	; 0x21
    5f16:	9a a1       	ldd	r25, Y+34	; 0x22
    5f18:	00 97       	sbiw	r24, 0x00	; 0
    5f1a:	69 f7       	brne	.-38     	; 0x5ef6 <vMenuOption+0x19a>
    5f1c:	14 c0       	rjmp	.+40     	; 0x5f46 <vMenuOption+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    5f20:	7c a1       	ldd	r23, Y+36	; 0x24
    5f22:	8d a1       	ldd	r24, Y+37	; 0x25
    5f24:	9e a1       	ldd	r25, Y+38	; 0x26
    5f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	cb 01       	movw	r24, r22
    5f2e:	9a a3       	std	Y+34, r25	; 0x22
    5f30:	89 a3       	std	Y+33, r24	; 0x21
    5f32:	89 a1       	ldd	r24, Y+33	; 0x21
    5f34:	9a a1       	ldd	r25, Y+34	; 0x22
    5f36:	9e 8f       	std	Y+30, r25	; 0x1e
    5f38:	8d 8f       	std	Y+29, r24	; 0x1d
    5f3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f3e:	01 97       	sbiw	r24, 0x01	; 1
    5f40:	f1 f7       	brne	.-4      	; 0x5f3e <vMenuOption+0x1e2>
    5f42:	9e 8f       	std	Y+30, r25	; 0x1e
    5f44:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
    5f46:	8f ef       	ldi	r24, 0xFF	; 255
    5f48:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    5f4c:	8c a7       	std	Y+44, r24	; 0x2c
		if(response == ON_STATUS)//if the response from the slave was on status
    5f4e:	8c a5       	ldd	r24, Y+44	; 0x2c
    5f50:	81 30       	cpi	r24, 0x01	; 1
    5f52:	29 f4       	brne	.+10     	; 0x5f5e <vMenuOption+0x202>
		{
			LCD_vSend_string("ON");//print the status on
    5f54:	81 e6       	ldi	r24, 0x61	; 97
    5f56:	92 e0       	ldi	r25, 0x02	; 2
    5f58:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    5f5c:	04 c0       	rjmp	.+8      	; 0x5f66 <vMenuOption+0x20a>
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
    5f5e:	84 e6       	ldi	r24, 0x64	; 100
    5f60:	92 e0       	ldi	r25, 0x02	; 2
    5f62:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
    5f66:	82 e0       	ldi	r24, 0x02	; 2
    5f68:	61 e0       	ldi	r22, 0x01	; 1
    5f6a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
    5f6e:	88 e6       	ldi	r24, 0x68	; 104
    5f70:	92 e0       	ldi	r25, 0x02	; 2
    5f72:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
    5f76:	89 a9       	ldd	r24, Y+49	; 0x31
    5f78:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <u8GetKeyPressed>
    5f7c:	8b a7       	std	Y+43, r24	; 0x2b
    5f7e:	80 e0       	ldi	r24, 0x00	; 0
    5f80:	90 e0       	ldi	r25, 0x00	; 0
    5f82:	a8 ec       	ldi	r26, 0xC8	; 200
    5f84:	b2 e4       	ldi	r27, 0x42	; 66
    5f86:	89 8f       	std	Y+25, r24	; 0x19
    5f88:	9a 8f       	std	Y+26, r25	; 0x1a
    5f8a:	ab 8f       	std	Y+27, r26	; 0x1b
    5f8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f8e:	69 8d       	ldd	r22, Y+25	; 0x19
    5f90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5f92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5f94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	4a ef       	ldi	r20, 0xFA	; 250
    5f9c:	54 e4       	ldi	r21, 0x44	; 68
    5f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fa2:	dc 01       	movw	r26, r24
    5fa4:	cb 01       	movw	r24, r22
    5fa6:	8d 8b       	std	Y+21, r24	; 0x15
    5fa8:	9e 8b       	std	Y+22, r25	; 0x16
    5faa:	af 8b       	std	Y+23, r26	; 0x17
    5fac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5fae:	6d 89       	ldd	r22, Y+21	; 0x15
    5fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    5fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    5fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    5fb6:	20 e0       	ldi	r18, 0x00	; 0
    5fb8:	30 e0       	ldi	r19, 0x00	; 0
    5fba:	40 e8       	ldi	r20, 0x80	; 128
    5fbc:	5f e3       	ldi	r21, 0x3F	; 63
    5fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fc2:	88 23       	and	r24, r24
    5fc4:	2c f4       	brge	.+10     	; 0x5fd0 <vMenuOption+0x274>
		__ticks = 1;
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	9c 8b       	std	Y+20, r25	; 0x14
    5fcc:	8b 8b       	std	Y+19, r24	; 0x13
    5fce:	3f c0       	rjmp	.+126    	; 0x604e <vMenuOption+0x2f2>
	else if (__tmp > 65535)
    5fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    5fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    5fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    5fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	3f ef       	ldi	r19, 0xFF	; 255
    5fdc:	4f e7       	ldi	r20, 0x7F	; 127
    5fde:	57 e4       	ldi	r21, 0x47	; 71
    5fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fe4:	18 16       	cp	r1, r24
    5fe6:	4c f5       	brge	.+82     	; 0x603a <vMenuOption+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe8:	69 8d       	ldd	r22, Y+25	; 0x19
    5fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ff0:	20 e0       	ldi	r18, 0x00	; 0
    5ff2:	30 e0       	ldi	r19, 0x00	; 0
    5ff4:	40 e2       	ldi	r20, 0x20	; 32
    5ff6:	51 e4       	ldi	r21, 0x41	; 65
    5ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	bc 01       	movw	r22, r24
    6002:	cd 01       	movw	r24, r26
    6004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6008:	dc 01       	movw	r26, r24
    600a:	cb 01       	movw	r24, r22
    600c:	9c 8b       	std	Y+20, r25	; 0x14
    600e:	8b 8b       	std	Y+19, r24	; 0x13
    6010:	0f c0       	rjmp	.+30     	; 0x6030 <vMenuOption+0x2d4>
    6012:	88 ec       	ldi	r24, 0xC8	; 200
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	9a 8b       	std	Y+18, r25	; 0x12
    6018:	89 8b       	std	Y+17, r24	; 0x11
    601a:	89 89       	ldd	r24, Y+17	; 0x11
    601c:	9a 89       	ldd	r25, Y+18	; 0x12
    601e:	01 97       	sbiw	r24, 0x01	; 1
    6020:	f1 f7       	brne	.-4      	; 0x601e <vMenuOption+0x2c2>
    6022:	9a 8b       	std	Y+18, r25	; 0x12
    6024:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6026:	8b 89       	ldd	r24, Y+19	; 0x13
    6028:	9c 89       	ldd	r25, Y+20	; 0x14
    602a:	01 97       	sbiw	r24, 0x01	; 1
    602c:	9c 8b       	std	Y+20, r25	; 0x14
    602e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6030:	8b 89       	ldd	r24, Y+19	; 0x13
    6032:	9c 89       	ldd	r25, Y+20	; 0x14
    6034:	00 97       	sbiw	r24, 0x00	; 0
    6036:	69 f7       	brne	.-38     	; 0x6012 <vMenuOption+0x2b6>
    6038:	14 c0       	rjmp	.+40     	; 0x6062 <vMenuOption+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    603a:	6d 89       	ldd	r22, Y+21	; 0x15
    603c:	7e 89       	ldd	r23, Y+22	; 0x16
    603e:	8f 89       	ldd	r24, Y+23	; 0x17
    6040:	98 8d       	ldd	r25, Y+24	; 0x18
    6042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6046:	dc 01       	movw	r26, r24
    6048:	cb 01       	movw	r24, r22
    604a:	9c 8b       	std	Y+20, r25	; 0x14
    604c:	8b 8b       	std	Y+19, r24	; 0x13
    604e:	8b 89       	ldd	r24, Y+19	; 0x13
    6050:	9c 89       	ldd	r25, Y+20	; 0x14
    6052:	98 8b       	std	Y+16, r25	; 0x10
    6054:	8f 87       	std	Y+15, r24	; 0x0f
    6056:	8f 85       	ldd	r24, Y+15	; 0x0f
    6058:	98 89       	ldd	r25, Y+16	; 0x10
    605a:	01 97       	sbiw	r24, 0x01	; 1
    605c:	f1 f7       	brne	.-4      	; 0x605a <vMenuOption+0x2fe>
    605e:	98 8b       	std	Y+16, r25	; 0x10
    6060:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
    6062:	8b a5       	ldd	r24, Y+43	; 0x2b
    6064:	81 33       	cpi	r24, 0x31	; 49
    6066:	21 f4       	brne	.+8      	; 0x6070 <vMenuOption+0x314>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
    6068:	8e a5       	ldd	r24, Y+46	; 0x2e
    606a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    606e:	87 c0       	rjmp	.+270    	; 0x617e <vMenuOption+0x422>
		}
		else if (key_pressed == '2')
    6070:	8b a5       	ldd	r24, Y+43	; 0x2b
    6072:	82 33       	cpi	r24, 0x32	; 50
    6074:	21 f4       	brne	.+8      	; 0x607e <vMenuOption+0x322>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
    6076:	8d a5       	ldd	r24, Y+45	; 0x2d
    6078:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <SPI_ui8TransmitRecive>
    607c:	80 c0       	rjmp	.+256    	; 0x617e <vMenuOption+0x422>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    607e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6080:	8f 3f       	cpi	r24, 0xFF	; 255
    6082:	09 f4       	brne	.+2      	; 0x6086 <vMenuOption+0x32a>
    6084:	7c c0       	rjmp	.+248    	; 0x617e <vMenuOption+0x422>
    6086:	8b a5       	ldd	r24, Y+43	; 0x2b
    6088:	80 33       	cpi	r24, 0x30	; 48
    608a:	09 f4       	brne	.+2      	; 0x608e <vMenuOption+0x332>
    608c:	78 c0       	rjmp	.+240    	; 0x617e <vMenuOption+0x422>
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    608e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LCD_clearscreen>
			LCD_vSend_string("Wrong input");//print error message
    6092:	89 e7       	ldi	r24, 0x79	; 121
    6094:	92 e0       	ldi	r25, 0x02	; 2
    6096:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <LCD_vSend_string>
    609a:	80 e0       	ldi	r24, 0x00	; 0
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	aa ef       	ldi	r26, 0xFA	; 250
    60a0:	b3 e4       	ldi	r27, 0x43	; 67
    60a2:	8b 87       	std	Y+11, r24	; 0x0b
    60a4:	9c 87       	std	Y+12, r25	; 0x0c
    60a6:	ad 87       	std	Y+13, r26	; 0x0d
    60a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    60ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    60ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    60b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60b2:	20 e0       	ldi	r18, 0x00	; 0
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	4a ef       	ldi	r20, 0xFA	; 250
    60b8:	54 e4       	ldi	r21, 0x44	; 68
    60ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60be:	dc 01       	movw	r26, r24
    60c0:	cb 01       	movw	r24, r22
    60c2:	8f 83       	std	Y+7, r24	; 0x07
    60c4:	98 87       	std	Y+8, r25	; 0x08
    60c6:	a9 87       	std	Y+9, r26	; 0x09
    60c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60ca:	6f 81       	ldd	r22, Y+7	; 0x07
    60cc:	78 85       	ldd	r23, Y+8	; 0x08
    60ce:	89 85       	ldd	r24, Y+9	; 0x09
    60d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60d2:	20 e0       	ldi	r18, 0x00	; 0
    60d4:	30 e0       	ldi	r19, 0x00	; 0
    60d6:	40 e8       	ldi	r20, 0x80	; 128
    60d8:	5f e3       	ldi	r21, 0x3F	; 63
    60da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60de:	88 23       	and	r24, r24
    60e0:	2c f4       	brge	.+10     	; 0x60ec <vMenuOption+0x390>
		__ticks = 1;
    60e2:	81 e0       	ldi	r24, 0x01	; 1
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	9e 83       	std	Y+6, r25	; 0x06
    60e8:	8d 83       	std	Y+5, r24	; 0x05
    60ea:	3f c0       	rjmp	.+126    	; 0x616a <vMenuOption+0x40e>
	else if (__tmp > 65535)
    60ec:	6f 81       	ldd	r22, Y+7	; 0x07
    60ee:	78 85       	ldd	r23, Y+8	; 0x08
    60f0:	89 85       	ldd	r24, Y+9	; 0x09
    60f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	3f ef       	ldi	r19, 0xFF	; 255
    60f8:	4f e7       	ldi	r20, 0x7F	; 127
    60fa:	57 e4       	ldi	r21, 0x47	; 71
    60fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6100:	18 16       	cp	r1, r24
    6102:	4c f5       	brge	.+82     	; 0x6156 <vMenuOption+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6104:	6b 85       	ldd	r22, Y+11	; 0x0b
    6106:	7c 85       	ldd	r23, Y+12	; 0x0c
    6108:	8d 85       	ldd	r24, Y+13	; 0x0d
    610a:	9e 85       	ldd	r25, Y+14	; 0x0e
    610c:	20 e0       	ldi	r18, 0x00	; 0
    610e:	30 e0       	ldi	r19, 0x00	; 0
    6110:	40 e2       	ldi	r20, 0x20	; 32
    6112:	51 e4       	ldi	r21, 0x41	; 65
    6114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	bc 01       	movw	r22, r24
    611e:	cd 01       	movw	r24, r26
    6120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6124:	dc 01       	movw	r26, r24
    6126:	cb 01       	movw	r24, r22
    6128:	9e 83       	std	Y+6, r25	; 0x06
    612a:	8d 83       	std	Y+5, r24	; 0x05
    612c:	0f c0       	rjmp	.+30     	; 0x614c <vMenuOption+0x3f0>
    612e:	88 ec       	ldi	r24, 0xC8	; 200
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	9c 83       	std	Y+4, r25	; 0x04
    6134:	8b 83       	std	Y+3, r24	; 0x03
    6136:	8b 81       	ldd	r24, Y+3	; 0x03
    6138:	9c 81       	ldd	r25, Y+4	; 0x04
    613a:	01 97       	sbiw	r24, 0x01	; 1
    613c:	f1 f7       	brne	.-4      	; 0x613a <vMenuOption+0x3de>
    613e:	9c 83       	std	Y+4, r25	; 0x04
    6140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6142:	8d 81       	ldd	r24, Y+5	; 0x05
    6144:	9e 81       	ldd	r25, Y+6	; 0x06
    6146:	01 97       	sbiw	r24, 0x01	; 1
    6148:	9e 83       	std	Y+6, r25	; 0x06
    614a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    614c:	8d 81       	ldd	r24, Y+5	; 0x05
    614e:	9e 81       	ldd	r25, Y+6	; 0x06
    6150:	00 97       	sbiw	r24, 0x00	; 0
    6152:	69 f7       	brne	.-38     	; 0x612e <vMenuOption+0x3d2>
    6154:	14 c0       	rjmp	.+40     	; 0x617e <vMenuOption+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6156:	6f 81       	ldd	r22, Y+7	; 0x07
    6158:	78 85       	ldd	r23, Y+8	; 0x08
    615a:	89 85       	ldd	r24, Y+9	; 0x09
    615c:	9a 85       	ldd	r25, Y+10	; 0x0a
    615e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6162:	dc 01       	movw	r26, r24
    6164:	cb 01       	movw	r24, r22
    6166:	9e 83       	std	Y+6, r25	; 0x06
    6168:	8d 83       	std	Y+5, r24	; 0x05
    616a:	8d 81       	ldd	r24, Y+5	; 0x05
    616c:	9e 81       	ldd	r25, Y+6	; 0x06
    616e:	9a 83       	std	Y+2, r25	; 0x02
    6170:	89 83       	std	Y+1, r24	; 0x01
    6172:	89 81       	ldd	r24, Y+1	; 0x01
    6174:	9a 81       	ldd	r25, Y+2	; 0x02
    6176:	01 97       	sbiw	r24, 0x01	; 1
    6178:	f1 f7       	brne	.-4      	; 0x6176 <vMenuOption+0x41a>
    617a:	9a 83       	std	Y+2, r25	; 0x02
    617c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    617e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6180:	80 33       	cpi	r24, 0x30	; 48
    6182:	18 f0       	brcs	.+6      	; 0x618a <vMenuOption+0x42e>
    6184:	8b a5       	ldd	r24, Y+43	; 0x2b
    6186:	83 33       	cpi	r24, 0x33	; 51
    6188:	28 f0       	brcs	.+10     	; 0x6194 <vMenuOption+0x438>
    618a:	80 91 a0 02 	lds	r24, 0x02A0
    618e:	88 23       	and	r24, r24
    6190:	09 f4       	brne	.+2      	; 0x6194 <vMenuOption+0x438>
    6192:	f7 cd       	rjmp	.-1042   	; 0x5d82 <vMenuOption+0x26>
}
    6194:	e3 96       	adiw	r28, 0x33	; 51
    6196:	0f b6       	in	r0, 0x3f	; 63
    6198:	f8 94       	cli
    619a:	de bf       	out	0x3e, r29	; 62
    619c:	0f be       	out	0x3f, r0	; 63
    619e:	cd bf       	out	0x3d, r28	; 61
    61a0:	cf 91       	pop	r28
    61a2:	df 91       	pop	r29
    61a4:	08 95       	ret

000061a6 <u8GetKeyPressed>:

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
    61a6:	df 93       	push	r29
    61a8:	cf 93       	push	r28
    61aa:	00 d0       	rcall	.+0      	; 0x61ac <u8GetKeyPressed+0x6>
    61ac:	cd b7       	in	r28, 0x3d	; 61
    61ae:	de b7       	in	r29, 0x3e	; 62
    61b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_pressed = NOT_PRESSED;
    61b2:	8f ef       	ldi	r24, 0xFF	; 255
    61b4:	89 83       	std	Y+1, r24	; 0x01
    61b6:	1d c0       	rjmp	.+58     	; 0x61f2 <u8GetKeyPressed+0x4c>
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    61b8:	80 91 9e 02 	lds	r24, 0x029E
    61bc:	90 91 9f 02 	lds	r25, 0x029F
    61c0:	2b e0       	ldi	r18, 0x0B	; 11
    61c2:	88 3b       	cpi	r24, 0xB8	; 184
    61c4:	92 07       	cpc	r25, r18
    61c6:	18 f0       	brcs	.+6      	; 0x61ce <u8GetKeyPressed+0x28>
    61c8:	8a 81       	ldd	r24, Y+2	; 0x02
    61ca:	81 30       	cpi	r24, 0x01	; 1
    61cc:	59 f0       	breq	.+22     	; 0x61e4 <u8GetKeyPressed+0x3e>
    61ce:	80 91 9e 02 	lds	r24, 0x029E
    61d2:	90 91 9f 02 	lds	r25, 0x029F
    61d6:	27 e0       	ldi	r18, 0x07	; 7
    61d8:	80 3d       	cpi	r24, 0xD0	; 208
    61da:	92 07       	cpc	r25, r18
    61dc:	38 f0       	brcs	.+14     	; 0x61ec <u8GetKeyPressed+0x46>
    61de:	8a 81       	ldd	r24, Y+2	; 0x02
    61e0:	82 30       	cpi	r24, 0x02	; 2
    61e2:	21 f4       	brne	.+8      	; 0x61ec <u8GetKeyPressed+0x46>
		{
			timeout_flag = TRUE;//set timeout flag to true
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	80 93 a0 02 	sts	0x02A0, r24
    61ea:	06 c0       	rjmp	.+12     	; 0x61f8 <u8GetKeyPressed+0x52>
			break;//break the loop that wait for input from the user
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    61ec:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <keypad_u8check_press>
    61f0:	89 83       	std	Y+1, r24	; 0x01
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    61f2:	89 81       	ldd	r24, Y+1	; 0x01
    61f4:	8f 3f       	cpi	r24, 0xFF	; 255
    61f6:	01 f3       	breq	.-64     	; 0x61b8 <u8GetKeyPressed+0x12>
			break;//break the loop that wait for input from the user
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
    61f8:	89 81       	ldd	r24, Y+1	; 0x01
    61fa:	0f 90       	pop	r0
    61fc:	0f 90       	pop	r0
    61fe:	cf 91       	pop	r28
    6200:	df 91       	pop	r29
    6202:	08 95       	ret

00006204 <timer0_initializeCTC>:
 *  Author: Mohamed Zaghlol
 */
#include "timer_driver.h"

void timer0_initializeCTC(void)
{
    6204:	df 93       	push	r29
    6206:	cf 93       	push	r28
    6208:	cd b7       	in	r28, 0x3d	; 61
    620a:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    620c:	ec e5       	ldi	r30, 0x5C	; 92
    620e:	f0 e0       	ldi	r31, 0x00	; 0
    6210:	8e e4       	ldi	r24, 0x4E	; 78
    6212:	80 83       	st	Z, r24
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    6214:	a3 e5       	ldi	r26, 0x53	; 83
    6216:	b0 e0       	ldi	r27, 0x00	; 0
    6218:	e3 e5       	ldi	r30, 0x53	; 83
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	80 81       	ld	r24, Z
    621e:	88 60       	ori	r24, 0x08	; 8
    6220:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    6222:	a3 e5       	ldi	r26, 0x53	; 83
    6224:	b0 e0       	ldi	r27, 0x00	; 0
    6226:	e3 e5       	ldi	r30, 0x53	; 83
    6228:	f0 e0       	ldi	r31, 0x00	; 0
    622a:	80 81       	ld	r24, Z
    622c:	8f 7b       	andi	r24, 0xBF	; 191
    622e:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    6230:	a3 e5       	ldi	r26, 0x53	; 83
    6232:	b0 e0       	ldi	r27, 0x00	; 0
    6234:	e3 e5       	ldi	r30, 0x53	; 83
    6236:	f0 e0       	ldi	r31, 0x00	; 0
    6238:	80 81       	ld	r24, Z
    623a:	81 60       	ori	r24, 0x01	; 1
    623c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    623e:	a3 e5       	ldi	r26, 0x53	; 83
    6240:	b0 e0       	ldi	r27, 0x00	; 0
    6242:	e3 e5       	ldi	r30, 0x53	; 83
    6244:	f0 e0       	ldi	r31, 0x00	; 0
    6246:	80 81       	ld	r24, Z
    6248:	8d 7f       	andi	r24, 0xFD	; 253
    624a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    624c:	a3 e5       	ldi	r26, 0x53	; 83
    624e:	b0 e0       	ldi	r27, 0x00	; 0
    6250:	e3 e5       	ldi	r30, 0x53	; 83
    6252:	f0 e0       	ldi	r31, 0x00	; 0
    6254:	80 81       	ld	r24, Z
    6256:	84 60       	ori	r24, 0x04	; 4
    6258:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    625a:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    625c:	a9 e5       	ldi	r26, 0x59	; 89
    625e:	b0 e0       	ldi	r27, 0x00	; 0
    6260:	e9 e5       	ldi	r30, 0x59	; 89
    6262:	f0 e0       	ldi	r31, 0x00	; 0
    6264:	80 81       	ld	r24, Z
    6266:	82 60       	ori	r24, 0x02	; 2
    6268:	8c 93       	st	X, r24
}
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	08 95       	ret

00006270 <timer0_stop>:

void timer0_stop(void)
{
    6270:	df 93       	push	r29
    6272:	cf 93       	push	r28
    6274:	cd b7       	in	r28, 0x3d	; 61
    6276:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    6278:	a3 e5       	ldi	r26, 0x53	; 83
    627a:	b0 e0       	ldi	r27, 0x00	; 0
    627c:	e3 e5       	ldi	r30, 0x53	; 83
    627e:	f0 e0       	ldi	r31, 0x00	; 0
    6280:	80 81       	ld	r24, Z
    6282:	8e 7f       	andi	r24, 0xFE	; 254
    6284:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    6286:	a3 e5       	ldi	r26, 0x53	; 83
    6288:	b0 e0       	ldi	r27, 0x00	; 0
    628a:	e3 e5       	ldi	r30, 0x53	; 83
    628c:	f0 e0       	ldi	r31, 0x00	; 0
    628e:	80 81       	ld	r24, Z
    6290:	8d 7f       	andi	r24, 0xFD	; 253
    6292:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    6294:	a3 e5       	ldi	r26, 0x53	; 83
    6296:	b0 e0       	ldi	r27, 0x00	; 0
    6298:	e3 e5       	ldi	r30, 0x53	; 83
    629a:	f0 e0       	ldi	r31, 0x00	; 0
    629c:	80 81       	ld	r24, Z
    629e:	8b 7f       	andi	r24, 0xFB	; 251
    62a0:	8c 93       	st	X, r24
}
    62a2:	cf 91       	pop	r28
    62a4:	df 91       	pop	r29
    62a6:	08 95       	ret

000062a8 <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
    62a8:	df 93       	push	r29
    62aa:	cf 93       	push	r28
    62ac:	cd b7       	in	r28, 0x3d	; 61
    62ae:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    62b0:	ec e5       	ldi	r30, 0x5C	; 92
    62b2:	f0 e0       	ldi	r31, 0x00	; 0
    62b4:	80 e8       	ldi	r24, 0x80	; 128
    62b6:	80 83       	st	Z, r24
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    62b8:	a3 e5       	ldi	r26, 0x53	; 83
    62ba:	b0 e0       	ldi	r27, 0x00	; 0
    62bc:	e3 e5       	ldi	r30, 0x53	; 83
    62be:	f0 e0       	ldi	r31, 0x00	; 0
    62c0:	80 81       	ld	r24, Z
    62c2:	80 64       	ori	r24, 0x40	; 64
    62c4:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    62c6:	a3 e5       	ldi	r26, 0x53	; 83
    62c8:	b0 e0       	ldi	r27, 0x00	; 0
    62ca:	e3 e5       	ldi	r30, 0x53	; 83
    62cc:	f0 e0       	ldi	r31, 0x00	; 0
    62ce:	80 81       	ld	r24, Z
    62d0:	88 60       	ori	r24, 0x08	; 8
    62d2:	8c 93       	st	X, r24
	
	//Enable global interrupts
	sei();
    62d4:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    62d6:	a3 e5       	ldi	r26, 0x53	; 83
    62d8:	b0 e0       	ldi	r27, 0x00	; 0
    62da:	e3 e5       	ldi	r30, 0x53	; 83
    62dc:	f0 e0       	ldi	r31, 0x00	; 0
    62de:	80 81       	ld	r24, Z
    62e0:	80 62       	ori	r24, 0x20	; 32
    62e2:	8c 93       	st	X, r24
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    62e4:	a9 e5       	ldi	r26, 0x59	; 89
    62e6:	b0 e0       	ldi	r27, 0x00	; 0
    62e8:	e9 e5       	ldi	r30, 0x59	; 89
    62ea:	f0 e0       	ldi	r31, 0x00	; 0
    62ec:	80 81       	ld	r24, Z
    62ee:	81 60       	ori	r24, 0x01	; 1
    62f0:	8c 93       	st	X, r24
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    62f2:	a3 e5       	ldi	r26, 0x53	; 83
    62f4:	b0 e0       	ldi	r27, 0x00	; 0
    62f6:	e3 e5       	ldi	r30, 0x53	; 83
    62f8:	f0 e0       	ldi	r31, 0x00	; 0
    62fa:	80 81       	ld	r24, Z
    62fc:	81 60       	ori	r24, 0x01	; 1
    62fe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
    6300:	a3 e5       	ldi	r26, 0x53	; 83
    6302:	b0 e0       	ldi	r27, 0x00	; 0
    6304:	e3 e5       	ldi	r30, 0x53	; 83
    6306:	f0 e0       	ldi	r31, 0x00	; 0
    6308:	80 81       	ld	r24, Z
    630a:	8d 7f       	andi	r24, 0xFD	; 253
    630c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    630e:	a3 e5       	ldi	r26, 0x53	; 83
    6310:	b0 e0       	ldi	r27, 0x00	; 0
    6312:	e3 e5       	ldi	r30, 0x53	; 83
    6314:	f0 e0       	ldi	r31, 0x00	; 0
    6316:	80 81       	ld	r24, Z
    6318:	84 60       	ori	r24, 0x04	; 4
    631a:	8c 93       	st	X, r24
}
    631c:	cf 91       	pop	r28
    631e:	df 91       	pop	r29
    6320:	08 95       	ret

00006322 <change_dutycycle>:
void change_dutycycle(float64 duty)
{
    6322:	0f 93       	push	r16
    6324:	1f 93       	push	r17
    6326:	df 93       	push	r29
    6328:	cf 93       	push	r28
    632a:	00 d0       	rcall	.+0      	; 0x632c <change_dutycycle+0xa>
    632c:	00 d0       	rcall	.+0      	; 0x632e <change_dutycycle+0xc>
    632e:	cd b7       	in	r28, 0x3d	; 61
    6330:	de b7       	in	r29, 0x3e	; 62
    6332:	69 83       	std	Y+1, r22	; 0x01
    6334:	7a 83       	std	Y+2, r23	; 0x02
    6336:	8b 83       	std	Y+3, r24	; 0x03
    6338:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    633a:	0c e5       	ldi	r16, 0x5C	; 92
    633c:	10 e0       	ldi	r17, 0x00	; 0
    633e:	69 81       	ldd	r22, Y+1	; 0x01
    6340:	7a 81       	ldd	r23, Y+2	; 0x02
    6342:	8b 81       	ldd	r24, Y+3	; 0x03
    6344:	9c 81       	ldd	r25, Y+4	; 0x04
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	30 e0       	ldi	r19, 0x00	; 0
    634a:	48 ec       	ldi	r20, 0xC8	; 200
    634c:	52 e4       	ldi	r21, 0x42	; 66
    634e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    6352:	dc 01       	movw	r26, r24
    6354:	cb 01       	movw	r24, r22
    6356:	bc 01       	movw	r22, r24
    6358:	cd 01       	movw	r24, r26
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e8       	ldi	r20, 0x80	; 128
    6360:	53 e4       	ldi	r21, 0x43	; 67
    6362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6366:	dc 01       	movw	r26, r24
    6368:	cb 01       	movw	r24, r22
    636a:	bc 01       	movw	r22, r24
    636c:	cd 01       	movw	r24, r26
    636e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	f8 01       	movw	r30, r16
    6378:	80 83       	st	Z, r24
}
    637a:	0f 90       	pop	r0
    637c:	0f 90       	pop	r0
    637e:	0f 90       	pop	r0
    6380:	0f 90       	pop	r0
    6382:	cf 91       	pop	r28
    6384:	df 91       	pop	r29
    6386:	1f 91       	pop	r17
    6388:	0f 91       	pop	r16
    638a:	08 95       	ret

0000638c <__prologue_saves__>:
    638c:	2f 92       	push	r2
    638e:	3f 92       	push	r3
    6390:	4f 92       	push	r4
    6392:	5f 92       	push	r5
    6394:	6f 92       	push	r6
    6396:	7f 92       	push	r7
    6398:	8f 92       	push	r8
    639a:	9f 92       	push	r9
    639c:	af 92       	push	r10
    639e:	bf 92       	push	r11
    63a0:	cf 92       	push	r12
    63a2:	df 92       	push	r13
    63a4:	ef 92       	push	r14
    63a6:	ff 92       	push	r15
    63a8:	0f 93       	push	r16
    63aa:	1f 93       	push	r17
    63ac:	cf 93       	push	r28
    63ae:	df 93       	push	r29
    63b0:	cd b7       	in	r28, 0x3d	; 61
    63b2:	de b7       	in	r29, 0x3e	; 62
    63b4:	ca 1b       	sub	r28, r26
    63b6:	db 0b       	sbc	r29, r27
    63b8:	0f b6       	in	r0, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	de bf       	out	0x3e, r29	; 62
    63be:	0f be       	out	0x3f, r0	; 63
    63c0:	cd bf       	out	0x3d, r28	; 61
    63c2:	09 94       	ijmp

000063c4 <__epilogue_restores__>:
    63c4:	2a 88       	ldd	r2, Y+18	; 0x12
    63c6:	39 88       	ldd	r3, Y+17	; 0x11
    63c8:	48 88       	ldd	r4, Y+16	; 0x10
    63ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    63cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    63ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    63d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    63d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    63d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    63d6:	b9 84       	ldd	r11, Y+9	; 0x09
    63d8:	c8 84       	ldd	r12, Y+8	; 0x08
    63da:	df 80       	ldd	r13, Y+7	; 0x07
    63dc:	ee 80       	ldd	r14, Y+6	; 0x06
    63de:	fd 80       	ldd	r15, Y+5	; 0x05
    63e0:	0c 81       	ldd	r16, Y+4	; 0x04
    63e2:	1b 81       	ldd	r17, Y+3	; 0x03
    63e4:	aa 81       	ldd	r26, Y+2	; 0x02
    63e6:	b9 81       	ldd	r27, Y+1	; 0x01
    63e8:	ce 0f       	add	r28, r30
    63ea:	d1 1d       	adc	r29, r1
    63ec:	0f b6       	in	r0, 0x3f	; 63
    63ee:	f8 94       	cli
    63f0:	de bf       	out	0x3e, r29	; 62
    63f2:	0f be       	out	0x3f, r0	; 63
    63f4:	cd bf       	out	0x3d, r28	; 61
    63f6:	ed 01       	movw	r28, r26
    63f8:	08 95       	ret

000063fa <_exit>:
    63fa:	f8 94       	cli

000063fc <__stop_program>:
    63fc:	ff cf       	rjmp	.-2      	; 0x63fc <__stop_program>
